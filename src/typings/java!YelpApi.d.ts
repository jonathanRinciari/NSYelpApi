/// <reference path="./node_namespaces/tns-platform-declarations/android.d.ts" />


declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JacksonAnnotation {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JacksonAnnotation>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JacksonAnnotation interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JacksonAnnotationValue<A>  extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JacksonAnnotationValue<any>>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JacksonAnnotationValue<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						valueFor(): java.lang.Class<A>;
					});
					public constructor();
					public valueFor(): java.lang.Class<A>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JacksonAnnotationsInside {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JacksonAnnotationsInside>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JacksonAnnotationsInside interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JacksonInject {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JacksonInject>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JacksonInject interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonAnyGetter {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonAnyGetter>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonAnyGetter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonAnySetter {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonAnySetter>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonAnySetter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonAutoDetect {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonAutoDetect>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonAutoDetect interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getterVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						isGetterVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						setterVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						creatorVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						fieldVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
					});
					public constructor();
					public isGetterVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
					public setterVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
					public creatorVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
					public fieldVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
					public getterVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
				}
				export namespace JsonAutoDetect {
					export class Visibility {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility>;
						public static ANY: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						public static NON_PRIVATE: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						public static PROTECTED_AND_PUBLIC: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						public static PUBLIC_ONLY: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						public static NONE: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						public static DEFAULT: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
						public static values(): native.Array<com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility>;
						public isVisible(param0: java.lang.reflect.Member): boolean;
						public static valueOf(param0: string): com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonBackReference {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonBackReference>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonBackReference interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonClassDescription {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonClassDescription>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonClassDescription interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonCreator {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonCreator>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonCreator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						mode(): com.fasterxml.jackson.annotation.JsonCreator.Mode;
					});
					public constructor();
					public mode(): com.fasterxml.jackson.annotation.JsonCreator.Mode;
				}
				export namespace JsonCreator {
					export class Mode {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonCreator.Mode>;
						public static DEFAULT: com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public static DELEGATING: com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public static PROPERTIES: com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public static DISABLED: com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public static valueOf(param0: string): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public static values(): native.Array<com.fasterxml.jackson.annotation.JsonCreator.Mode>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonFilter {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonFilter>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonFilter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonFormat {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonFormat>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonFormat interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						pattern(): string;
						shape(): com.fasterxml.jackson.annotation.JsonFormat.Shape;
						locale(): string;
						timezone(): string;
						with(): native.Array<com.fasterxml.jackson.annotation.JsonFormat.Feature>;
						without(): native.Array<com.fasterxml.jackson.annotation.JsonFormat.Feature>;
					});
					public constructor();
					public static DEFAULT_TIMEZONE: string;
					public static DEFAULT_LOCALE: string;
					public timezone(): string;
					public pattern(): string;
					public with(): native.Array<com.fasterxml.jackson.annotation.JsonFormat.Feature>;
					public locale(): string;
					public shape(): com.fasterxml.jackson.annotation.JsonFormat.Shape;
					public without(): native.Array<com.fasterxml.jackson.annotation.JsonFormat.Feature>;
				}
				export namespace JsonFormat {
					export class Feature {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonFormat.Feature>;
						public static ACCEPT_SINGLE_VALUE_AS_ARRAY: com.fasterxml.jackson.annotation.JsonFormat.Feature;
						public static WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS: com.fasterxml.jackson.annotation.JsonFormat.Feature;
						public static WRITE_DATES_WITH_ZONE_ID: com.fasterxml.jackson.annotation.JsonFormat.Feature;
						public static WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED: com.fasterxml.jackson.annotation.JsonFormat.Feature;
						public static WRITE_SORTED_MAP_ENTRIES: com.fasterxml.jackson.annotation.JsonFormat.Feature;
						public static values(): native.Array<com.fasterxml.jackson.annotation.JsonFormat.Feature>;
						public static valueOf(param0: string): com.fasterxml.jackson.annotation.JsonFormat.Feature;
					}
					export class Features {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonFormat.Features>;
						public withOverrides(param0: com.fasterxml.jackson.annotation.JsonFormat.Features): com.fasterxml.jackson.annotation.JsonFormat.Features;
						public with(param0: native.Array<com.fasterxml.jackson.annotation.JsonFormat.Feature>): com.fasterxml.jackson.annotation.JsonFormat.Features;
						public static empty(): com.fasterxml.jackson.annotation.JsonFormat.Features;
						public without(param0: native.Array<com.fasterxml.jackson.annotation.JsonFormat.Feature>): com.fasterxml.jackson.annotation.JsonFormat.Features;
						public static construct(param0: native.Array<com.fasterxml.jackson.annotation.JsonFormat.Feature>, param1: native.Array<com.fasterxml.jackson.annotation.JsonFormat.Feature>): com.fasterxml.jackson.annotation.JsonFormat.Features;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public get(param0: com.fasterxml.jackson.annotation.JsonFormat.Feature): java.lang.Boolean;
						public static construct(param0: com.fasterxml.jackson.annotation.JsonFormat): com.fasterxml.jackson.annotation.JsonFormat.Features;
					}
					export class Shape {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonFormat.Shape>;
						public static ANY: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public static SCALAR: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public static ARRAY: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public static OBJECT: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public static NUMBER: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public static NUMBER_FLOAT: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public static NUMBER_INT: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public static STRING: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public static BOOLEAN: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public isNumeric(): boolean;
						public isStructured(): boolean;
						public static valueOf(param0: string): com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public static values(): native.Array<com.fasterxml.jackson.annotation.JsonFormat.Shape>;
					}
					export class Value extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonFormat.Value>;
						public getLocale(): java.util.Locale;
						public withLocale(param0: java.util.Locale): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public hasLocale(): boolean;
						public constructor(param0: string, param1: com.fasterxml.jackson.annotation.JsonFormat.Shape, param2: java.util.Locale, param3: string, param4: java.util.TimeZone, param5: com.fasterxml.jackson.annotation.JsonFormat.Features);
						public withoutFeature(param0: com.fasterxml.jackson.annotation.JsonFormat.Feature): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(param0: string, param1: com.fasterxml.jackson.annotation.JsonFormat.Shape, param2: java.util.Locale, param3: java.util.TimeZone);
						public withFeature(param0: com.fasterxml.jackson.annotation.JsonFormat.Feature): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getFeature(param0: com.fasterxml.jackson.annotation.JsonFormat.Feature): java.lang.Boolean;
						public constructor(param0: com.fasterxml.jackson.annotation.JsonFormat);
						public withOverrides(param0: com.fasterxml.jackson.annotation.JsonFormat.Value): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public hasTimeZone(): boolean;
						public getPattern(): string;
						public withTimeZone(param0: java.util.TimeZone): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor();
						public timeZoneAsString(): string;
						public constructor(param0: string, param1: com.fasterxml.jackson.annotation.JsonFormat.Shape, param2: java.util.Locale, param3: java.util.TimeZone, param4: com.fasterxml.jackson.annotation.JsonFormat.Features);
						public static from(param0: com.fasterxml.jackson.annotation.JsonFormat): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public hasShape(): boolean;
						public static empty(): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public withShape(param0: com.fasterxml.jackson.annotation.JsonFormat.Shape): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(param0: string, param1: com.fasterxml.jackson.annotation.JsonFormat.Shape, param2: string, param3: string);
						public static forPattern(param0: string): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public toString(): string;
						public valueFor(): java.lang.Class<any>;
						public constructor(param0: string, param1: com.fasterxml.jackson.annotation.JsonFormat.Shape, param2: string, param3: string, param4: com.fasterxml.jackson.annotation.JsonFormat.Features);
						public withPattern(param0: string): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getTimeZone(): java.util.TimeZone;
						public constructor(param0: string, param1: com.fasterxml.jackson.annotation.JsonFormat.Shape, param2: java.util.Locale, param3: string, param4: java.util.TimeZone);
						public hasPattern(): boolean;
						public valueFor(): java.lang.Class<com.fasterxml.jackson.annotation.JsonFormat>;
						public static forShape(param0: com.fasterxml.jackson.annotation.JsonFormat.Shape): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getShape(): com.fasterxml.jackson.annotation.JsonFormat.Shape;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonGetter {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonGetter>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonGetter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonIdentityInfo {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonIdentityInfo>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonIdentityInfo interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						property(): string;
						generator(): java.lang.Class<any>;
						resolver(): java.lang.Class<any>;
						scope(): java.lang.Class<any>;
					});
					public constructor();
					public generator(): java.lang.Class<any>;
					public resolver(): java.lang.Class<any>;
					public property(): string;
					public scope(): java.lang.Class<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonIdentityReference {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonIdentityReference>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonIdentityReference interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						alwaysAsId(): boolean;
					});
					public constructor();
					public alwaysAsId(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonIgnore {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonIgnore>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonIgnore interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): boolean;
					});
					public constructor();
					public value(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonIgnoreProperties {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonIgnoreProperties>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonIgnoreProperties interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): native.Array<string>;
						ignoreUnknown(): boolean;
						allowGetters(): boolean;
						allowSetters(): boolean;
					});
					public constructor();
					public value(): native.Array<string>;
					public ignoreUnknown(): boolean;
					public allowSetters(): boolean;
					public allowGetters(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonIgnoreType {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonIgnoreType>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonIgnoreType interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): boolean;
					});
					public constructor();
					public value(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonInclude {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonInclude>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonInclude interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): com.fasterxml.jackson.annotation.JsonInclude.Include;
						content(): com.fasterxml.jackson.annotation.JsonInclude.Include;
					});
					public constructor();
					public content(): com.fasterxml.jackson.annotation.JsonInclude.Include;
					public value(): com.fasterxml.jackson.annotation.JsonInclude.Include;
				}
				export namespace JsonInclude {
					export class Include {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonInclude.Include>;
						public static ALWAYS: com.fasterxml.jackson.annotation.JsonInclude.Include;
						public static NON_NULL: com.fasterxml.jackson.annotation.JsonInclude.Include;
						public static NON_ABSENT: com.fasterxml.jackson.annotation.JsonInclude.Include;
						public static NON_EMPTY: com.fasterxml.jackson.annotation.JsonInclude.Include;
						public static NON_DEFAULT: com.fasterxml.jackson.annotation.JsonInclude.Include;
						public static USE_DEFAULTS: com.fasterxml.jackson.annotation.JsonInclude.Include;
						public static values(): native.Array<com.fasterxml.jackson.annotation.JsonInclude.Include>;
						public static valueOf(param0: string): com.fasterxml.jackson.annotation.JsonInclude.Include;
					}
					export class Value extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonInclude.Value>;
						public static EMPTY: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public _valueInclusion: com.fasterxml.jackson.annotation.JsonInclude.Include;
						public _contentInclusion: com.fasterxml.jackson.annotation.JsonInclude.Include;
						public static construct(param0: com.fasterxml.jackson.annotation.JsonInclude.Include, param1: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public withContentInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public withValueInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public static empty(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public readResolve(): any;
						public toString(): string;
						public valueFor(): java.lang.Class<any>;
						public constructor(param0: com.fasterxml.jackson.annotation.JsonInclude.Include, param1: com.fasterxml.jackson.annotation.JsonInclude.Include);
						public getContentInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Include;
						public withOverrides(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public constructor(param0: com.fasterxml.jackson.annotation.JsonInclude);
						public static from(param0: com.fasterxml.jackson.annotation.JsonInclude): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getValueInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Include;
						public valueFor(): java.lang.Class<com.fasterxml.jackson.annotation.JsonInclude>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonManagedReference {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonManagedReference>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonManagedReference interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonProperty {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonProperty>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonProperty interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
						required(): boolean;
						index(): number;
						defaultValue(): string;
						access(): com.fasterxml.jackson.annotation.JsonProperty.Access;
					});
					public constructor();
					public static USE_DEFAULT_NAME: string;
					public static INDEX_UNKNOWN: number;
					public index(): number;
					public value(): string;
					public defaultValue(): string;
					public access(): com.fasterxml.jackson.annotation.JsonProperty.Access;
					public required(): boolean;
				}
				export namespace JsonProperty {
					export class Access {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonProperty.Access>;
						public static AUTO: com.fasterxml.jackson.annotation.JsonProperty.Access;
						public static READ_ONLY: com.fasterxml.jackson.annotation.JsonProperty.Access;
						public static WRITE_ONLY: com.fasterxml.jackson.annotation.JsonProperty.Access;
						public static READ_WRITE: com.fasterxml.jackson.annotation.JsonProperty.Access;
						public static valueOf(param0: string): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public static values(): native.Array<com.fasterxml.jackson.annotation.JsonProperty.Access>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonPropertyDescription {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonPropertyDescription>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonPropertyDescription interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonPropertyOrder {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonPropertyOrder>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonPropertyOrder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): native.Array<string>;
						alphabetic(): boolean;
					});
					public constructor();
					public alphabetic(): boolean;
					public value(): native.Array<string>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonRawValue {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonRawValue>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonRawValue interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): boolean;
					});
					public constructor();
					public value(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonRootName {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonRootName>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonRootName interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
						namespace(): string;
					});
					public constructor();
					public namespace(): string;
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonSetter {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonSetter>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonSetter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonSubTypes {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonSubTypes>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonSubTypes interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): native.Array<com.fasterxml.jackson.annotation.JsonSubTypes.Type>;
					});
					public constructor();
					public value(): native.Array<com.fasterxml.jackson.annotation.JsonSubTypes.Type>;
				}
				export namespace JsonSubTypes {
					export class Type {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonSubTypes.Type>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonSubTypes$Type interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): java.lang.Class<any>;
							name(): string;
						});
						public constructor();
						public value(): java.lang.Class<any>;
						public name(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonTypeId {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonTypeId>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonTypeId interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonTypeInfo {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonTypeInfo>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonTypeInfo interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						use(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						include(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						property(): string;
						defaultImpl(): java.lang.Class<any>;
						visible(): boolean;
					});
					public constructor();
					public include(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
					public defaultImpl(): java.lang.Class<any>;
					public use(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
					public visible(): boolean;
					public property(): string;
				}
				export namespace JsonTypeInfo {
					export class As {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonTypeInfo.As>;
						public static PROPERTY: com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						public static WRAPPER_OBJECT: com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						public static WRAPPER_ARRAY: com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						public static EXTERNAL_PROPERTY: com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						public static EXISTING_PROPERTY: com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						public static values(): native.Array<com.fasterxml.jackson.annotation.JsonTypeInfo.As>;
						public static valueOf(param0: string): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
					}
					export class Id {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonTypeInfo.Id>;
						public static NONE: com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						public static CLASS: com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						public static MINIMAL_CLASS: com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						public static NAME: com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						public static CUSTOM: com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						public static valueOf(param0: string): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						public getDefaultPropertyName(): string;
						public static values(): native.Array<com.fasterxml.jackson.annotation.JsonTypeInfo.Id>;
					}
					export abstract class None {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonTypeInfo.None>;
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonTypeName {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonTypeName>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonTypeName interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonUnwrapped {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonUnwrapped>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonUnwrapped interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						enabled(): boolean;
						prefix(): string;
						suffix(): string;
					});
					public constructor();
					public enabled(): boolean;
					public prefix(): string;
					public suffix(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonValue {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonValue>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonValue interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): boolean;
					});
					public constructor();
					public value(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class JsonView {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.JsonView>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.JsonView interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): native.Array<java.lang.Class<any>>;
					});
					public constructor();
					public value(): native.Array<java.lang.Class<any>>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export abstract class ObjectIdGenerator<T>  extends java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdGenerator<any>>;
					public isValidReferencePropertyName(param0: string, param1: any): boolean;
					public getScope(): java.lang.Class<any>;
					public maySerializeAsObject(): boolean;
					public forScope(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
					public constructor();
					public newForSerialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
					public key(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
					public canUseFor(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): boolean;
					public generateId(param0: any): any;
				}
				export namespace ObjectIdGenerator {
					export class IdKey {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey>;
						public type: java.lang.Class<any>;
						public scope: java.lang.Class<any>;
						public key: any;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public constructor(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: any);
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class ObjectIdGenerators {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdGenerators>;
					public constructor();
				}
				export namespace ObjectIdGenerators {
					export abstract class Base<T>  extends com.fasterxml.jackson.annotation.ObjectIdGenerator<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdGenerators.Base<any>>;
						public _scope: java.lang.Class<any>;
						public constructor();
						public canUseFor(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): boolean;
						public constructor(param0: java.lang.Class<any>);
						public getScope(): java.lang.Class<any>;
						public generateId(param0: any): any;
					}
					export class IntSequenceGenerator extends com.fasterxml.jackson.annotation.ObjectIdGenerators.Base<java.lang.Integer> {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdGenerators.IntSequenceGenerator>;
						public _nextValue: number;
						public newForSerialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<java.lang.Integer>;
						public forScope(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<java.lang.Integer>;
						public constructor();
						public constructor(param0: java.lang.Class<any>);
						public forScope(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
						public generateId(param0: any): any;
						public key(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
						public generateId(param0: any): java.lang.Integer;
						public initialValue(): number;
						public newForSerialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
						public constructor(param0: java.lang.Class<any>, param1: number);
					}
					export abstract class None extends com.fasterxml.jackson.annotation.ObjectIdGenerator<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdGenerators.None>;
						public constructor();
					}
					export abstract class PropertyGenerator extends com.fasterxml.jackson.annotation.ObjectIdGenerators.Base<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator>;
						public constructor();
						public constructor(param0: java.lang.Class<any>);
					}
					export class StringIdGenerator extends com.fasterxml.jackson.annotation.ObjectIdGenerators.Base<string> {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdGenerators.StringIdGenerator>;
						public forScope(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<string>;
						public constructor();
						public canUseFor(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): boolean;
						public constructor(param0: java.lang.Class<any>);
						public forScope(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
						public generateId(param0: any): any;
						public newForSerialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<string>;
						public key(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
						public newForSerialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
						public generateId(param0: any): string;
					}
					export class UUIDGenerator extends com.fasterxml.jackson.annotation.ObjectIdGenerators.Base<java.util.UUID> {
						public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdGenerators.UUIDGenerator>;
						public constructor();
						public canUseFor(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): boolean;
						public constructor(param0: java.lang.Class<any>);
						public forScope(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
						public newForSerialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<java.util.UUID>;
						public generateId(param0: any): any;
						public forScope(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<java.util.UUID>;
						public generateId(param0: any): java.util.UUID;
						public key(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
						public newForSerialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class ObjectIdResolver {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.ObjectIdResolver>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.annotation.ObjectIdResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						bindItem(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey, param1: any): void;
						resolveId(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey): any;
						newForDeserialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdResolver;
						canUseFor(param0: com.fasterxml.jackson.annotation.ObjectIdResolver): boolean;
					});
					public constructor();
					public resolveId(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey): any;
					public bindItem(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey, param1: any): void;
					public newForDeserialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdResolver;
					public canUseFor(param0: com.fasterxml.jackson.annotation.ObjectIdResolver): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class OptBoolean {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.OptBoolean>;
					public static TRUE: com.fasterxml.jackson.annotation.OptBoolean;
					public static FALSE: com.fasterxml.jackson.annotation.OptBoolean;
					public static DEFAULT: com.fasterxml.jackson.annotation.OptBoolean;
					public asBoolean(): java.lang.Boolean;
					public asPrimitive(): boolean;
					public static fromBoolean(param0: java.lang.Boolean): com.fasterxml.jackson.annotation.OptBoolean;
					public static values(): native.Array<com.fasterxml.jackson.annotation.OptBoolean>;
					public static valueOf(param0: string): com.fasterxml.jackson.annotation.OptBoolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class PropertyAccessor {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.PropertyAccessor>;
					public static GETTER: com.fasterxml.jackson.annotation.PropertyAccessor;
					public static SETTER: com.fasterxml.jackson.annotation.PropertyAccessor;
					public static CREATOR: com.fasterxml.jackson.annotation.PropertyAccessor;
					public static FIELD: com.fasterxml.jackson.annotation.PropertyAccessor;
					public static IS_GETTER: com.fasterxml.jackson.annotation.PropertyAccessor;
					public static NONE: com.fasterxml.jackson.annotation.PropertyAccessor;
					public static ALL: com.fasterxml.jackson.annotation.PropertyAccessor;
					public creatorEnabled(): boolean;
					public static values(): native.Array<com.fasterxml.jackson.annotation.PropertyAccessor>;
					public fieldEnabled(): boolean;
					public setterEnabled(): boolean;
					public static valueOf(param0: string): com.fasterxml.jackson.annotation.PropertyAccessor;
					public getterEnabled(): boolean;
					public isGetterEnabled(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace annotation {
				export class SimpleObjectIdResolver extends com.fasterxml.jackson.annotation.ObjectIdResolver {
					public static class: java.lang.Class<com.fasterxml.jackson.annotation.SimpleObjectIdResolver>;
					public _items: java.util.Map<com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey,any>;
					public resolveId(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey): any;
					public constructor();
					public bindItem(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey, param1: any): void;
					public newForDeserialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdResolver;
					public canUseFor(param0: com.fasterxml.jackson.annotation.ObjectIdResolver): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class Base64Variant {
					public static class: java.lang.Class<com.fasterxml.jackson.core.Base64Variant>;
					public static BASE64_VALUE_INVALID: number;
					public static BASE64_VALUE_PADDING: number;
					public _name: string;
					public _usesPadding: boolean;
					public _paddingChar: string;
					public _maxLineLength: number;
					public decodeBase64Byte(param0: number): number;
					public constructor(param0: string, param1: string, param2: boolean, param3: string, param4: number);
					public encodeBase64Partial(param0: number, param1: number, param2: native.Array<number>, param3: number): number;
					public encode(param0: native.Array<number>): string;
					public encodeBase64Partial(param0: java.lang.StringBuilder, param1: number, param2: number): void;
					public decode(param0: string, param1: com.fasterxml.jackson.core.util.ByteArrayBuilder): void;
					public decodeBase64Char(param0: number): number;
					public encode(param0: native.Array<number>, param1: boolean): string;
					public encodeBase64Chunk(param0: java.lang.StringBuilder, param1: number): void;
					public decodeBase64Char(param0: string): number;
					public usesPaddingChar(param0: number): boolean;
					public toString(): string;
					public _reportInvalidBase64(param0: string, param1: number, param2: string): void;
					public readResolve(): any;
					public _reportBase64EOF(): void;
					public hashCode(): number;
					public constructor(param0: com.fasterxml.jackson.core.Base64Variant, param1: string, param2: boolean, param3: string, param4: number);
					public usesPaddingChar(param0: string): boolean;
					public encodeBase64Chunk(param0: number, param1: native.Array<number>, param2: number): number;
					public getPaddingByte(): number;
					public encodeBase64Partial(param0: number, param1: number, param2: native.Array<string>, param3: number): number;
					public equals(param0: any): boolean;
					public encodeBase64BitsAsByte(param0: number): number;
					public constructor(param0: com.fasterxml.jackson.core.Base64Variant, param1: string, param2: number);
					public getName(): string;
					public getPaddingChar(): string;
					public encodeBase64BitsAsChar(param0: number): string;
					public decode(param0: string): native.Array<number>;
					public getMaxLineLength(): number;
					public encodeBase64Chunk(param0: number, param1: native.Array<string>, param2: number): number;
					public usesPadding(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class Base64Variants {
					public static class: java.lang.Class<com.fasterxml.jackson.core.Base64Variants>;
					public static MIME: com.fasterxml.jackson.core.Base64Variant;
					public static MIME_NO_LINEFEEDS: com.fasterxml.jackson.core.Base64Variant;
					public static PEM: com.fasterxml.jackson.core.Base64Variant;
					public static MODIFIED_FOR_URL: com.fasterxml.jackson.core.Base64Variant;
					public static valueOf(param0: string): com.fasterxml.jackson.core.Base64Variant;
					public static getDefaultVariant(): com.fasterxml.jackson.core.Base64Variant;
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class FormatFeature {
					public static class: java.lang.Class<com.fasterxml.jackson.core.FormatFeature>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.core.FormatFeature interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						enabledByDefault(): boolean;
						getMask(): number;
						enabledIn(param0: number): boolean;
					});
					public constructor();
					public enabledIn(param0: number): boolean;
					public getMask(): number;
					public enabledByDefault(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class FormatSchema {
					public static class: java.lang.Class<com.fasterxml.jackson.core.FormatSchema>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.core.FormatSchema interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getSchemaType(): string;
					});
					public constructor();
					public getSchemaType(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class JsonEncoding {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonEncoding>;
					public static UTF8: com.fasterxml.jackson.core.JsonEncoding;
					public static UTF16_BE: com.fasterxml.jackson.core.JsonEncoding;
					public static UTF16_LE: com.fasterxml.jackson.core.JsonEncoding;
					public static UTF32_BE: com.fasterxml.jackson.core.JsonEncoding;
					public static UTF32_LE: com.fasterxml.jackson.core.JsonEncoding;
					public _javaName: string;
					public _bigEndian: boolean;
					public _bits: number;
					public getJavaName(): string;
					public isBigEndian(): boolean;
					public static values(): native.Array<com.fasterxml.jackson.core.JsonEncoding>;
					public static valueOf(param0: string): com.fasterxml.jackson.core.JsonEncoding;
					public bits(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class JsonFactory extends com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonFactory>;
					public static FORMAT_NAME_JSON: string;
					public static DEFAULT_FACTORY_FEATURE_FLAGS: number;
					public static DEFAULT_PARSER_FEATURE_FLAGS: number;
					public static DEFAULT_GENERATOR_FEATURE_FLAGS: number;
					public static _recyclerRef: java.lang.ThreadLocal<java.lang.ref.SoftReference<com.fasterxml.jackson.core.util.BufferRecycler>>;
					public _rootCharSymbols: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
					public _byteSymbolCanonicalizer: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
					public _objectCodec: com.fasterxml.jackson.core.ObjectCodec;
					public _factoryFeatures: number;
					public _parserFeatures: number;
					public _generatorFeatures: number;
					public _characterEscapes: com.fasterxml.jackson.core.io.CharacterEscapes;
					public _inputDecorator: com.fasterxml.jackson.core.io.InputDecorator;
					public _outputDecorator: com.fasterxml.jackson.core.io.OutputDecorator;
					public _rootValueSeparator: com.fasterxml.jackson.core.SerializableString;
					public _optimizedStreamFromURL(param0: java.net.URL): java.io.InputStream;
					public getRootValueSeparator(): string;
					public createJsonParser(param0: java.net.URL): com.fasterxml.jackson.core.JsonParser;
					public createGenerator(param0: java.io.OutputStream): com.fasterxml.jackson.core.JsonGenerator;
					public enable(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.core.JsonFactory;
					public createParser(param0: native.Array<number>): com.fasterxml.jackson.core.JsonParser;
					public createParser(param0: string): com.fasterxml.jackson.core.JsonParser;
					public configure(param0: com.fasterxml.jackson.core.JsonFactory.Feature, param1: boolean): com.fasterxml.jackson.core.JsonFactory;
					public createParser(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.core.JsonParser;
					public setOutputDecorator(param0: com.fasterxml.jackson.core.io.OutputDecorator): com.fasterxml.jackson.core.JsonFactory;
					public configure(param0: com.fasterxml.jackson.core.JsonParser.Feature, param1: boolean): com.fasterxml.jackson.core.JsonFactory;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
					public getFormatReadFeatureType(): java.lang.Class<any>;
					public enable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonFactory;
					public createParser(param0: java.io.File): com.fasterxml.jackson.core.JsonParser;
					public createJsonGenerator(param0: java.io.Writer): com.fasterxml.jackson.core.JsonGenerator;
					public constructor();
					public _decorate(param0: java.io.InputStream, param1: com.fasterxml.jackson.core.io.IOContext): java.io.InputStream;
					public readResolve(): any;
					public hasJSONFormat(param0: com.fasterxml.jackson.core.format.InputAccessor): com.fasterxml.jackson.core.format.MatchStrength;
					public createParser(param0: java.net.URL): com.fasterxml.jackson.core.JsonParser;
					public createJsonParser(param0: java.io.InputStream): com.fasterxml.jackson.core.JsonParser;
					public _createUTF8Generator(param0: java.io.OutputStream, param1: com.fasterxml.jackson.core.io.IOContext): com.fasterxml.jackson.core.JsonGenerator;
					public createGenerator(param0: java.io.Writer): com.fasterxml.jackson.core.JsonGenerator;
					public requiresCustomCodec(): boolean;
					public requiresPropertyOrdering(): boolean;
					public getInputDecorator(): com.fasterxml.jackson.core.io.InputDecorator;
					public version(): com.fasterxml.jackson.core.Version;
					public hasFormat(param0: com.fasterxml.jackson.core.format.InputAccessor): com.fasterxml.jackson.core.format.MatchStrength;
					public _createParser(param0: java.io.Reader, param1: com.fasterxml.jackson.core.io.IOContext): com.fasterxml.jackson.core.JsonParser;
					public getFormatWriteFeatureType(): java.lang.Class<any>;
					public copy(): com.fasterxml.jackson.core.JsonFactory;
					public _checkInvalidCopy(param0: java.lang.Class<any>): void;
					public createJsonParser(param0: string): com.fasterxml.jackson.core.JsonParser;
					public _createWriter(param0: java.io.OutputStream, param1: com.fasterxml.jackson.core.JsonEncoding, param2: com.fasterxml.jackson.core.io.IOContext): java.io.Writer;
					public getFormatName(): string;
					public setInputDecorator(param0: com.fasterxml.jackson.core.io.InputDecorator): com.fasterxml.jackson.core.JsonFactory;
					public _createContext(param0: any, param1: boolean): com.fasterxml.jackson.core.io.IOContext;
					public createParser(param0: native.Array<string>, param1: number, param2: number): com.fasterxml.jackson.core.JsonParser;
					public disable(param0: com.fasterxml.jackson.core.JsonFactory.Feature): com.fasterxml.jackson.core.JsonFactory;
					public createParser(param0: java.io.InputStream): com.fasterxml.jackson.core.JsonParser;
					public _decorate(param0: java.io.Writer, param1: com.fasterxml.jackson.core.io.IOContext): java.io.Writer;
					public createJsonParser(param0: java.io.Reader): com.fasterxml.jackson.core.JsonParser;
					public getOutputDecorator(): com.fasterxml.jackson.core.io.OutputDecorator;
					public createJsonGenerator(param0: java.io.OutputStream, param1: com.fasterxml.jackson.core.JsonEncoding): com.fasterxml.jackson.core.JsonGenerator;
					public createJsonParser(param0: java.io.File): com.fasterxml.jackson.core.JsonParser;
					public canUseCharArrays(): boolean;
					public disable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonFactory;
					public _createParser(param0: native.Array<string>, param1: number, param2: number, param3: com.fasterxml.jackson.core.io.IOContext, param4: boolean): com.fasterxml.jackson.core.JsonParser;
					public _decorate(param0: java.io.OutputStream, param1: com.fasterxml.jackson.core.io.IOContext): java.io.OutputStream;
					public createJsonGenerator(param0: java.io.OutputStream): com.fasterxml.jackson.core.JsonGenerator;
					public _decorate(param0: java.io.Reader, param1: com.fasterxml.jackson.core.io.IOContext): java.io.Reader;
					public enable(param0: com.fasterxml.jackson.core.JsonFactory.Feature): com.fasterxml.jackson.core.JsonFactory;
					public canHandleBinaryNatively(): boolean;
					public createParser(param0: native.Array<string>): com.fasterxml.jackson.core.JsonParser;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonFactory.Feature): boolean;
					public configure(param0: com.fasterxml.jackson.core.JsonGenerator.Feature, param1: boolean): com.fasterxml.jackson.core.JsonFactory;
					public disable(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.core.JsonFactory;
					public createJsonParser(param0: native.Array<number>): com.fasterxml.jackson.core.JsonParser;
					public _createParser(param0: java.io.InputStream, param1: com.fasterxml.jackson.core.io.IOContext): com.fasterxml.jackson.core.JsonParser;
					public canUseSchema(param0: com.fasterxml.jackson.core.FormatSchema): boolean;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
					public createGenerator(param0: java.io.File, param1: com.fasterxml.jackson.core.JsonEncoding): com.fasterxml.jackson.core.JsonGenerator;
					public setRootValueSeparator(param0: string): com.fasterxml.jackson.core.JsonFactory;
					public createParser(param0: java.io.Reader): com.fasterxml.jackson.core.JsonParser;
					public createJsonParser(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.core.JsonParser;
					public constructor(param0: com.fasterxml.jackson.core.ObjectCodec);
					public getCharacterEscapes(): com.fasterxml.jackson.core.io.CharacterEscapes;
					public constructor(param0: com.fasterxml.jackson.core.JsonFactory, param1: com.fasterxml.jackson.core.ObjectCodec);
					public _createParser(param0: native.Array<number>, param1: number, param2: number, param3: com.fasterxml.jackson.core.io.IOContext): com.fasterxml.jackson.core.JsonParser;
					public createGenerator(param0: java.io.OutputStream, param1: com.fasterxml.jackson.core.JsonEncoding): com.fasterxml.jackson.core.JsonGenerator;
					public _getBufferRecycler(): com.fasterxml.jackson.core.util.BufferRecycler;
					public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
					public _createGenerator(param0: java.io.Writer, param1: com.fasterxml.jackson.core.io.IOContext): com.fasterxml.jackson.core.JsonGenerator;
					public setCharacterEscapes(param0: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.core.JsonFactory;
					public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonFactory;
				}
				export namespace JsonFactory {
					export class Feature {
						public static class: java.lang.Class<com.fasterxml.jackson.core.JsonFactory.Feature>;
						public static INTERN_FIELD_NAMES: com.fasterxml.jackson.core.JsonFactory.Feature;
						public static CANONICALIZE_FIELD_NAMES: com.fasterxml.jackson.core.JsonFactory.Feature;
						public static FAIL_ON_SYMBOL_HASH_OVERFLOW: com.fasterxml.jackson.core.JsonFactory.Feature;
						public static USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING: com.fasterxml.jackson.core.JsonFactory.Feature;
						public static valueOf(param0: string): com.fasterxml.jackson.core.JsonFactory.Feature;
						public getMask(): number;
						public static values(): native.Array<com.fasterxml.jackson.core.JsonFactory.Feature>;
						public enabledIn(param0: number): boolean;
						public static collectDefaults(): number;
						public enabledByDefault(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class JsonGenerationException extends com.fasterxml.jackson.core.JsonProcessingException {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonGenerationException>;
					public _processor: com.fasterxml.jackson.core.JsonGenerator;
					public getProcessor(): any;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonGenerator);
					public withGenerator(param0: com.fasterxml.jackson.core.JsonGenerator): com.fasterxml.jackson.core.JsonGenerationException;
					public constructor(param0: string);
					public constructor(param0: java.lang.Throwable);
					public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation);
					public constructor(param0: java.lang.Throwable, param1: com.fasterxml.jackson.core.JsonGenerator);
					public constructor(param0: string, param1: java.lang.Throwable, param2: com.fasterxml.jackson.core.JsonGenerator);
					public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Throwable);
					public getProcessor(): com.fasterxml.jackson.core.JsonGenerator;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export abstract class JsonGenerator extends com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonGenerator>;
					public _cfgPrettyPrinter: com.fasterxml.jackson.core.PrettyPrinter;
					public writeObjectRef(param0: any): void;
					public writeRaw(param0: com.fasterxml.jackson.core.SerializableString): void;
					public writeFieldName(param0: com.fasterxml.jackson.core.SerializableString): void;
					public getFeatureMask(): number;
					public writeObjectField(param0: string, param1: any): void;
					public writeString(param0: string): void;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
					public writeRaw(param0: string): void;
					public canWriteTypeId(): boolean;
					public constructor();
					public close(): void;
					public writeEndArray(): void;
					public writeBinaryField(param0: string, param1: native.Array<number>): void;
					public writeTypeId(param0: any): void;
					public writeNumberField(param0: string, param1: java.math.BigDecimal): void;
					public _reportError(param0: string): void;
					public setFeatureMask(param0: number): com.fasterxml.jackson.core.JsonGenerator;
					public writeNumber(param0: java.math.BigDecimal): void;
					public getOutputTarget(): any;
					public writeStartArray(): void;
					public writeFieldName(param0: string): void;
					public writeNumber(param0: java.math.BigInteger): void;
					public writeObject(param0: any): void;
					public overrideFormatFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonGenerator;
					public writeNumber(param0: number): void;
					public flush(): void;
					public writeRaw(param0: native.Array<string>, param1: number, param2: number): void;
					public writeRawValue(param0: string, param1: number, param2: number): void;
					public writeObjectFieldStart(param0: string): void;
					public writeTree(param0: com.fasterxml.jackson.core.TreeNode): void;
					public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonGenerator;
					public writeBoolean(param0: boolean): void;
					public version(): com.fasterxml.jackson.core.Version;
					public copyCurrentEvent(param0: com.fasterxml.jackson.core.JsonParser): void;
					public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: native.Array<number>, param2: number, param3: number): void;
					public canOmitFields(): boolean;
					public writeBooleanField(param0: string, param1: boolean): void;
					public writeNullField(param0: string): void;
					public setPrettyPrinter(param0: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.core.JsonGenerator;
					public isClosed(): boolean;
					public getPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
					public getOutputBuffered(): number;
					public writeNumber(param0: string): void;
					public writeRawValue(param0: native.Array<string>, param1: number, param2: number): void;
					public writeString(param0: native.Array<string>, param1: number, param2: number): void;
					public writeString(param0: com.fasterxml.jackson.core.SerializableString): void;
					public canWriteObjectId(): boolean;
					public useDefaultPrettyPrinter(): com.fasterxml.jackson.core.JsonGenerator;
					public _writeSimpleObject(param0: any): void;
					public setRootValueSeparator(param0: com.fasterxml.jackson.core.SerializableString): com.fasterxml.jackson.core.JsonGenerator;
					public writeBinary(param0: native.Array<number>): void;
					public writeObjectId(param0: any): void;
					public writeBinary(param0: java.io.InputStream, param1: number): number;
					public writeNull(): void;
					public setCurrentValue(param0: any): void;
					public writeStartArray(param0: number): void;
					public writeStartObject(): void;
					public disable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
					public writeRawValue(param0: string): void;
					public writeRawValue(param0: com.fasterxml.jackson.core.SerializableString): void;
					public _throwInternal(): void;
					public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: number): number;
					public getFormatFeatures(): number;
					public getSchema(): com.fasterxml.jackson.core.FormatSchema;
					public setHighestNonEscapedChar(param0: number): com.fasterxml.jackson.core.JsonGenerator;
					public writeNumberField(param0: string, param1: number): void;
					public setSchema(param0: com.fasterxml.jackson.core.FormatSchema): void;
					public overrideStdFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonGenerator;
					public _reportUnsupportedOperation(): void;
					public canWriteBinaryNatively(): boolean;
					public writeRaw(param0: string, param1: number, param2: number): void;
					public writeEndObject(): void;
					public writeArrayFieldStart(param0: string): void;
					public configure(param0: com.fasterxml.jackson.core.JsonGenerator.Feature, param1: boolean): com.fasterxml.jackson.core.JsonGenerator;
					public canUseSchema(param0: com.fasterxml.jackson.core.FormatSchema): boolean;
					public writeUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
					public writeRawUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
					public getCurrentValue(): any;
					public getCharacterEscapes(): com.fasterxml.jackson.core.io.CharacterEscapes;
					public enable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
					public getHighestEscapedChar(): number;
					public writeBinary(param0: native.Array<number>, param1: number, param2: number): void;
					public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
					public getOutputContext(): com.fasterxml.jackson.core.JsonStreamContext;
					public setCharacterEscapes(param0: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.core.JsonGenerator;
					public writeStringField(param0: string, param1: string): void;
					public writeOmittedField(param0: string): void;
					public copyCurrentStructure(param0: com.fasterxml.jackson.core.JsonParser): void;
				}
				export namespace JsonGenerator {
					export class Feature {
						public static class: java.lang.Class<com.fasterxml.jackson.core.JsonGenerator.Feature>;
						public static AUTO_CLOSE_TARGET: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public static AUTO_CLOSE_JSON_CONTENT: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public static FLUSH_PASSED_TO_STREAM: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public static QUOTE_FIELD_NAMES: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public static QUOTE_NON_NUMERIC_NUMBERS: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public static WRITE_NUMBERS_AS_STRINGS: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public static WRITE_BIGDECIMAL_AS_PLAIN: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public static ESCAPE_NON_ASCII: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public static STRICT_DUPLICATE_DETECTION: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public static IGNORE_UNKNOWN: com.fasterxml.jackson.core.JsonGenerator.Feature;
						public getMask(): number;
						public static values(): native.Array<com.fasterxml.jackson.core.JsonGenerator.Feature>;
						public static valueOf(param0: string): com.fasterxml.jackson.core.JsonGenerator.Feature;
						public enabledIn(param0: number): boolean;
						public static collectDefaults(): number;
						public enabledByDefault(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class JsonLocation {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonLocation>;
					public static NA: com.fasterxml.jackson.core.JsonLocation;
					public constructor(param0: any, param1: number, param2: number, param3: number, param4: number);
					public getColumnNr(): number;
					public equals(param0: any): boolean;
					public toString(): string;
					public constructor(param0: any, param1: number, param2: number, param3: number);
					public getSourceRef(): any;
					public getLineNr(): number;
					public getCharOffset(): number;
					public getByteOffset(): number;
					public hashCode(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class JsonParseException extends com.fasterxml.jackson.core.JsonProcessingException {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonParseException>;
					public _processor: com.fasterxml.jackson.core.JsonParser;
					public getProcessor(): any;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string);
					public constructor(param0: java.lang.Throwable);
					public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation);
					public withParser(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.JsonParseException;
					public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string);
					public getProcessor(): com.fasterxml.jackson.core.JsonParser;
					public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: java.lang.Throwable);
					public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: com.fasterxml.jackson.core.JsonLocation);
					public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Throwable);
					public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: com.fasterxml.jackson.core.JsonLocation, param3: java.lang.Throwable);
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export abstract class JsonParser extends com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonParser>;
					public _features: number;
					public getCurrentToken(): com.fasterxml.jackson.core.JsonToken;
					public getValueAsString(): string;
					public enable(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.core.JsonParser;
					public hasTokenId(param0: number): boolean;
					public configure(param0: com.fasterxml.jackson.core.JsonParser.Feature, param1: boolean): com.fasterxml.jackson.core.JsonParser;
					public getValueAsInt(param0: number): number;
					public getValueAsDouble(param0: number): number;
					public nextIntValue(param0: number): number;
					public canReadObjectId(): boolean;
					public getFeatureMask(): number;
					public getBigIntegerValue(): java.math.BigInteger;
					public nextValue(): com.fasterxml.jackson.core.JsonToken;
					public getShortValue(): number;
					public getLongValue(): number;
					public constructor();
					public readValueAs(param0: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public close(): void;
					public disable(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.core.JsonParser;
					public getBinaryValue(): native.Array<number>;
					public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
					public getValueAsInt(): number;
					public readValuesAs(param0: com.fasterxml.jackson.core.type.TypeReference<any>): java.util.Iterator;
					public getCurrentTokenId(): number;
					public getText(): string;
					public isExpectedStartArrayToken(): boolean;
					public canReadTypeId(): boolean;
					public requiresCustomCodec(): boolean;
					public getValueAsLong(): number;
					public skipChildren(): com.fasterxml.jackson.core.JsonParser;
					public releaseBuffered(param0: java.io.OutputStream): number;
					public version(): com.fasterxml.jackson.core.Version;
					public getValueAsLong(param0: number): number;
					public readValueAsTree(): com.fasterxml.jackson.core.TreeNode;
					public isClosed(): boolean;
					public hasCurrentToken(): boolean;
					public getTextCharacters(): native.Array<string>;
					public getDoubleValue(): number;
					public readBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.OutputStream): number;
					public getIntValue(): number;
					public hasToken(param0: com.fasterxml.jackson.core.JsonToken): boolean;
					public overrideCurrentName(param0: string): void;
					public getNumberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
					public getInputSource(): any;
					public nextFieldName(param0: com.fasterxml.jackson.core.SerializableString): boolean;
					public hasTextCharacters(): boolean;
					public clearCurrentToken(): void;
					public setCurrentValue(param0: any): void;
					public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
					public getByteValue(): number;
					public getValueAsDouble(): number;
					public nextFieldName(): string;
					public overrideFormatFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonParser;
					public getLastClearedToken(): com.fasterxml.jackson.core.JsonToken;
					public getNumberValue(): java.lang.Number;
					public getSchema(): com.fasterxml.jackson.core.FormatSchema;
					public getFormatFeatures(): number;
					public getEmbeddedObject(): any;
					public constructor(param0: number);
					public setSchema(param0: com.fasterxml.jackson.core.FormatSchema): void;
					public getFloatValue(): number;
					public nextToken(): com.fasterxml.jackson.core.JsonToken;
					public getValueAsBoolean(param0: boolean): boolean;
					public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): void;
					public releaseBuffered(param0: java.io.Writer): number;
					public getBooleanValue(): boolean;
					public _reportUnsupportedOperation(): void;
					public getCurrentName(): string;
					public getValueAsBoolean(): boolean;
					public nextLongValue(param0: number): number;
					public getTextLength(): number;
					public readBinaryValue(param0: java.io.OutputStream): number;
					public nextTextValue(): string;
					public canUseSchema(param0: com.fasterxml.jackson.core.FormatSchema): boolean;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
					public getDecimalValue(): java.math.BigDecimal;
					public readValuesAs(param0: java.lang.Class): java.util.Iterator;
					public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
					public readValueAs(param0: java.lang.Class): any;
					public overrideStdFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonParser;
					public nextBooleanValue(): java.lang.Boolean;
					public getValueAsString(param0: string): string;
					public getCurrentValue(): any;
					public getTextOffset(): number;
					public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
					public setFeatureMask(param0: number): com.fasterxml.jackson.core.JsonParser;
					public getObjectId(): any;
					public getTypeId(): any;
					public isExpectedStartObjectToken(): boolean;
					public _constructError(param0: string): com.fasterxml.jackson.core.JsonParseException;
					public _codec(): com.fasterxml.jackson.core.ObjectCodec;
					public getParsingContext(): com.fasterxml.jackson.core.JsonStreamContext;
				}
				export namespace JsonParser {
					export class Feature {
						public static class: java.lang.Class<com.fasterxml.jackson.core.JsonParser.Feature>;
						public static AUTO_CLOSE_SOURCE: com.fasterxml.jackson.core.JsonParser.Feature;
						public static ALLOW_COMMENTS: com.fasterxml.jackson.core.JsonParser.Feature;
						public static ALLOW_YAML_COMMENTS: com.fasterxml.jackson.core.JsonParser.Feature;
						public static ALLOW_UNQUOTED_FIELD_NAMES: com.fasterxml.jackson.core.JsonParser.Feature;
						public static ALLOW_SINGLE_QUOTES: com.fasterxml.jackson.core.JsonParser.Feature;
						public static ALLOW_UNQUOTED_CONTROL_CHARS: com.fasterxml.jackson.core.JsonParser.Feature;
						public static ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER: com.fasterxml.jackson.core.JsonParser.Feature;
						public static ALLOW_NUMERIC_LEADING_ZEROS: com.fasterxml.jackson.core.JsonParser.Feature;
						public static ALLOW_NON_NUMERIC_NUMBERS: com.fasterxml.jackson.core.JsonParser.Feature;
						public static STRICT_DUPLICATE_DETECTION: com.fasterxml.jackson.core.JsonParser.Feature;
						public static IGNORE_UNDEFINED: com.fasterxml.jackson.core.JsonParser.Feature;
						public static valueOf(param0: string): com.fasterxml.jackson.core.JsonParser.Feature;
						public getMask(): number;
						public enabledIn(param0: number): boolean;
						public static collectDefaults(): number;
						public enabledByDefault(): boolean;
						public static values(): native.Array<com.fasterxml.jackson.core.JsonParser.Feature>;
					}
					export class NumberType {
						public static class: java.lang.Class<com.fasterxml.jackson.core.JsonParser.NumberType>;
						public static INT: com.fasterxml.jackson.core.JsonParser.NumberType;
						public static LONG: com.fasterxml.jackson.core.JsonParser.NumberType;
						public static BIG_INTEGER: com.fasterxml.jackson.core.JsonParser.NumberType;
						public static FLOAT: com.fasterxml.jackson.core.JsonParser.NumberType;
						public static DOUBLE: com.fasterxml.jackson.core.JsonParser.NumberType;
						public static BIG_DECIMAL: com.fasterxml.jackson.core.JsonParser.NumberType;
						public static valueOf(param0: string): com.fasterxml.jackson.core.JsonParser.NumberType;
						public static values(): native.Array<com.fasterxml.jackson.core.JsonParser.NumberType>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class JsonPointer {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonPointer>;
					public static EMPTY: com.fasterxml.jackson.core.JsonPointer;
					public _nextSegment: com.fasterxml.jackson.core.JsonPointer;
					public _head: com.fasterxml.jackson.core.JsonPointer;
					public _asString: string;
					public _matchingPropertyName: string;
					public _matchingElementIndex: number;
					public static _parseQuotedTail(param0: string, param1: number): com.fasterxml.jackson.core.JsonPointer;
					public tail(): com.fasterxml.jackson.core.JsonPointer;
					public constructor(param0: string, param1: string, param2: number, param3: com.fasterxml.jackson.core.JsonPointer);
					public append(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.JsonPointer;
					public toString(): string;
					public constructor();
					public mayMatchElement(): boolean;
					public matchProperty(param0: string): com.fasterxml.jackson.core.JsonPointer;
					public static _parseTail(param0: string): com.fasterxml.jackson.core.JsonPointer;
					public hashCode(): number;
					public mayMatchProperty(): boolean;
					public static valueOf(param0: string): com.fasterxml.jackson.core.JsonPointer;
					public getMatchingIndex(): number;
					public last(): com.fasterxml.jackson.core.JsonPointer;
					public constructor(param0: string, param1: string, param2: com.fasterxml.jackson.core.JsonPointer);
					public _constructHead(param0: number, param1: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.JsonPointer;
					public static compile(param0: string): com.fasterxml.jackson.core.JsonPointer;
					public head(): com.fasterxml.jackson.core.JsonPointer;
					public equals(param0: any): boolean;
					public matchesElement(param0: number): boolean;
					public matchElement(param0: number): com.fasterxml.jackson.core.JsonPointer;
					public _constructHead(): com.fasterxml.jackson.core.JsonPointer;
					public matches(): boolean;
					public matchesProperty(param0: string): boolean;
					public getMatchingProperty(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class JsonProcessingException {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonProcessingException>;
					public _location: com.fasterxml.jackson.core.JsonLocation;
					public getProcessor(): any;
					public toString(): string;
					public constructor(param0: string, param1: java.lang.Throwable);
					public getLocation(): com.fasterxml.jackson.core.JsonLocation;
					public constructor(param0: string);
					public constructor(param0: java.lang.Throwable);
					public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation);
					public getMessage(): string;
					public getMessageSuffix(): string;
					public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Throwable);
					public getOriginalMessage(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export abstract class JsonStreamContext {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonStreamContext>;
					public static TYPE_ROOT: number;
					public static TYPE_ARRAY: number;
					public static TYPE_OBJECT: number;
					public _type: number;
					public _index: number;
					public inObject(): boolean;
					public getTypeDesc(): string;
					public getCurrentValue(): any;
					public setCurrentValue(param0: any): void;
					public constructor();
					public getParent(): com.fasterxml.jackson.core.JsonStreamContext;
					public inArray(): boolean;
					public getCurrentName(): string;
					public getCurrentIndex(): number;
					public inRoot(): boolean;
					public getEntryCount(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class JsonToken {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonToken>;
					public static NOT_AVAILABLE: com.fasterxml.jackson.core.JsonToken;
					public static START_OBJECT: com.fasterxml.jackson.core.JsonToken;
					public static END_OBJECT: com.fasterxml.jackson.core.JsonToken;
					public static START_ARRAY: com.fasterxml.jackson.core.JsonToken;
					public static END_ARRAY: com.fasterxml.jackson.core.JsonToken;
					public static FIELD_NAME: com.fasterxml.jackson.core.JsonToken;
					public static VALUE_EMBEDDED_OBJECT: com.fasterxml.jackson.core.JsonToken;
					public static VALUE_STRING: com.fasterxml.jackson.core.JsonToken;
					public static VALUE_NUMBER_INT: com.fasterxml.jackson.core.JsonToken;
					public static VALUE_NUMBER_FLOAT: com.fasterxml.jackson.core.JsonToken;
					public static VALUE_TRUE: com.fasterxml.jackson.core.JsonToken;
					public static VALUE_FALSE: com.fasterxml.jackson.core.JsonToken;
					public static VALUE_NULL: com.fasterxml.jackson.core.JsonToken;
					public id(): number;
					public static valueOf(param0: string): com.fasterxml.jackson.core.JsonToken;
					public asCharArray(): native.Array<string>;
					public isBoolean(): boolean;
					public isStructStart(): boolean;
					public isStructEnd(): boolean;
					public isNumeric(): boolean;
					public static values(): native.Array<com.fasterxml.jackson.core.JsonToken>;
					public asByteArray(): native.Array<number>;
					public asString(): string;
					public isScalarValue(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class JsonTokenId {
					public static class: java.lang.Class<com.fasterxml.jackson.core.JsonTokenId>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.core.JsonTokenId interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
					public static ID_NOT_AVAILABLE: number;
					public static ID_FALSE: number;
					public static ID_TRUE: number;
					public static ID_FIELD_NAME: number;
					public static ID_START_ARRAY: number;
					public static ID_END_ARRAY: number;
					public static ID_END_OBJECT: number;
					public static ID_NULL: number;
					public static ID_NO_TOKEN: number;
					public static ID_NUMBER_FLOAT: number;
					public static ID_STRING: number;
					public static ID_EMBEDDED_OBJECT: number;
					public static ID_START_OBJECT: number;
					public static ID_NUMBER_INT: number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export abstract class ObjectCodec extends com.fasterxml.jackson.core.TreeCodec implements com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.core.ObjectCodec>;
					public writeTree(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.TreeNode): void;
					public readTree(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.TreeNode;
					public createArrayNode(): com.fasterxml.jackson.core.TreeNode;
					public treeToValue(param0: com.fasterxml.jackson.core.TreeNode, param1: java.lang.Class): any;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.ResolvedType): any;
					public treeAsTokens(param0: com.fasterxml.jackson.core.TreeNode): com.fasterxml.jackson.core.JsonParser;
					public getFactory(): com.fasterxml.jackson.core.JsonFactory;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.TypeReference<any>): java.util.Iterator;
					public createObjectNode(): com.fasterxml.jackson.core.TreeNode;
					public writeValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any): void;
					public constructor();
					public getJsonFactory(): com.fasterxml.jackson.core.JsonFactory;
					public version(): com.fasterxml.jackson.core.Version;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.ResolvedType): java.util.Iterator;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Class): java.util.Iterator;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Class): any;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class PrettyPrinter {
					public static class: java.lang.Class<com.fasterxml.jackson.core.PrettyPrinter>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.core.PrettyPrinter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						writeRootValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						writeStartObject(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						writeEndObject(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
						writeObjectEntrySeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						writeObjectFieldValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						writeStartArray(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						writeEndArray(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
						writeArrayValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						beforeArrayValues(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						beforeObjectEntries(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					});
					public constructor();
					public writeStartObject(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public beforeArrayValues(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public writeObjectEntrySeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public beforeObjectEntries(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public writeRootValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public writeStartArray(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public writeArrayValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public writeObjectFieldValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public writeEndArray(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
					public writeEndObject(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class SerializableString {
					public static class: java.lang.Class<com.fasterxml.jackson.core.SerializableString>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.core.SerializableString interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getValue(): string;
						charLength(): number;
						asQuotedChars(): native.Array<string>;
						asUnquotedUTF8(): native.Array<number>;
						asQuotedUTF8(): native.Array<number>;
						appendQuotedUTF8(param0: native.Array<number>, param1: number): number;
						appendQuoted(param0: native.Array<string>, param1: number): number;
						appendUnquotedUTF8(param0: native.Array<number>, param1: number): number;
						appendUnquoted(param0: native.Array<string>, param1: number): number;
						writeQuotedUTF8(param0: java.io.OutputStream): number;
						writeUnquotedUTF8(param0: java.io.OutputStream): number;
						putQuotedUTF8(param0: java.nio.ByteBuffer): number;
						putUnquotedUTF8(param0: java.nio.ByteBuffer): number;
					});
					public constructor();
					public appendQuoted(param0: native.Array<string>, param1: number): number;
					public asQuotedChars(): native.Array<string>;
					public writeQuotedUTF8(param0: java.io.OutputStream): number;
					public putUnquotedUTF8(param0: java.nio.ByteBuffer): number;
					public appendQuotedUTF8(param0: native.Array<number>, param1: number): number;
					public charLength(): number;
					public asQuotedUTF8(): native.Array<number>;
					public writeUnquotedUTF8(param0: java.io.OutputStream): number;
					public appendUnquoted(param0: native.Array<string>, param1: number): number;
					public getValue(): string;
					public appendUnquotedUTF8(param0: native.Array<number>, param1: number): number;
					public putQuotedUTF8(param0: java.nio.ByteBuffer): number;
					public asUnquotedUTF8(): native.Array<number>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export abstract class TreeCodec {
					public static class: java.lang.Class<com.fasterxml.jackson.core.TreeCodec>;
					public writeTree(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.TreeNode): void;
					public readTree(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.TreeNode;
					public createArrayNode(): com.fasterxml.jackson.core.TreeNode;
					public constructor();
					public treeAsTokens(param0: com.fasterxml.jackson.core.TreeNode): com.fasterxml.jackson.core.JsonParser;
					public createObjectNode(): com.fasterxml.jackson.core.TreeNode;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class TreeNode {
					public static class: java.lang.Class<com.fasterxml.jackson.core.TreeNode>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.core.TreeNode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						asToken(): com.fasterxml.jackson.core.JsonToken;
						numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						size(): number;
						isValueNode(): boolean;
						isContainerNode(): boolean;
						isMissingNode(): boolean;
						isArray(): boolean;
						isObject(): boolean;
						get(param0: string): com.fasterxml.jackson.core.TreeNode;
						get(param0: number): com.fasterxml.jackson.core.TreeNode;
						path(param0: string): com.fasterxml.jackson.core.TreeNode;
						path(param0: number): com.fasterxml.jackson.core.TreeNode;
						fieldNames(): java.util.Iterator<string>;
						at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						at(param0: string): com.fasterxml.jackson.core.TreeNode;
						traverse(): com.fasterxml.jackson.core.JsonParser;
						traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
					});
					public constructor();
					public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
					public isObject(): boolean;
					public isMissingNode(): boolean;
					public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
					public path(param0: number): com.fasterxml.jackson.core.TreeNode;
					public isArray(): boolean;
					public asToken(): com.fasterxml.jackson.core.JsonToken;
					public get(param0: number): com.fasterxml.jackson.core.TreeNode;
					public isValueNode(): boolean;
					public traverse(): com.fasterxml.jackson.core.JsonParser;
					public size(): number;
					public path(param0: string): com.fasterxml.jackson.core.TreeNode;
					public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
					public fieldNames(): java.util.Iterator<string>;
					public get(param0: string): com.fasterxml.jackson.core.TreeNode;
					public at(param0: string): com.fasterxml.jackson.core.TreeNode;
					public isContainerNode(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class Version extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.core.Version>;
					public _majorVersion: number;
					public _minorVersion: number;
					public _patchLevel: number;
					public _groupId: string;
					public _artifactId: string;
					public _snapshotInfo: string;
					public static unknownVersion(): com.fasterxml.jackson.core.Version;
					public constructor(param0: number, param1: number, param2: number, param3: string, param4: string, param5: string);
					public getGroupId(): string;
					public getMajorVersion(): number;
					public isUknownVersion(): boolean;
					public getPatchLevel(): number;
					public equals(param0: any): boolean;
					public isSnapshot(): boolean;
					public getArtifactId(): string;
					public getMinorVersion(): number;
					public toString(): string;
					public compareTo(param0: com.fasterxml.jackson.core.Version): number;
					public constructor(param0: number, param1: number, param2: number, param3: string);
					public isUnknownVersion(): boolean;
					public hashCode(): number;
					public toFullString(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export class Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.core.Versioned>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.core.Versioned interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						version(): com.fasterxml.jackson.core.Version;
					});
					public constructor();
					public version(): com.fasterxml.jackson.core.Version;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace base {
					export abstract class GeneratorBase extends com.fasterxml.jackson.core.JsonGenerator {
						public static class: java.lang.Class<com.fasterxml.jackson.core.base.GeneratorBase>;
						public static SURR1_FIRST: number;
						public static SURR1_LAST: number;
						public static SURR2_FIRST: number;
						public static SURR2_LAST: number;
						public static DERIVED_FEATURES_MASK: number;
						public WRITE_BINARY: string;
						public WRITE_BOOLEAN: string;
						public WRITE_NULL: string;
						public WRITE_NUMBER: string;
						public WRITE_RAW: string;
						public WRITE_STRING: string;
						public _objectCodec: com.fasterxml.jackson.core.ObjectCodec;
						public _features: number;
						public _cfgNumbersAsStrings: boolean;
						public _writeContext: com.fasterxml.jackson.core.json.JsonWriteContext;
						public _closed: boolean;
						public constructor(param0: number, param1: com.fasterxml.jackson.core.ObjectCodec);
						public writeString(param0: native.Array<string>, param1: number, param2: number): void;
						public writeFieldName(param0: com.fasterxml.jackson.core.SerializableString): void;
						public close(): void;
						public writeFieldName(param0: string): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: native.Array<number>, param2: number, param3: number): void;
						public _checkStdFeatureChanges(param0: number, param1: number): void;
						public writeRawValue(param0: native.Array<string>, param1: number, param2: number): void;
						public isClosed(): boolean;
						public disable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						public writeTree(param0: com.fasterxml.jackson.core.TreeNode): void;
						public writeBinary(param0: native.Array<number>): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: number): number;
						public setCurrentValue(param0: any): void;
						public setFeatureMask(param0: number): com.fasterxml.jackson.core.JsonGenerator;
						public writeObject(param0: any): void;
						public constructor();
						public overrideStdFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonGenerator;
						public writeRawValue(param0: string): void;
						public writeBinary(param0: java.io.InputStream, param1: number): number;
						public version(): com.fasterxml.jackson.core.Version;
						public getOutputContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public writeString(param0: com.fasterxml.jackson.core.SerializableString): void;
						public _constructDefaultPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
						public getOutputContext(): com.fasterxml.jackson.core.json.JsonWriteContext;
						public flush(): void;
						public writeRawValue(param0: com.fasterxml.jackson.core.SerializableString): void;
						public _verifyValueWrite(param0: string): void;
						public _decodeSurrogate(param0: number, param1: number): number;
						public getFeatureMask(): number;
						public _releaseBuffers(): void;
						public getCurrentValue(): any;
						public writeString(param0: string): void;
						public constructor(param0: number, param1: com.fasterxml.jackson.core.ObjectCodec, param2: com.fasterxml.jackson.core.json.JsonWriteContext);
						public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
						public writeBinary(param0: native.Array<number>, param1: number, param2: number): void;
						public enable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						public useDefaultPrettyPrinter(): com.fasterxml.jackson.core.JsonGenerator;
						public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonGenerator;
						public writeRawValue(param0: string, param1: number, param2: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace base {
					export abstract class ParserBase extends com.fasterxml.jackson.core.base.ParserMinimalBase {
						public static class: java.lang.Class<com.fasterxml.jackson.core.base.ParserBase>;
						public _ioContext: com.fasterxml.jackson.core.io.IOContext;
						public _closed: boolean;
						public _inputPtr: number;
						public _inputEnd: number;
						public _currInputProcessed: number;
						public _currInputRow: number;
						public _currInputRowStart: number;
						public _tokenInputTotal: number;
						public _tokenInputRow: number;
						public _tokenInputCol: number;
						public _parsingContext: com.fasterxml.jackson.core.json.JsonReadContext;
						public _nextToken: com.fasterxml.jackson.core.JsonToken;
						public _textBuffer: com.fasterxml.jackson.core.util.TextBuffer;
						public _nameCopyBuffer: native.Array<string>;
						public _nameCopied: boolean;
						public _byteArrayBuilder: com.fasterxml.jackson.core.util.ByteArrayBuilder;
						public _binaryValue: native.Array<number>;
						public static NR_UNKNOWN: number;
						public static NR_INT: number;
						public static NR_LONG: number;
						public static NR_BIGINT: number;
						public static NR_DOUBLE: number;
						public static NR_BIGDECIMAL: number;
						public static INT_0: number;
						public static INT_9: number;
						public static INT_MINUS: number;
						public static INT_PLUS: number;
						public static CHAR_NULL: string;
						public _numTypesValid: number;
						public _numberInt: number;
						public _numberLong: number;
						public _numberDouble: number;
						public _numberBigInt: java.math.BigInteger;
						public _numberBigDecimal: java.math.BigDecimal;
						public _numberNegative: boolean;
						public _intLength: number;
						public _fractLength: number;
						public _expLength: number;
						public getNumberValue(): java.lang.Number;
						public getBigIntegerValue(): java.math.BigInteger;
						public convertNumberToInt(): void;
						public close(): void;
						public overrideCurrentName(param0: string): void;
						public overrideStdFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonParser;
						public disable(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.core.JsonParser;
						public _checkStdFeatureChanges(param0: number, param1: number): void;
						public getDoubleValue(): number;
						public isClosed(): boolean;
						public resetFloat(param0: boolean, param1: number, param2: number, param3: number): com.fasterxml.jackson.core.JsonToken;
						public _handleEOF(): void;
						public reportUnexpectedNumberChar(param0: number, param1: string): void;
						public reportOverflowInt(): void;
						public getCurrentName(): string;
						public getTokenColumnNr(): number;
						public setCurrentValue(param0: any): void;
						public getTokenCharacterOffset(): number;
						public reportInvalidNumber(param0: string): void;
						public _parseNumericValue(param0: number): void;
						public constructor();
						public resetInt(param0: boolean, param1: number): com.fasterxml.jackson.core.JsonToken;
						public convertNumberToLong(): void;
						public reportInvalidBase64Char(param0: com.fasterxml.jackson.core.Base64Variant, param1: number, param2: number): java.lang.IllegalArgumentException;
						public reset(param0: boolean, param1: number, param2: number, param3: number): com.fasterxml.jackson.core.JsonToken;
						public resetAsNaN(param0: string, param1: number): com.fasterxml.jackson.core.JsonToken;
						public hasTextCharacters(): boolean;
						public loadMoreGuaranteed(): void;
						public _releaseBuffers(): void;
						public getIntValue(): number;
						public getLongValue(): number;
						public _closeInput(): void;
						public getParsingContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
						public _decodeEscaped(): string;
						public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public _decodeBase64Escape(param0: com.fasterxml.jackson.core.Base64Variant, param1: string, param2: number): number;
						public convertNumberToBigDecimal(): void;
						public _reportMismatchedEndMarker(param0: number, param1: string): void;
						public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getBinaryValue(): native.Array<number>;
						public _getByteArrayBuilder(): com.fasterxml.jackson.core.util.ByteArrayBuilder;
						public reportInvalidBase64Char(param0: com.fasterxml.jackson.core.Base64Variant, param1: number, param2: number, param3: string): java.lang.IllegalArgumentException;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number);
						public convertNumberToDouble(): void;
						public setFeatureMask(param0: number): com.fasterxml.jackson.core.JsonParser;
						public getEmbeddedObject(): any;
						public _finishString(): void;
						public _parseIntValue(): number;
						public version(): com.fasterxml.jackson.core.Version;
						public convertNumberToBigInteger(): void;
						public enable(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.core.JsonParser;
						public reportOverflowLong(): void;
						public getFloatValue(): number;
						public getCurrentValue(): any;
						public getNumberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public getParsingContext(): com.fasterxml.jackson.core.json.JsonReadContext;
						public constructor(param0: number);
						public getDecimalValue(): java.math.BigDecimal;
						public _eofAsNextChar(): number;
						public loadMore(): boolean;
						public _decodeBase64Escape(param0: com.fasterxml.jackson.core.Base64Variant, param1: number, param2: number): number;
						public getTokenLineNr(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace base {
					export abstract class ParserMinimalBase extends com.fasterxml.jackson.core.JsonParser {
						public static class: java.lang.Class<com.fasterxml.jackson.core.base.ParserMinimalBase>;
						public static INT_TAB: number;
						public static INT_LF: number;
						public static INT_CR: number;
						public static INT_SPACE: number;
						public static INT_LBRACKET: number;
						public static INT_RBRACKET: number;
						public static INT_LCURLY: number;
						public static INT_RCURLY: number;
						public static INT_QUOTE: number;
						public static INT_BACKSLASH: number;
						public static INT_SLASH: number;
						public static INT_COLON: number;
						public static INT_COMMA: number;
						public static INT_HASH: number;
						public static INT_PERIOD: number;
						public static INT_e: number;
						public static INT_E: number;
						public _currToken: com.fasterxml.jackson.core.JsonToken;
						public _lastClearedToken: com.fasterxml.jackson.core.JsonToken;
						public hasToken(param0: com.fasterxml.jackson.core.JsonToken): boolean;
						public close(): void;
						public getTextLength(): number;
						public getValueAsLong(param0: number): number;
						public _constructError(param0: string): com.fasterxml.jackson.core.JsonParseException;
						public overrideCurrentName(param0: string): void;
						public getValueAsLong(): number;
						public clearCurrentToken(): void;
						public getTextOffset(): number;
						public isClosed(): boolean;
						public _handleEOF(): void;
						public isExpectedStartObjectToken(): boolean;
						public getCurrentName(): string;
						public hasCurrentToken(): boolean;
						public getLastClearedToken(): com.fasterxml.jackson.core.JsonToken;
						public getCurrentTokenId(): number;
						public constructor();
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public _reportMissingRootWS(param0: number): void;
						public hasTextCharacters(): boolean;
						public _throwUnquotedSpace(param0: number, param1: string): void;
						public getValueAsDouble(): number;
						public static _asciiBytes(param0: string): native.Array<number>;
						public _wrapError(param0: string, param1: java.lang.Throwable): void;
						public _throwInvalidSpace(param0: number): void;
						public hasTokenId(param0: number): boolean;
						public skipChildren(): com.fasterxml.jackson.core.JsonParser;
						public getParsingContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public getValueAsInt(param0: number): number;
						public _hasTextualNull(param0: string): boolean;
						public _throwInternal(): void;
						public static _getCharDesc(param0: number): string;
						public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public getValueAsDouble(param0: number): number;
						public _reportInvalidEOF(): void;
						public isExpectedStartArrayToken(): boolean;
						public getValueAsInt(): number;
						public _reportError(param0: string): void;
						public getValueAsString(): string;
						public getText(): string;
						public _handleUnrecognizedCharacterEscape(param0: string): string;
						public getBinaryValue(): native.Array<number>;
						public _reportInvalidEOF(param0: string): void;
						public static _ascii(param0: native.Array<number>): string;
						public _decodeBase64(param0: string, param1: com.fasterxml.jackson.core.util.ByteArrayBuilder, param2: com.fasterxml.jackson.core.Base64Variant): void;
						public _reportUnexpectedChar(param0: number, param1: string): void;
						public getCurrentToken(): com.fasterxml.jackson.core.JsonToken;
						public getValueAsBoolean(param0: boolean): boolean;
						public version(): com.fasterxml.jackson.core.Version;
						public getValueAsBoolean(): boolean;
						public getValueAsString(param0: string): string;
						public _constructError(param0: string, param1: java.lang.Throwable): com.fasterxml.jackson.core.JsonParseException;
						public getTextCharacters(): native.Array<string>;
						public nextValue(): com.fasterxml.jackson.core.JsonToken;
						public constructor(param0: number);
						public _reportInvalidEOFInValue(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace filter {
					export class FilteringGeneratorDelegate extends com.fasterxml.jackson.core.util.JsonGeneratorDelegate {
						public static class: java.lang.Class<com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate>;
						public rootFilter: com.fasterxml.jackson.core.filter.TokenFilter;
						public _allowMultipleMatches: boolean;
						public _includePath: boolean;
						public _includeImmediateParent: boolean;
						public _filterContext: com.fasterxml.jackson.core.filter.TokenFilterContext;
						public _itemFilter: com.fasterxml.jackson.core.filter.TokenFilter;
						public _matchCount: number;
						public writeStartArray(): void;
						public writeObjectRef(param0: any): void;
						public writeString(param0: native.Array<string>, param1: number, param2: number): void;
						public writeEndObject(): void;
						public writeFieldName(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeNumber(param0: string): void;
						public writeBoolean(param0: boolean): void;
						public _checkPropertyParentPath(): void;
						public _checkRawValueWrite(): boolean;
						public writeFieldName(param0: string): void;
						public writeStartObject(): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: native.Array<number>, param2: number, param3: number): void;
						public getFilterContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public writeRawValue(param0: native.Array<string>, param1: number, param2: number): void;
						public writeNumber(param0: java.math.BigInteger): void;
						public writeOmittedField(param0: string): void;
						public writeNull(): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: number): number;
						public writeBinary(param0: native.Array<number>): void;
						public _checkBinaryWrite(): boolean;
						public writeRaw(param0: native.Array<string>, param1: number, param2: number): void;
						public writeNumber(param0: number): void;
						public _checkParentPath(): void;
						public writeRaw(param0: string, param1: number, param2: number): void;
						public constructor();
						public getMatchCount(): number;
						public writeRawValue(param0: string): void;
						public writeBinary(param0: java.io.InputStream, param1: number): number;
						public writeTypeId(param0: any): void;
						public constructor(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.filter.TokenFilter, param2: boolean, param3: boolean);
						public version(): com.fasterxml.jackson.core.Version;
						public getFilter(): com.fasterxml.jackson.core.filter.TokenFilter;
						public getOutputContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public writeString(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public writeRawValue(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeStartArray(param0: number): void;
						public writeRawUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public constructor(param0: com.fasterxml.jackson.core.JsonGenerator);
						public writeObjectId(param0: any): void;
						public writeEndArray(): void;
						public writeString(param0: string): void;
						public writeRaw(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeBinary(param0: native.Array<number>, param1: number, param2: number): void;
						public writeRaw(param0: string): void;
						public constructor(param0: com.fasterxml.jackson.core.JsonGenerator, param1: boolean);
						public writeRawValue(param0: string, param1: number, param2: number): void;
						public writeNumber(param0: java.math.BigDecimal): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace filter {
					export class FilteringParserDelegate extends com.fasterxml.jackson.core.util.JsonParserDelegate {
						public static class: java.lang.Class<com.fasterxml.jackson.core.filter.FilteringParserDelegate>;
						public rootFilter: com.fasterxml.jackson.core.filter.TokenFilter;
						public _allowMultipleMatches: boolean;
						public _includePath: boolean;
						public _includeImmediateParent: boolean;
						public _currToken: com.fasterxml.jackson.core.JsonToken;
						public _lastClearedToken: com.fasterxml.jackson.core.JsonToken;
						public _headContext: com.fasterxml.jackson.core.filter.TokenFilterContext;
						public _exposedContext: com.fasterxml.jackson.core.filter.TokenFilterContext;
						public _itemFilter: com.fasterxml.jackson.core.filter.TokenFilter;
						public _matchCount: number;
						public getBigIntegerValue(): java.math.BigInteger;
						public getNumberValue(): java.lang.Number;
						public hasToken(param0: com.fasterxml.jackson.core.JsonToken): boolean;
						public _nextTokenWithBuffering(param0: com.fasterxml.jackson.core.filter.TokenFilterContext): com.fasterxml.jackson.core.JsonToken;
						public getTextLength(): number;
						public getValueAsLong(param0: number): number;
						public overrideCurrentName(param0: string): void;
						public getValueAsLong(): number;
						public clearCurrentToken(): void;
						public getTextOffset(): number;
						public getDoubleValue(): number;
						public getShortValue(): number;
						public isExpectedStartObjectToken(): boolean;
						public getCurrentName(): string;
						public hasCurrentToken(): boolean;
						public getLastClearedToken(): com.fasterxml.jackson.core.JsonToken;
						public getCurrentTokenId(): number;
						public constructor();
						public getMatchCount(): number;
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public _filterContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public hasTextCharacters(): boolean;
						public getIntValue(): number;
						public getValueAsDouble(): number;
						public getLongValue(): number;
						public getByteValue(): number;
						public hasTokenId(param0: number): boolean;
						public getParsingContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public skipChildren(): com.fasterxml.jackson.core.JsonParser;
						public getValueAsInt(param0: number): number;
						public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getValueAsDouble(param0: number): number;
						public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public isExpectedStartArrayToken(): boolean;
						public getValueAsInt(): number;
						public getValueAsString(): string;
						public getText(): string;
						public getBinaryValue(): native.Array<number>;
						public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getCurrentToken(): com.fasterxml.jackson.core.JsonToken;
						public getValueAsBoolean(param0: boolean): boolean;
						public getEmbeddedObject(): any;
						public getBooleanValue(): boolean;
						public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.filter.TokenFilter, param2: boolean, param3: boolean);
						public version(): com.fasterxml.jackson.core.Version;
						public getFilter(): com.fasterxml.jackson.core.filter.TokenFilter;
						public _nextToken2(): com.fasterxml.jackson.core.JsonToken;
						public readBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.OutputStream): number;
						public getFloatValue(): number;
						public getValueAsBoolean(): boolean;
						public constructor(param0: com.fasterxml.jackson.core.JsonParser);
						public getNumberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public getValueAsString(param0: string): string;
						public getTextCharacters(): native.Array<string>;
						public nextValue(): com.fasterxml.jackson.core.JsonToken;
						public readBinaryValue(param0: java.io.OutputStream): number;
						public constructor(param0: number);
						public getDecimalValue(): java.math.BigDecimal;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace filter {
					export class JsonPointerBasedFilter extends com.fasterxml.jackson.core.filter.TokenFilter {
						public static class: java.lang.Class<com.fasterxml.jackson.core.filter.JsonPointerBasedFilter>;
						public _pathToMatch: com.fasterxml.jackson.core.JsonPointer;
						public filterStartArray(): com.fasterxml.jackson.core.filter.TokenFilter;
						public constructor();
						public includeProperty(param0: string): com.fasterxml.jackson.core.filter.TokenFilter;
						public constructor(param0: com.fasterxml.jackson.core.JsonPointer);
						public includeElement(param0: number): com.fasterxml.jackson.core.filter.TokenFilter;
						public filterStartObject(): com.fasterxml.jackson.core.filter.TokenFilter;
						public _includeScalar(): boolean;
						public toString(): string;
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace filter {
					export class TokenFilter {
						public static class: java.lang.Class<com.fasterxml.jackson.core.filter.TokenFilter>;
						public static INCLUDE_ALL: com.fasterxml.jackson.core.filter.TokenFilter;
						public includeEmbeddedValue(param0: any): boolean;
						public constructor();
						public filterFinishObject(): void;
						public includeRootValue(param0: number): com.fasterxml.jackson.core.filter.TokenFilter;
						public filterStartObject(): com.fasterxml.jackson.core.filter.TokenFilter;
						public includeNumber(param0: java.math.BigDecimal): boolean;
						public includeNumber(param0: number): boolean;
						public includeString(param0: string): boolean;
						public toString(): string;
						public includeBinary(): boolean;
						public filterFinishArray(): void;
						public includeValue(param0: com.fasterxml.jackson.core.JsonParser): boolean;
						public filterStartArray(): com.fasterxml.jackson.core.filter.TokenFilter;
						public includeNumber(param0: java.math.BigInteger): boolean;
						public includeNull(): boolean;
						public includeProperty(param0: string): com.fasterxml.jackson.core.filter.TokenFilter;
						public includeElement(param0: number): com.fasterxml.jackson.core.filter.TokenFilter;
						public includeBoolean(param0: boolean): boolean;
						public includeRawValue(): boolean;
						public _includeScalar(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace filter {
					export class TokenFilterContext extends com.fasterxml.jackson.core.JsonStreamContext {
						public static class: java.lang.Class<com.fasterxml.jackson.core.filter.TokenFilterContext>;
						public _parent: com.fasterxml.jackson.core.filter.TokenFilterContext;
						public _child: com.fasterxml.jackson.core.filter.TokenFilterContext;
						public _currentName: string;
						public _filter: com.fasterxml.jackson.core.filter.TokenFilter;
						public _startHandled: boolean;
						public _needToHandleName: boolean;
						public skipParentChecks(): void;
						public constructor();
						public writePath(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public getParent(): com.fasterxml.jackson.core.filter.TokenFilterContext;
						public appendDesc(param0: java.lang.StringBuilder): void;
						public reset(param0: number, param1: com.fasterxml.jackson.core.filter.TokenFilter, param2: boolean): com.fasterxml.jackson.core.filter.TokenFilterContext;
						public createChildArrayContext(param0: com.fasterxml.jackson.core.filter.TokenFilter, param1: boolean): com.fasterxml.jackson.core.filter.TokenFilterContext;
						public getFilter(): com.fasterxml.jackson.core.filter.TokenFilter;
						public closeObject(param0: com.fasterxml.jackson.core.JsonGenerator): com.fasterxml.jackson.core.filter.TokenFilterContext;
						public checkValue(param0: com.fasterxml.jackson.core.filter.TokenFilter): com.fasterxml.jackson.core.filter.TokenFilter;
						public getParent(): com.fasterxml.jackson.core.JsonStreamContext;
						public static createRootContext(param0: com.fasterxml.jackson.core.filter.TokenFilter): com.fasterxml.jackson.core.filter.TokenFilterContext;
						public writeImmediatePath(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public createChildObjectContext(param0: com.fasterxml.jackson.core.filter.TokenFilter, param1: boolean): com.fasterxml.jackson.core.filter.TokenFilterContext;
						public toString(): string;
						public getCurrentValue(): any;
						public findChildOf(param0: com.fasterxml.jackson.core.filter.TokenFilterContext): com.fasterxml.jackson.core.filter.TokenFilterContext;
						public setFieldName(param0: string): com.fasterxml.jackson.core.filter.TokenFilter;
						public constructor(param0: number, param1: com.fasterxml.jackson.core.filter.TokenFilterContext, param2: com.fasterxml.jackson.core.filter.TokenFilter, param3: boolean);
						public getCurrentName(): string;
						public isStartHandled(): boolean;
						public nextTokenToRead(): com.fasterxml.jackson.core.JsonToken;
						public setCurrentValue(param0: any): void;
						public closeArray(param0: com.fasterxml.jackson.core.JsonGenerator): com.fasterxml.jackson.core.filter.TokenFilterContext;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace format {
					export class DataFormatDetector {
						public static class: java.lang.Class<com.fasterxml.jackson.core.format.DataFormatDetector>;
						public static DEFAULT_MAX_INPUT_LOOKAHEAD: number;
						public _detectors: native.Array<com.fasterxml.jackson.core.JsonFactory>;
						public _optimalMatch: com.fasterxml.jackson.core.format.MatchStrength;
						public _minimalMatch: com.fasterxml.jackson.core.format.MatchStrength;
						public _maxInputLookahead: number;
						public findFormat(param0: native.Array<number>): com.fasterxml.jackson.core.format.DataFormatMatcher;
						public withMaxInputLookahead(param0: number): com.fasterxml.jackson.core.format.DataFormatDetector;
						public withMinimalMatch(param0: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.core.format.DataFormatDetector;
						public findFormat(param0: java.io.InputStream): com.fasterxml.jackson.core.format.DataFormatMatcher;
						public findFormat(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.core.format.DataFormatMatcher;
						public constructor(param0: java.util.Collection<com.fasterxml.jackson.core.JsonFactory>);
						public constructor(param0: native.Array<com.fasterxml.jackson.core.JsonFactory>);
						public withOptimalMatch(param0: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.core.format.DataFormatDetector;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace format {
					export class DataFormatMatcher {
						public static class: java.lang.Class<com.fasterxml.jackson.core.format.DataFormatMatcher>;
						public _originalStream: java.io.InputStream;
						public _bufferedData: native.Array<number>;
						public _bufferedStart: number;
						public _bufferedLength: number;
						public _match: com.fasterxml.jackson.core.JsonFactory;
						public _matchStrength: com.fasterxml.jackson.core.format.MatchStrength;
						public getMatchStrength(): com.fasterxml.jackson.core.format.MatchStrength;
						public getMatchedFormatName(): string;
						public getMatch(): com.fasterxml.jackson.core.JsonFactory;
						public createParserWithMatch(): com.fasterxml.jackson.core.JsonParser;
						public hasMatch(): boolean;
						public constructor(param0: java.io.InputStream, param1: native.Array<number>, param2: number, param3: number, param4: com.fasterxml.jackson.core.JsonFactory, param5: com.fasterxml.jackson.core.format.MatchStrength);
						public getDataStream(): java.io.InputStream;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace format {
					export class InputAccessor {
						public static class: java.lang.Class<com.fasterxml.jackson.core.format.InputAccessor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.core.format.InputAccessor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							hasMoreBytes(): boolean;
							nextByte(): number;
							reset(): void;
						});
						public constructor();
						public nextByte(): number;
						public hasMoreBytes(): boolean;
						public reset(): void;
					}
					export namespace InputAccessor {
						export class Std extends com.fasterxml.jackson.core.format.InputAccessor {
							public static class: java.lang.Class<com.fasterxml.jackson.core.format.InputAccessor.Std>;
							public _in: java.io.InputStream;
							public _buffer: native.Array<number>;
							public _bufferedStart: number;
							public _bufferedEnd: number;
							public _ptr: number;
							public constructor(param0: java.io.InputStream, param1: native.Array<number>);
							public nextByte(): number;
							public constructor(param0: native.Array<number>);
							public hasMoreBytes(): boolean;
							public constructor(param0: native.Array<number>, param1: number, param2: number);
							public reset(): void;
							public createMatcher(param0: com.fasterxml.jackson.core.JsonFactory, param1: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.core.format.DataFormatMatcher;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace format {
					export class MatchStrength {
						public static class: java.lang.Class<com.fasterxml.jackson.core.format.MatchStrength>;
						public static NO_MATCH: com.fasterxml.jackson.core.format.MatchStrength;
						public static INCONCLUSIVE: com.fasterxml.jackson.core.format.MatchStrength;
						public static WEAK_MATCH: com.fasterxml.jackson.core.format.MatchStrength;
						public static SOLID_MATCH: com.fasterxml.jackson.core.format.MatchStrength;
						public static FULL_MATCH: com.fasterxml.jackson.core.format.MatchStrength;
						public static values(): native.Array<com.fasterxml.jackson.core.format.MatchStrength>;
						public static valueOf(param0: string): com.fasterxml.jackson.core.format.MatchStrength;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class CharTypes {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.CharTypes>;
						public constructor();
						public static copyHexChars(): native.Array<string>;
						public static getInputCodeLatin1(): native.Array<number>;
						public static appendQuoted(param0: java.lang.StringBuilder, param1: string): void;
						public static getInputCodeLatin1JsNames(): native.Array<number>;
						public static getInputCodeComment(): native.Array<number>;
						public static getInputCodeUtf8JsNames(): native.Array<number>;
						public static charToHex(param0: number): number;
						public static getInputCodeUtf8(): native.Array<number>;
						public static copyHexBytes(): native.Array<number>;
						public static get7BitOutputEscapes(): native.Array<number>;
						public static getInputCodeWS(): native.Array<number>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export abstract class CharacterEscapes {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.CharacterEscapes>;
						public static ESCAPE_NONE: number;
						public static ESCAPE_STANDARD: number;
						public static ESCAPE_CUSTOM: number;
						public constructor();
						public static standardAsciiEscapesForJSON(): native.Array<number>;
						public getEscapeCodesForAscii(): native.Array<number>;
						public getEscapeSequence(param0: number): com.fasterxml.jackson.core.SerializableString;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class IOContext {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.IOContext>;
						public _sourceRef: any;
						public _encoding: com.fasterxml.jackson.core.JsonEncoding;
						public _managedResource: boolean;
						public _bufferRecycler: com.fasterxml.jackson.core.util.BufferRecycler;
						public _readIOBuffer: native.Array<number>;
						public _writeEncodingBuffer: native.Array<number>;
						public _base64Buffer: native.Array<number>;
						public _tokenCBuffer: native.Array<string>;
						public _concatCBuffer: native.Array<string>;
						public _nameCopyBuffer: native.Array<string>;
						public _verifyAlloc(param0: any): void;
						public getEncoding(): com.fasterxml.jackson.core.JsonEncoding;
						public constructTextBuffer(): com.fasterxml.jackson.core.util.TextBuffer;
						public releaseBase64Buffer(param0: native.Array<number>): void;
						public allocReadIOBuffer(): native.Array<number>;
						public setEncoding(param0: com.fasterxml.jackson.core.JsonEncoding): void;
						public releaseWriteEncodingBuffer(param0: native.Array<number>): void;
						public allocWriteEncodingBuffer(): native.Array<number>;
						public allocBase64Buffer(): native.Array<number>;
						public allocNameCopyBuffer(param0: number): native.Array<string>;
						public allocWriteEncodingBuffer(param0: number): native.Array<number>;
						public allocTokenBuffer(): native.Array<string>;
						public allocReadIOBuffer(param0: number): native.Array<number>;
						public _verifyRelease(param0: native.Array<string>, param1: native.Array<string>): void;
						public _verifyRelease(param0: native.Array<number>, param1: native.Array<number>): void;
						public constructor(param0: com.fasterxml.jackson.core.util.BufferRecycler, param1: any, param2: boolean);
						public withEncoding(param0: com.fasterxml.jackson.core.JsonEncoding): com.fasterxml.jackson.core.io.IOContext;
						public releaseNameCopyBuffer(param0: native.Array<string>): void;
						public allocTokenBuffer(param0: number): native.Array<string>;
						public releaseReadIOBuffer(param0: native.Array<number>): void;
						public releaseTokenBuffer(param0: native.Array<string>): void;
						public allocConcatBuffer(): native.Array<string>;
						public getSourceReference(): any;
						public isResourceManaged(): boolean;
						public releaseConcatBuffer(param0: native.Array<string>): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export abstract class InputDecorator {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.InputDecorator>;
						public constructor();
						public decorate(param0: com.fasterxml.jackson.core.io.IOContext, param1: java.io.InputStream): java.io.InputStream;
						public decorate(param0: com.fasterxml.jackson.core.io.IOContext, param1: native.Array<number>, param2: number, param3: number): java.io.InputStream;
						public decorate(param0: com.fasterxml.jackson.core.io.IOContext, param1: java.io.Reader): java.io.Reader;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class JsonStringEncoder {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.JsonStringEncoder>;
						public static _threadEncoder: java.lang.ThreadLocal<java.lang.ref.SoftReference<com.fasterxml.jackson.core.io.JsonStringEncoder>>;
						public _text: com.fasterxml.jackson.core.util.TextBuffer;
						public _bytes: com.fasterxml.jackson.core.util.ByteArrayBuilder;
						public _qbuf: native.Array<string>;
						public constructor();
						public encodeAsUTF8(param0: string): native.Array<number>;
						public quoteAsString(param0: string): native.Array<string>;
						public static getInstance(): com.fasterxml.jackson.core.io.JsonStringEncoder;
						public quoteAsUTF8(param0: string): native.Array<number>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class MergedStream {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.MergedStream>;
						public read(): number;
						public skip(param0: number): number;
						public read(param0: native.Array<number>): number;
						public close(): void;
						public markSupported(): boolean;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: java.io.InputStream, param2: native.Array<number>, param3: number, param4: number);
						public mark(param0: number): void;
						public read(param0: native.Array<number>, param1: number, param2: number): number;
						public reset(): void;
						public available(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class NumberInput {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.NumberInput>;
						public static NASTY_SMALL_DOUBLE: string;
						public static parseAsInt(param0: string, param1: number): number;
						public constructor();
						public static parseBigDecimal(param0: native.Array<string>): java.math.BigDecimal;
						public static parseBigDecimal(param0: native.Array<string>, param1: number, param2: number): java.math.BigDecimal;
						public static parseInt(param0: string): number;
						public static parseLong(param0: string): number;
						public static parseAsDouble(param0: string, param1: number): number;
						public static parseDouble(param0: string): number;
						public static parseInt(param0: native.Array<string>, param1: number, param2: number): number;
						public static parseAsLong(param0: string, param1: number): number;
						public static parseLong(param0: native.Array<string>, param1: number, param2: number): number;
						public static inLongRange(param0: native.Array<string>, param1: number, param2: number, param3: boolean): boolean;
						public static parseBigDecimal(param0: string): java.math.BigDecimal;
						public static inLongRange(param0: string, param1: boolean): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class NumberOutput {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.NumberOutput>;
						public constructor();
						public static outputLong(param0: number, param1: native.Array<number>, param2: number): number;
						public static toString(param0: number): string;
						public static outputInt(param0: number, param1: native.Array<number>, param2: number): number;
						public static outputInt(param0: number, param1: native.Array<string>, param2: number): number;
						public static outputLong(param0: number, param1: native.Array<string>, param2: number): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export abstract class OutputDecorator {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.OutputDecorator>;
						public constructor();
						public decorate(param0: com.fasterxml.jackson.core.io.IOContext, param1: java.io.OutputStream): java.io.OutputStream;
						public decorate(param0: com.fasterxml.jackson.core.io.IOContext, param1: java.io.Writer): java.io.Writer;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class SegmentedStringWriter {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.SegmentedStringWriter>;
						public _buffer: com.fasterxml.jackson.core.util.TextBuffer;
						public write(param0: string, param1: number, param2: number): void;
						public append(param0: string, param1: number, param2: number): java.io.Writer;
						public append(param0: string): java.io.Writer;
						public close(): void;
						public getAndClear(): string;
						public write(param0: number): void;
						public flush(): void;
						public constructor(param0: com.fasterxml.jackson.core.util.BufferRecycler);
						public write(param0: native.Array<string>): void;
						public write(param0: native.Array<string>, param1: number, param2: number): void;
						public write(param0: string): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class SerializedString extends com.fasterxml.jackson.core.SerializableString {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.SerializedString>;
						public _value: string;
						public _quotedUTF8Ref: native.Array<number>;
						public _unquotedUTF8Ref: native.Array<number>;
						public _quotedChars: native.Array<string>;
						public _jdkSerializeValue: string;
						public appendUnquotedUTF8(param0: native.Array<number>, param1: number): number;
						public writeUnquotedUTF8(param0: java.io.OutputStream): number;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public asUnquotedUTF8(): native.Array<number>;
						public getValue(): string;
						public putUnquotedUTF8(param0: java.nio.ByteBuffer): number;
						public appendUnquoted(param0: native.Array<string>, param1: number): number;
						public readResolve(): any;
						public toString(): string;
						public asQuotedUTF8(): native.Array<number>;
						public charLength(): number;
						public asQuotedChars(): native.Array<string>;
						public putQuotedUTF8(param0: java.nio.ByteBuffer): number;
						public appendQuoted(param0: native.Array<string>, param1: number): number;
						public appendQuotedUTF8(param0: native.Array<number>, param1: number): number;
						public writeQuotedUTF8(param0: java.io.OutputStream): number;
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class UTF32Reader {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.UTF32Reader>;
						public static LAST_VALID_UNICODE_CHAR: number;
						public static NC: string;
						public _context: com.fasterxml.jackson.core.io.IOContext;
						public _in: java.io.InputStream;
						public _buffer: native.Array<number>;
						public _ptr: number;
						public _length: number;
						public _bigEndian: boolean;
						public _surrogate: string;
						public _charCount: number;
						public _byteCount: number;
						public _managedBuffers: boolean;
						public _tmpBuf: native.Array<string>;
						public read(): number;
						public read(param0: native.Array<string>, param1: number, param2: number): number;
						public close(): void;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: java.io.InputStream, param2: native.Array<number>, param3: number, param4: number, param5: boolean);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace io {
					export class UTF8Writer {
						public static class: java.lang.Class<com.fasterxml.jackson.core.io.UTF8Writer>;
						public static illegalSurrogateDesc(param0: number): string;
						public write(param0: string, param1: number, param2: number): void;
						public append(param0: string): java.io.Writer;
						public close(): void;
						public write(param0: number): void;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: java.io.OutputStream);
						public flush(): void;
						public write(param0: native.Array<string>): void;
						public static illegalSurrogate(param0: number): void;
						public write(param0: native.Array<string>, param1: number, param2: number): void;
						public write(param0: string): void;
						public convertSurrogate(param0: number): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export class ByteSourceJsonBootstrapper {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper>;
						public _context: com.fasterxml.jackson.core.io.IOContext;
						public _in: java.io.InputStream;
						public _inputBuffer: native.Array<number>;
						public _inputProcessed: number;
						public _bigEndian: boolean;
						public _bytesPerChar: number;
						public detectEncoding(): com.fasterxml.jackson.core.JsonEncoding;
						public constructReader(): java.io.Reader;
						public ensureLoaded(param0: number): boolean;
						public constructParser(param0: number, param1: com.fasterxml.jackson.core.ObjectCodec, param2: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, param3: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, param4: number): com.fasterxml.jackson.core.JsonParser;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: java.io.InputStream);
						public static hasJSONFormat(param0: com.fasterxml.jackson.core.format.InputAccessor): com.fasterxml.jackson.core.format.MatchStrength;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: native.Array<number>, param2: number, param3: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export class DupDetector {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.DupDetector>;
						public _source: any;
						public _firstName: string;
						public _secondName: string;
						public _seen: java.util.HashSet<string>;
						public isDup(param0: string): boolean;
						public findLocation(): com.fasterxml.jackson.core.JsonLocation;
						public static rootDetector(param0: com.fasterxml.jackson.core.JsonGenerator): com.fasterxml.jackson.core.json.DupDetector;
						public static rootDetector(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.json.DupDetector;
						public child(): com.fasterxml.jackson.core.json.DupDetector;
						public reset(): void;
						public getSource(): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export abstract class JsonGeneratorImpl extends com.fasterxml.jackson.core.base.GeneratorBase {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.JsonGeneratorImpl>;
						public static sOutputEscapes: native.Array<number>;
						public _ioContext: com.fasterxml.jackson.core.io.IOContext;
						public _outputEscapes: native.Array<number>;
						public _maximumNonEscapedChar: number;
						public _characterEscapes: com.fasterxml.jackson.core.io.CharacterEscapes;
						public _rootValueSeparator: com.fasterxml.jackson.core.SerializableString;
						public _cfgUnqNames: boolean;
						public writeStringField(param0: string, param1: string): void;
						public constructor();
						public constructor(param0: number, param1: com.fasterxml.jackson.core.ObjectCodec);
						public setRootValueSeparator(param0: com.fasterxml.jackson.core.SerializableString): com.fasterxml.jackson.core.JsonGenerator;
						public version(): com.fasterxml.jackson.core.Version;
						public getHighestEscapedChar(): number;
						public getCharacterEscapes(): com.fasterxml.jackson.core.io.CharacterEscapes;
						public _checkStdFeatureChanges(param0: number, param1: number): void;
						public disable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						public constructor(param0: number, param1: com.fasterxml.jackson.core.ObjectCodec, param2: com.fasterxml.jackson.core.json.JsonWriteContext);
						public setHighestNonEscapedChar(param0: number): com.fasterxml.jackson.core.JsonGenerator;
						public setCharacterEscapes(param0: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.core.JsonGenerator;
						public enable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number, param2: com.fasterxml.jackson.core.ObjectCodec);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export class JsonReadContext extends com.fasterxml.jackson.core.JsonStreamContext {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.JsonReadContext>;
						public _parent: com.fasterxml.jackson.core.json.JsonReadContext;
						public _dups: com.fasterxml.jackson.core.json.DupDetector;
						public _child: com.fasterxml.jackson.core.json.JsonReadContext;
						public _currentName: string;
						public _currentValue: any;
						public _lineNr: number;
						public _columnNr: number;
						public constructor();
						public constructor(param0: com.fasterxml.jackson.core.json.JsonReadContext, param1: com.fasterxml.jackson.core.json.DupDetector, param2: number, param3: number, param4: number);
						public getStartLocation(param0: any): com.fasterxml.jackson.core.JsonLocation;
						public setCurrentName(param0: string): void;
						public reset(param0: number, param1: number, param2: number): void;
						public clearAndGetParent(): com.fasterxml.jackson.core.json.JsonReadContext;
						public getParent(): com.fasterxml.jackson.core.JsonStreamContext;
						public expectComma(): boolean;
						public createChildArrayContext(param0: number, param1: number): com.fasterxml.jackson.core.json.JsonReadContext;
						public toString(): string;
						public getCurrentValue(): any;
						public static createRootContext(param0: number, param1: number, param2: com.fasterxml.jackson.core.json.DupDetector): com.fasterxml.jackson.core.json.JsonReadContext;
						public createChildObjectContext(param0: number, param1: number): com.fasterxml.jackson.core.json.JsonReadContext;
						public withDupDetector(param0: com.fasterxml.jackson.core.json.DupDetector): com.fasterxml.jackson.core.json.JsonReadContext;
						public getCurrentName(): string;
						public static createRootContext(param0: com.fasterxml.jackson.core.json.DupDetector): com.fasterxml.jackson.core.json.JsonReadContext;
						public getParent(): com.fasterxml.jackson.core.json.JsonReadContext;
						public setCurrentValue(param0: any): void;
						public getDupDetector(): com.fasterxml.jackson.core.json.DupDetector;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export class JsonWriteContext extends com.fasterxml.jackson.core.JsonStreamContext {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.JsonWriteContext>;
						public static STATUS_OK_AS_IS: number;
						public static STATUS_OK_AFTER_COMMA: number;
						public static STATUS_OK_AFTER_COLON: number;
						public static STATUS_OK_AFTER_SPACE: number;
						public static STATUS_EXPECT_VALUE: number;
						public static STATUS_EXPECT_NAME: number;
						public _parent: com.fasterxml.jackson.core.json.JsonWriteContext;
						public _dups: com.fasterxml.jackson.core.json.DupDetector;
						public _child: com.fasterxml.jackson.core.json.JsonWriteContext;
						public _currentName: string;
						public _currentValue: any;
						public _gotName: boolean;
						public clearAndGetParent(): com.fasterxml.jackson.core.json.JsonWriteContext;
						public constructor();
						public appendDesc(param0: java.lang.StringBuilder): void;
						public static createRootContext(): com.fasterxml.jackson.core.json.JsonWriteContext;
						public createChildObjectContext(): com.fasterxml.jackson.core.json.JsonWriteContext;
						public getParent(): com.fasterxml.jackson.core.json.JsonWriteContext;
						public getParent(): com.fasterxml.jackson.core.JsonStreamContext;
						public static createRootContext(param0: com.fasterxml.jackson.core.json.DupDetector): com.fasterxml.jackson.core.json.JsonWriteContext;
						public toString(): string;
						public getCurrentValue(): any;
						public writeValue(): number;
						public withDupDetector(param0: com.fasterxml.jackson.core.json.DupDetector): com.fasterxml.jackson.core.json.JsonWriteContext;
						public reset(param0: number): com.fasterxml.jackson.core.json.JsonWriteContext;
						public constructor(param0: number, param1: com.fasterxml.jackson.core.json.JsonWriteContext, param2: com.fasterxml.jackson.core.json.DupDetector);
						public getCurrentName(): string;
						public setCurrentValue(param0: any): void;
						public getDupDetector(): com.fasterxml.jackson.core.json.DupDetector;
						public createChildArrayContext(): com.fasterxml.jackson.core.json.JsonWriteContext;
						public writeFieldName(param0: string): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export class PackageVersion extends com.fasterxml.jackson.core.Versioned {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.PackageVersion>;
						public static VERSION: com.fasterxml.jackson.core.Version;
						public constructor();
						public version(): com.fasterxml.jackson.core.Version;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export class ReaderBasedJsonParser extends com.fasterxml.jackson.core.base.ParserBase {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.ReaderBasedJsonParser>;
						public static _icLatin1: native.Array<number>;
						public _reader: java.io.Reader;
						public _inputBuffer: native.Array<string>;
						public _bufferRecyclable: boolean;
						public _objectCodec: com.fasterxml.jackson.core.ObjectCodec;
						public _symbols: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
						public _hashSeed: number;
						public _tokenIncomplete: boolean;
						public _nameStartOffset: number;
						public _nameStartRow: number;
						public _nameStartCol: number;
						public nextLongValue(param0: number): number;
						public getTextLength(): number;
						public _getText2(param0: com.fasterxml.jackson.core.JsonToken): string;
						public _handleOddName(param0: number): string;
						public getTextOffset(): number;
						public _parsePosNumber(param0: number): com.fasterxml.jackson.core.JsonToken;
						public _parseNegNumber(): com.fasterxml.jackson.core.JsonToken;
						public nextFieldName(): string;
						public releaseBuffered(param0: java.io.OutputStream): number;
						public constructor();
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public _reportInvalidToken(param0: string): void;
						public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): void;
						public _skipString(): void;
						public nextBooleanValue(): java.lang.Boolean;
						public _releaseBuffers(): void;
						public _handleOddValue(param0: number): com.fasterxml.jackson.core.JsonToken;
						public _closeInput(): void;
						public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
						public nextFieldName(param0: com.fasterxml.jackson.core.SerializableString): boolean;
						public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
						public _parseAposName(): string;
						public _decodeEscaped(): string;
						public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public _handleInvalidNumberStart(param0: number, param1: boolean): com.fasterxml.jackson.core.JsonToken;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number, param2: java.io.Reader, param3: com.fasterxml.jackson.core.ObjectCodec, param4: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer);
						public nextIntValue(param0: number): number;
						public releaseBuffered(param0: java.io.Writer): number;
						public _finishString2(): void;
						public _matchToken(param0: string, param1: number): void;
						public getValueAsString(): string;
						public _handleApos(): com.fasterxml.jackson.core.JsonToken;
						public getText(): string;
						public getBinaryValue(): native.Array<number>;
						public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
						public _decodeBase64(param0: string, param1: com.fasterxml.jackson.core.util.ByteArrayBuilder, param2: com.fasterxml.jackson.core.Base64Variant): void;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number);
						public nextTextValue(): string;
						public _finishString(): void;
						public _decodeBase64(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public getNextChar(param0: string): string;
						public getInputSource(): any;
						public _skipCR(): void;
						public version(): com.fasterxml.jackson.core.Version;
						public readBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.OutputStream): number;
						public _parseName(): string;
						public getValueAsString(param0: string): string;
						public getTextCharacters(): native.Array<string>;
						public _readBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.OutputStream, param2: native.Array<number>): number;
						public readBinaryValue(param0: java.io.OutputStream): number;
						public constructor(param0: number);
						public _reportInvalidToken(param0: string, param1: string): void;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number, param2: java.io.Reader, param3: com.fasterxml.jackson.core.ObjectCodec, param4: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, param5: native.Array<string>, param6: number, param7: number, param8: boolean);
						public loadMore(): boolean;
						public _isNextTokenNameMaybe(param0: number, param1: string): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export class UTF8JsonGenerator extends com.fasterxml.jackson.core.json.JsonGeneratorImpl {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.UTF8JsonGenerator>;
						public _outputStream: java.io.OutputStream;
						public _outputBuffer: native.Array<number>;
						public _outputTail: number;
						public _outputEnd: number;
						public _outputMaxContiguous: number;
						public _charBuffer: native.Array<string>;
						public _charBufferLength: number;
						public _entityBuffer: native.Array<number>;
						public _bufferRecyclable: boolean;
						public constructor(param0: number, param1: com.fasterxml.jackson.core.ObjectCodec);
						public writeEndObject(): void;
						public close(): void;
						public _flushBuffer(): void;
						public _writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: native.Array<number>, param3: number): number;
						public writeStartObject(): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: native.Array<number>, param2: number, param3: number): void;
						public _writePPFieldName(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeRawValue(param0: native.Array<string>, param1: number, param2: number): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: number): number;
						public writeBinary(param0: native.Array<number>): void;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number, param2: com.fasterxml.jackson.core.ObjectCodec, param3: java.io.OutputStream);
						public writeRaw(param0: string, param1: number, param2: number): void;
						public constructor();
						public writeBinary(param0: java.io.InputStream, param1: number): number;
						public writeString(param0: com.fasterxml.jackson.core.SerializableString): void;
						public flush(): void;
						public writeRawValue(param0: com.fasterxml.jackson.core.SerializableString): void;
						public _verifyPrettyValueWrite(param0: string, param1: number): void;
						public writeStartArray(param0: number): void;
						public _verifyValueWrite(param0: string): void;
						public writeRawUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public _releaseBuffers(): void;
						public writeEndArray(): void;
						public constructor(param0: number, param1: com.fasterxml.jackson.core.ObjectCodec, param2: com.fasterxml.jackson.core.json.JsonWriteContext);
						public _writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: native.Array<number>): number;
						public writeRaw(param0: string): void;
						public writeStartArray(): void;
						public writeString(param0: native.Array<string>, param1: number, param2: number): void;
						public writeFieldName(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeNumber(param0: string): void;
						public writeBoolean(param0: boolean): void;
						public getOutputTarget(): any;
						public writeFieldName(param0: string): void;
						public writeNumber(param0: java.math.BigInteger): void;
						public _writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: native.Array<number>, param2: number, param3: number): void;
						public writeNull(): void;
						public writeRaw(param0: native.Array<string>, param1: number, param2: number): void;
						public writeNumber(param0: number): void;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number, param2: com.fasterxml.jackson.core.ObjectCodec);
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number, param2: com.fasterxml.jackson.core.ObjectCodec, param3: java.io.OutputStream, param4: native.Array<number>, param5: number, param6: boolean);
						public writeRawValue(param0: string): void;
						public version(): com.fasterxml.jackson.core.Version;
						public getOutputBuffered(): number;
						public writeUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public writeString(param0: string): void;
						public writeRaw(param0: com.fasterxml.jackson.core.SerializableString): void;
						public _writePPFieldName(param0: string): void;
						public writeBinary(param0: native.Array<number>, param1: number, param2: number): void;
						public _outputSurrogates(param0: number, param1: number): void;
						public writeRawValue(param0: string, param1: number, param2: number): void;
						public writeNumber(param0: java.math.BigDecimal): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export class UTF8StreamJsonParser extends com.fasterxml.jackson.core.base.ParserBase {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.UTF8StreamJsonParser>;
						public static _icLatin1: native.Array<number>;
						public _objectCodec: com.fasterxml.jackson.core.ObjectCodec;
						public _symbols: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
						public _quadBuffer: native.Array<number>;
						public _tokenIncomplete: boolean;
						public _nameStartOffset: number;
						public _nameStartRow: number;
						public _nameStartCol: number;
						public _inputStream: java.io.InputStream;
						public _inputBuffer: native.Array<number>;
						public _bufferRecyclable: boolean;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number, param2: java.io.InputStream, param3: com.fasterxml.jackson.core.ObjectCodec, param4: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, param5: native.Array<number>, param6: number, param7: number, param8: boolean);
						public nextLongValue(param0: number): number;
						public parseMediumName2(param0: number, param1: number): string;
						public parseLongName(param0: number, param1: number, param2: number): string;
						public getTextLength(): number;
						public _getText2(param0: com.fasterxml.jackson.core.JsonToken): string;
						public _handleOddName(param0: number): string;
						public parseMediumName(param0: number): string;
						public getTextOffset(): number;
						public _handleUnexpectedValue(param0: number): com.fasterxml.jackson.core.JsonToken;
						public _loadToHaveAtLeast(param0: number): boolean;
						public _parsePosNumber(param0: number): com.fasterxml.jackson.core.JsonToken;
						public slowParseName(): string;
						public _reportInvalidOther(param0: number, param1: number): void;
						public _parseNegNumber(): com.fasterxml.jackson.core.JsonToken;
						public nextFieldName(): string;
						public releaseBuffered(param0: java.io.OutputStream): number;
						public _reportInvalidOther(param0: number): void;
						public constructor();
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public _reportInvalidToken(param0: string): void;
						public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): void;
						public _skipString(): void;
						public _reportInvalidInitial(param0: number): void;
						public nextBooleanValue(): java.lang.Boolean;
						public _releaseBuffers(): void;
						public _closeInput(): void;
						public getValueAsInt(param0: number): number;
						public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
						public nextFieldName(param0: com.fasterxml.jackson.core.SerializableString): boolean;
						public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
						public _parseAposName(): string;
						public _decodeEscaped(): string;
						public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public _reportInvalidChar(param0: number): void;
						public _handleInvalidNumberStart(param0: number, param1: boolean): com.fasterxml.jackson.core.JsonToken;
						public getValueAsInt(): number;
						public parseEscapedName(param0: native.Array<number>, param1: number, param2: number, param3: number, param4: number): string;
						public nextIntValue(param0: number): number;
						public _parseName(param0: number): string;
						public releaseBuffered(param0: java.io.Writer): number;
						public _matchToken(param0: string, param1: number): void;
						public getValueAsString(): string;
						public _handleApos(): com.fasterxml.jackson.core.JsonToken;
						public getText(): string;
						public getBinaryValue(): native.Array<number>;
						public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
						public _decodeBase64(param0: string, param1: com.fasterxml.jackson.core.util.ByteArrayBuilder, param2: com.fasterxml.jackson.core.Base64Variant): void;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number);
						public nextTextValue(): string;
						public _finishString(): void;
						public _decodeBase64(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public _finishAndReturnString(): string;
						public getInputSource(): any;
						public _skipCR(): void;
						public version(): com.fasterxml.jackson.core.Version;
						public _decodeCharForError(param0: number): number;
						public static growArrayBy(param0: native.Array<number>, param1: number): native.Array<number>;
						public readBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.OutputStream): number;
						public getValueAsString(param0: string): string;
						public getTextCharacters(): native.Array<string>;
						public _readBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.OutputStream, param2: native.Array<number>): number;
						public readBinaryValue(param0: java.io.OutputStream): number;
						public constructor(param0: number);
						public _reportInvalidToken(param0: string, param1: string): void;
						public loadMore(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace json {
					export class WriterBasedJsonGenerator extends com.fasterxml.jackson.core.json.JsonGeneratorImpl {
						public static class: java.lang.Class<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator>;
						public static SHORT_WRITE: number;
						public static HEX_CHARS: native.Array<string>;
						public _writer: java.io.Writer;
						public _outputBuffer: native.Array<string>;
						public _outputHead: number;
						public _outputTail: number;
						public _outputEnd: number;
						public _entityBuffer: native.Array<string>;
						public _currentEscape: com.fasterxml.jackson.core.SerializableString;
						public _writePPFieldName(param0: com.fasterxml.jackson.core.SerializableString, param1: boolean): void;
						public writeStartArray(): void;
						public constructor(param0: number, param1: com.fasterxml.jackson.core.ObjectCodec);
						public writeString(param0: native.Array<string>, param1: number, param2: number): void;
						public writeFieldName(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeEndObject(): void;
						public writeNumber(param0: string): void;
						public writeBoolean(param0: boolean): void;
						public close(): void;
						public _flushBuffer(): void;
						public getOutputTarget(): any;
						public writeFieldName(param0: string): void;
						public _writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: native.Array<number>, param3: number): number;
						public writeStartObject(): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: native.Array<number>, param2: number, param3: number): void;
						public _verifyPrettyValueWrite(param0: string): void;
						public writeNumber(param0: java.math.BigInteger): void;
						public _writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: native.Array<number>, param2: number, param3: number): void;
						public writeNull(): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: number): number;
						public writeBinary(param0: native.Array<number>): void;
						public writeRaw(param0: native.Array<string>, param1: number, param2: number): void;
						public writeNumber(param0: number): void;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number, param2: com.fasterxml.jackson.core.ObjectCodec);
						public writeRaw(param0: string, param1: number, param2: number): void;
						public constructor();
						public writeBinary(param0: java.io.InputStream, param1: number): number;
						public version(): com.fasterxml.jackson.core.Version;
						public writeString(param0: com.fasterxml.jackson.core.SerializableString): void;
						public getOutputBuffered(): number;
						public writeUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public flush(): void;
						public writeStartArray(param0: number): void;
						public _writePPFieldName(param0: string, param1: boolean): void;
						public _verifyValueWrite(param0: string): void;
						public writeRawUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public _releaseBuffers(): void;
						public writeEndArray(): void;
						public writeString(param0: string): void;
						public writeRaw(param0: com.fasterxml.jackson.core.SerializableString): void;
						public _writeFieldName(param0: string, param1: boolean): void;
						public constructor(param0: number, param1: com.fasterxml.jackson.core.ObjectCodec, param2: com.fasterxml.jackson.core.json.JsonWriteContext);
						public writeBinary(param0: native.Array<number>, param1: number, param2: number): void;
						public _writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: native.Array<number>): number;
						public writeRaw(param0: string): void;
						public _writeFieldName(param0: com.fasterxml.jackson.core.SerializableString, param1: boolean): void;
						public constructor(param0: com.fasterxml.jackson.core.io.IOContext, param1: number, param2: com.fasterxml.jackson.core.ObjectCodec, param3: java.io.Writer);
						public writeNumber(param0: java.math.BigDecimal): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace sym {
					export class ByteQuadsCanonicalizer {
						public static class: java.lang.Class<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer>;
						public _parent: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
						public _tableInfo: java.util.concurrent.atomic.AtomicReference<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo>;
						public _intern: boolean;
						public _failOnDoS: boolean;
						public _hashArea: native.Array<number>;
						public _hashSize: number;
						public _secondaryStart: number;
						public _tertiaryStart: number;
						public _tertiaryShift: number;
						public _count: number;
						public _names: native.Array<string>;
						public _spilloverEnd: number;
						public _longNameOffset: number;
						public addName(param0: string, param1: number, param2: number, param3: number): string;
						public findName(param0: number, param1: number, param2: number): string;
						public maybeDirty(): boolean;
						public findName(param0: native.Array<number>, param1: number): string;
						public calcHash(param0: number, param1: number, param2: number): number;
						public calcHash(param0: native.Array<number>, param1: number): number;
						public static createRoot(): com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
						public secondaryCount(): number;
						public size(): number;
						public addName(param0: string, param1: number): string;
						public _reportTooManyCollisions(): void;
						public release(): void;
						public primaryCount(): number;
						public static createRoot(param0: number): com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
						public toString(): string;
						public addName(param0: string, param1: native.Array<number>, param2: number): string;
						public calcHash(param0: number, param1: number): number;
						public makeChild(param0: number): com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
						public tertiaryCount(): number;
						public findName(param0: number, param1: number): string;
						public calcHash(param0: number): number;
						public bucketCount(): number;
						public findName(param0: number): string;
						public hashSeed(): number;
						public totalCount(): number;
						public addName(param0: string, param1: number, param2: number): string;
						public spilloverCount(): number;
					}
					export namespace ByteQuadsCanonicalizer {
						export class TableInfo {
							public static class: java.lang.Class<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo>;
							public size: number;
							public count: number;
							public tertiaryShift: number;
							public mainHash: native.Array<number>;
							public names: native.Array<string>;
							public spilloverEnd: number;
							public longNameOffset: number;
							public constructor(param0: number, param1: number, param2: number, param3: native.Array<number>, param4: native.Array<string>, param5: number, param6: number);
							public constructor(param0: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer);
							public static createInitial(param0: number): com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace sym {
					export class CharsToNameCanonicalizer {
						public static class: java.lang.Class<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer>;
						public static HASH_MULT: number;
						public static DEFAULT_T_SIZE: number;
						public static MAX_T_SIZE: number;
						public _parent: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
						public _flags: number;
						public _canonicalize: boolean;
						public _symbols: native.Array<string>;
						public _buckets: native.Array<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket>;
						public _size: number;
						public _sizeThreshold: number;
						public _indexMask: number;
						public _longestCollisionList: number;
						public _dirty: boolean;
						public _overflows: java.util.BitSet;
						public _hashToIndex(param0: number): number;
						public calcHash(param0: native.Array<string>, param1: number, param2: number): number;
						public calcHash(param0: string): number;
						public maybeDirty(): boolean;
						public reportTooManyCollisions(param0: number): void;
						public release(): void;
						public static createRoot(param0: number): com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
						public makeChild(param0: number): com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
						public maxCollisionLength(): number;
						public findSymbol(param0: native.Array<string>, param1: number, param2: number, param3: number): string;
						public bucketCount(): number;
						public static createRoot(): com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
						public hashSeed(): number;
						public size(): number;
						public collisionCount(): number;
					}
					export namespace CharsToNameCanonicalizer {
						export class Bucket {
							public static class: java.lang.Class<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket>;
							public symbol: string;
							public next: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket;
							public length: number;
							public constructor(param0: string, param1: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket);
							public has(param0: native.Array<string>, param1: number, param2: number): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace sym {
					export abstract class Name {
						public static class: java.lang.Class<com.fasterxml.jackson.core.sym.Name>;
						public _name: string;
						public _hashCode: number;
						public equals(param0: number): boolean;
						public constructor(param0: string, param1: number);
						public equals(param0: number, param1: number): boolean;
						public equals(param0: number, param1: number, param2: number): boolean;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getName(): string;
						public equals(param0: native.Array<number>, param1: number): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace sym {
					export class Name1 extends com.fasterxml.jackson.core.sym.Name {
						public static class: java.lang.Class<com.fasterxml.jackson.core.sym.Name1>;
						public equals(param0: number): boolean;
						public equals(param0: number, param1: number): boolean;
						public equals(param0: number, param1: number, param2: number): boolean;
						public static getEmptyName(): com.fasterxml.jackson.core.sym.Name1;
						public equals(param0: any): boolean;
						public equals(param0: native.Array<number>, param1: number): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace sym {
					export class Name2 extends com.fasterxml.jackson.core.sym.Name {
						public static class: java.lang.Class<com.fasterxml.jackson.core.sym.Name2>;
						public equals(param0: number): boolean;
						public equals(param0: number, param1: number): boolean;
						public equals(param0: number, param1: number, param2: number): boolean;
						public equals(param0: any): boolean;
						public equals(param0: native.Array<number>, param1: number): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace sym {
					export class Name3 extends com.fasterxml.jackson.core.sym.Name {
						public static class: java.lang.Class<com.fasterxml.jackson.core.sym.Name3>;
						public equals(param0: number): boolean;
						public equals(param0: number, param1: number): boolean;
						public equals(param0: number, param1: number, param2: number): boolean;
						public equals(param0: any): boolean;
						public equals(param0: native.Array<number>, param1: number): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace sym {
					export class NameN extends com.fasterxml.jackson.core.sym.Name {
						public static class: java.lang.Class<com.fasterxml.jackson.core.sym.NameN>;
						public equals(param0: number): boolean;
						public static construct(param0: string, param1: number, param2: native.Array<number>, param3: number): com.fasterxml.jackson.core.sym.NameN;
						public equals(param0: number, param1: number): boolean;
						public equals(param0: number, param1: number, param2: number): boolean;
						public equals(param0: any): boolean;
						public equals(param0: native.Array<number>, param1: number): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace type {
					export abstract class ResolvedType {
						public static class: java.lang.Class<com.fasterxml.jackson.core.type.ResolvedType>;
						public hasRawClass(param0: java.lang.Class<any>): boolean;
						public getParameterSource(): java.lang.Class<any>;
						public containedTypeCount(): number;
						public constructor();
						public isFinal(): boolean;
						public isArrayType(): boolean;
						public isAbstract(): boolean;
						public toCanonical(): string;
						public hasGenericTypes(): boolean;
						public isThrowable(): boolean;
						public isMapLikeType(): boolean;
						public isPrimitive(): boolean;
						public containedType(param0: number): com.fasterxml.jackson.core.type.ResolvedType;
						public getContentType(): com.fasterxml.jackson.core.type.ResolvedType;
						public isCollectionLikeType(): boolean;
						public getReferencedType(): com.fasterxml.jackson.core.type.ResolvedType;
						public containedTypeName(param0: number): string;
						public isReferenceType(): boolean;
						public isEnumType(): boolean;
						public isInterface(): boolean;
						public getRawClass(): java.lang.Class<any>;
						public isConcrete(): boolean;
						public isContainerType(): boolean;
						public getKeyType(): com.fasterxml.jackson.core.type.ResolvedType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace type {
					export abstract class TypeReference<T>  extends java.lang.Comparable<com.fasterxml.jackson.core.type.TypeReference<any>> {
						public static class: java.lang.Class<com.fasterxml.jackson.core.type.TypeReference<any>>;
						public _type: java.lang.reflect.Type;
						public getType(): java.lang.reflect.Type;
						public constructor();
						public compareTo(param0: com.fasterxml.jackson.core.type.TypeReference<any>): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class BufferRecycler {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.BufferRecycler>;
						public static BYTE_READ_IO_BUFFER: number;
						public static BYTE_WRITE_ENCODING_BUFFER: number;
						public static BYTE_WRITE_CONCAT_BUFFER: number;
						public static BYTE_BASE64_CODEC_BUFFER: number;
						public static CHAR_TOKEN_BUFFER: number;
						public static CHAR_CONCAT_BUFFER: number;
						public static CHAR_TEXT_BUFFER: number;
						public static CHAR_NAME_COPY_BUFFER: number;
						public _byteBuffers: native.Array<native.Array<number>>;
						public _charBuffers: native.Array<native.Array<string>>;
						public allocByteBuffer(param0: number, param1: number): native.Array<number>;
						public byteBufferLength(param0: number): number;
						public constructor();
						public calloc(param0: number): native.Array<string>;
						public charBufferLength(param0: number): number;
						public releaseCharBuffer(param0: number, param1: native.Array<string>): void;
						public allocByteBuffer(param0: number): native.Array<number>;
						public allocCharBuffer(param0: number, param1: number): native.Array<string>;
						public balloc(param0: number): native.Array<number>;
						public allocCharBuffer(param0: number): native.Array<string>;
						public constructor(param0: number, param1: number);
						public releaseByteBuffer(param0: number, param1: native.Array<number>): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class ByteArrayBuilder {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.ByteArrayBuilder>;
						public static NO_BYTES: native.Array<number>;
						public constructor();
						public getCurrentSegment(): native.Array<number>;
						public close(): void;
						public write(param0: number): void;
						public getCurrentSegmentLength(): number;
						public append(param0: number): void;
						public finishCurrentSegment(): native.Array<number>;
						public flush(): void;
						public resetAndGetFirstSegment(): native.Array<number>;
						public constructor(param0: com.fasterxml.jackson.core.util.BufferRecycler);
						public release(): void;
						public completeAndCoalesce(param0: number): native.Array<number>;
						public toByteArray(): native.Array<number>;
						public appendThreeBytes(param0: number): void;
						public appendTwoBytes(param0: number): void;
						public constructor(param0: number);
						public write(param0: native.Array<number>, param1: number, param2: number): void;
						public constructor(param0: com.fasterxml.jackson.core.util.BufferRecycler, param1: number);
						public setCurrentSegmentLength(param0: number): void;
						public write(param0: native.Array<number>): void;
						public reset(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class DefaultIndenter extends com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.DefaultIndenter>;
						public static SYS_LF: string;
						public static SYSTEM_LINEFEED_INSTANCE: com.fasterxml.jackson.core.util.DefaultIndenter;
						public constructor();
						public getIndent(): string;
						public withLinefeed(param0: string): com.fasterxml.jackson.core.util.DefaultIndenter;
						public getEol(): string;
						public isInline(): boolean;
						public constructor(param0: string, param1: string);
						public withIndent(param0: string): com.fasterxml.jackson.core.util.DefaultIndenter;
						public writeIndentation(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class DefaultPrettyPrinter extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.DefaultPrettyPrinter>;
						public static DEFAULT_ROOT_VALUE_SEPARATOR: com.fasterxml.jackson.core.io.SerializedString;
						public _arrayIndenter: com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter;
						public _objectIndenter: com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter;
						public _rootSeparator: com.fasterxml.jackson.core.SerializableString;
						public _spacesInObjectEntries: boolean;
						public _nesting: number;
						public createInstance(): com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
						public indentObjectsWith(param0: com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter): void;
						public writeRootValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public spacesInObjectEntries(param0: boolean): void;
						public withObjectIndenter(param0: com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter): com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
						public writeStartArray(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor(param0: com.fasterxml.jackson.core.util.DefaultPrettyPrinter, param1: com.fasterxml.jackson.core.SerializableString);
						public writeObjectEntrySeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public beforeArrayValues(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public createInstance(): any;
						public writeEndObject(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
						public withoutSpacesInObjectEntries(): com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
						public _withSpaces(param0: boolean): com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
						public writeObjectFieldValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public withArrayIndenter(param0: com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter): com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
						public writeArrayValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor();
						public withRootSeparator(param0: com.fasterxml.jackson.core.SerializableString): com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
						public beforeObjectEntries(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor(param0: com.fasterxml.jackson.core.util.DefaultPrettyPrinter);
						public writeEndArray(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
						public writeStartObject(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor(param0: com.fasterxml.jackson.core.SerializableString);
						public indentArraysWith(param0: com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter): void;
						public withSpacesInObjectEntries(): com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
						public withRootSeparator(param0: string): com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
						public constructor(param0: string);
					}
					export namespace DefaultPrettyPrinter {
						export class FixedSpaceIndenter extends com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter {
							public static class: java.lang.Class<com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter>;
							public static instance: com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter;
							public constructor();
							public isInline(): boolean;
							public writeIndentation(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
						}
						export class Indenter {
							public static class: java.lang.Class<com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								writeIndentation(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
								isInline(): boolean;
							});
							public constructor();
							public isInline(): boolean;
							public writeIndentation(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
						}
						export class NopIndenter extends com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter {
							public static class: java.lang.Class<com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter>;
							public static instance: com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter;
							public constructor();
							public isInline(): boolean;
							public writeIndentation(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class Instantiatable<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.Instantiatable<any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.core.util.Instantiatable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							createInstance(): T;
						});
						public constructor();
						public createInstance(): T;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class InternCache extends java.util.concurrent.ConcurrentHashMap<string,string> {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.InternCache>;
						public static instance: com.fasterxml.jackson.core.util.InternCache;
						public intern(param0: string): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class JsonGeneratorDelegate extends com.fasterxml.jackson.core.JsonGenerator {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.JsonGeneratorDelegate>;
						public delegate: com.fasterxml.jackson.core.JsonGenerator;
						public delegateCopyMethods: boolean;
						public writeObjectRef(param0: any): void;
						public writeEndObject(): void;
						public close(): void;
						public writeStartObject(): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: native.Array<number>, param2: number, param3: number): void;
						public writeRawValue(param0: native.Array<string>, param1: number, param2: number): void;
						public isClosed(): boolean;
						public writeOmittedField(param0: string): void;
						public writeBinary(param0: native.Array<number>): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: number): number;
						public setCurrentValue(param0: any): void;
						public setFeatureMask(param0: number): com.fasterxml.jackson.core.JsonGenerator;
						public setPrettyPrinter(param0: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.core.JsonGenerator;
						public copyCurrentEvent(param0: com.fasterxml.jackson.core.JsonParser): void;
						public canWriteBinaryNatively(): boolean;
						public writeObject(param0: any): void;
						public writeRaw(param0: string, param1: number, param2: number): void;
						public constructor();
						public setSchema(param0: com.fasterxml.jackson.core.FormatSchema): void;
						public overrideStdFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonGenerator;
						public writeBinary(param0: java.io.InputStream, param1: number): number;
						public getPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
						public writeString(param0: com.fasterxml.jackson.core.SerializableString): void;
						public getOutputContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public flush(): void;
						public getCharacterEscapes(): com.fasterxml.jackson.core.io.CharacterEscapes;
						public canWriteObjectId(): boolean;
						public writeRawValue(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeStartArray(param0: number): void;
						public getFeatureMask(): number;
						public writeRawUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public constructor(param0: com.fasterxml.jackson.core.JsonGenerator);
						public canOmitFields(): boolean;
						public writeEndArray(): void;
						public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
						public canWriteTypeId(): boolean;
						public overrideFormatFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonGenerator;
						public enable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						public canUseSchema(param0: com.fasterxml.jackson.core.FormatSchema): boolean;
						public writeRaw(param0: string): void;
						public useDefaultPrettyPrinter(): com.fasterxml.jackson.core.JsonGenerator;
						public constructor(param0: com.fasterxml.jackson.core.JsonGenerator, param1: boolean);
						public getDelegate(): com.fasterxml.jackson.core.JsonGenerator;
						public writeStartArray(): void;
						public writeString(param0: native.Array<string>, param1: number, param2: number): void;
						public writeFieldName(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeNumber(param0: string): void;
						public writeBoolean(param0: boolean): void;
						public getHighestEscapedChar(): number;
						public getOutputTarget(): any;
						public writeFieldName(param0: string): void;
						public writeNumber(param0: java.math.BigInteger): void;
						public disable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						public writeNull(): void;
						public setCharacterEscapes(param0: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.core.JsonGenerator;
						public writeTree(param0: com.fasterxml.jackson.core.TreeNode): void;
						public writeRaw(param0: native.Array<string>, param1: number, param2: number): void;
						public writeNumber(param0: number): void;
						public getSchema(): com.fasterxml.jackson.core.FormatSchema;
						public writeRawValue(param0: string): void;
						public writeTypeId(param0: any): void;
						public version(): com.fasterxml.jackson.core.Version;
						public setRootValueSeparator(param0: com.fasterxml.jackson.core.SerializableString): com.fasterxml.jackson.core.JsonGenerator;
						public getOutputBuffered(): number;
						public writeUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public getCurrentValue(): any;
						public writeObjectId(param0: any): void;
						public writeString(param0: string): void;
						public writeRaw(param0: com.fasterxml.jackson.core.SerializableString): void;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
						public setHighestNonEscapedChar(param0: number): com.fasterxml.jackson.core.JsonGenerator;
						public writeBinary(param0: native.Array<number>, param1: number, param2: number): void;
						public copyCurrentStructure(param0: com.fasterxml.jackson.core.JsonParser): void;
						public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonGenerator;
						public writeRawValue(param0: string, param1: number, param2: number): void;
						public writeNumber(param0: java.math.BigDecimal): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class JsonParserDelegate extends com.fasterxml.jackson.core.JsonParser {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.JsonParserDelegate>;
						public delegate: com.fasterxml.jackson.core.JsonParser;
						public getBigIntegerValue(): java.math.BigInteger;
						public getNumberValue(): java.lang.Number;
						public hasToken(param0: com.fasterxml.jackson.core.JsonToken): boolean;
						public close(): void;
						public getTextLength(): number;
						public getValueAsLong(param0: number): number;
						public overrideCurrentName(param0: string): void;
						public overrideStdFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonParser;
						public getValueAsLong(): number;
						public disable(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.core.JsonParser;
						public clearCurrentToken(): void;
						public getTextOffset(): number;
						public getDoubleValue(): number;
						public isClosed(): boolean;
						public getTypeId(): any;
						public getShortValue(): number;
						public isExpectedStartObjectToken(): boolean;
						public getCurrentName(): string;
						public setCurrentValue(param0: any): void;
						public hasCurrentToken(): boolean;
						public getLastClearedToken(): com.fasterxml.jackson.core.JsonToken;
						public getCurrentTokenId(): number;
						public constructor();
						public setSchema(param0: com.fasterxml.jackson.core.FormatSchema): void;
						public requiresCustomCodec(): boolean;
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): void;
						public hasTextCharacters(): boolean;
						public canReadObjectId(): boolean;
						public getFeatureMask(): number;
						public getIntValue(): number;
						public getValueAsDouble(): number;
						public getLongValue(): number;
						public getByteValue(): number;
						public hasTokenId(param0: number): boolean;
						public getParsingContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public getValueAsInt(param0: number): number;
						public skipChildren(): com.fasterxml.jackson.core.JsonParser;
						public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
						public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getValueAsDouble(param0: number): number;
						public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public canUseSchema(param0: com.fasterxml.jackson.core.FormatSchema): boolean;
						public isExpectedStartArrayToken(): boolean;
						public getValueAsInt(): number;
						public getValueAsString(): string;
						public getText(): string;
						public getBinaryValue(): native.Array<number>;
						public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getCurrentToken(): com.fasterxml.jackson.core.JsonToken;
						public getValueAsBoolean(param0: boolean): boolean;
						public canReadTypeId(): boolean;
						public setFeatureMask(param0: number): com.fasterxml.jackson.core.JsonParser;
						public getEmbeddedObject(): any;
						public getSchema(): com.fasterxml.jackson.core.FormatSchema;
						public getBooleanValue(): boolean;
						public getInputSource(): any;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
						public version(): com.fasterxml.jackson.core.Version;
						public enable(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.core.JsonParser;
						public readBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.OutputStream): number;
						public getFloatValue(): number;
						public getValueAsBoolean(): boolean;
						public constructor(param0: com.fasterxml.jackson.core.JsonParser);
						public getCurrentValue(): any;
						public getNumberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public getValueAsString(param0: string): string;
						public overrideFormatFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonParser;
						public getTextCharacters(): native.Array<string>;
						public readBinaryValue(param0: java.io.OutputStream): number;
						public nextValue(): com.fasterxml.jackson.core.JsonToken;
						public constructor(param0: number);
						public getDecimalValue(): java.math.BigDecimal;
						public getObjectId(): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class JsonParserSequence extends com.fasterxml.jackson.core.util.JsonParserDelegate {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.JsonParserSequence>;
						public _parsers: native.Array<com.fasterxml.jackson.core.JsonParser>;
						public _nextParser: number;
						public constructor(param0: com.fasterxml.jackson.core.JsonParser);
						public addFlattenedActiveParsers(param0: java.util.List<com.fasterxml.jackson.core.JsonParser>): void;
						public constructor();
						public close(): void;
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public constructor(param0: number);
						public constructor(param0: native.Array<com.fasterxml.jackson.core.JsonParser>);
						public version(): com.fasterxml.jackson.core.Version;
						public switchToNext(): boolean;
						public containedParsersCount(): number;
						public static createFlattened(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.util.JsonParserSequence;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class MinimalPrettyPrinter extends com.fasterxml.jackson.core.PrettyPrinter {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.MinimalPrettyPrinter>;
						public static DEFAULT_ROOT_VALUE_SEPARATOR: string;
						public _rootValueSeparator: string;
						public writeObjectFieldValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeArrayValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor();
						public beforeObjectEntries(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeRootValueSeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeEndArray(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
						public writeStartObject(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeStartArray(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeObjectEntrySeparator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public beforeArrayValues(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeEndObject(param0: com.fasterxml.jackson.core.JsonGenerator, param1: number): void;
						public setRootValueSeparator(param0: string): void;
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class TextBuffer {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.TextBuffer>;
						public getCurrentSegmentSize(): number;
						public setCurrentLength(param0: number): void;
						public contentsAsDouble(): number;
						public resetWithString(param0: string): void;
						public emptyAndGetCurrentSegment(): native.Array<string>;
						public expandCurrentSegment(param0: number): native.Array<string>;
						public append(param0: native.Array<string>, param1: number, param2: number): void;
						public getTextOffset(): number;
						public append(param0: string): void;
						public finishCurrentSegment(): native.Array<string>;
						public getTextBuffer(): native.Array<string>;
						public resetWithCopy(param0: native.Array<string>, param1: number, param2: number): void;
						public contentsAsString(): string;
						public setCurrentAndReturn(param0: number): string;
						public resetWithEmpty(): void;
						public hasTextAsCharacters(): boolean;
						public ensureNotShared(): void;
						public size(): number;
						public resetWithShared(param0: native.Array<string>, param1: number, param2: number): void;
						public contentsAsArray(): native.Array<string>;
						public constructor(param0: com.fasterxml.jackson.core.util.BufferRecycler);
						public toString(): string;
						public expandCurrentSegment(): native.Array<string>;
						public contentsAsDecimal(): java.math.BigDecimal;
						public releaseBuffers(): void;
						public getCurrentSegment(): native.Array<string>;
						public append(param0: string, param1: number, param2: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace core {
				export namespace util {
					export class VersionUtil {
						public static class: java.lang.Class<com.fasterxml.jackson.core.util.VersionUtil>;
						public static parseVersionPart(param0: string): number;
						public constructor();
						public static mavenVersionFor(param0: java.lang.ClassLoader, param1: string, param2: string): com.fasterxml.jackson.core.Version;
						public static throwInternal(): void;
						public version(): com.fasterxml.jackson.core.Version;
						public static parseVersion(param0: string, param1: string, param2: string): com.fasterxml.jackson.core.Version;
						public static versionFor(param0: java.lang.Class<any>): com.fasterxml.jackson.core.Version;
						public static packageVersionFor(param0: java.lang.Class<any>): com.fasterxml.jackson.core.Version;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class AbstractTypeResolver {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.AbstractTypeResolver>;
					public resolveAbstractType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					public constructor();
					public findTypeMapping(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					public resolveAbstractType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JavaType;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class AnnotationIntrospector extends com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.AnnotationIntrospector>;
					public findWrapperName(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
					public findNameForDeserialization(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
					public findDeserializationKeyType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
					public hasIgnoreMarker(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
					public _hasOneOf(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: native.Array<java.lang.Class<any>>): boolean;
					public findPropertyDescription(param0: com.fasterxml.jackson.databind.introspect.Annotated): string;
					public findFormat(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public resolveSetterConflict(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					public findValueInstantiator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
					public findSerializationContentConverter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
					public findSerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public constructor();
					public findClassDescription(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
					public findPropertyIndex(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Integer;
					public findTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
					public _hasAnnotation(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: java.lang.Class<any>): boolean;
					public findSubtypes(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.jsontype.NamedType>;
					public findCreatorBinding(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
					public findSerializationType(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>;
					public findRootName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.PropertyName;
					public isTypeId(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
					public findObjectReferenceInfo(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
					public findAndAddVirtualProperties(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): void;
					public findDeserializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findTypeName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
					public findReferenceType(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
					public findUnwrappingNameTransformer(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.NameTransformer;
					public findObjectIdInfo(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
					public findSerializationInclusion(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
					public findDeserializationContentType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
					public findFilterId(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findContentSerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public refineSerializationType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					public findDeserializationConverter(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findDeserializationType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
					public findNamingStrategy(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
					public version(): com.fasterxml.jackson.core.Version;
					public findPropertiesToIgnore(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: boolean): native.Array<string>;
					public findIgnoreUnknownProperties(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
					public findPOJOBuilderConfig(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
					public findPropertyInclusion(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonInclude.Value;
					public hasAsValueAnnotation(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
					public findKeyDeserializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public allIntrospectors(param0: java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>): java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>;
					public findInjectableValueId(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
					public static pair(param0: com.fasterxml.jackson.databind.AnnotationIntrospector, param1: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public hasAnyGetterAnnotation(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
					public findSerializationTyping(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
					public findSerializationPropertyOrder(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): native.Array<string>;
					public findPropertyTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
					public hasRequiredMarker(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
					public findPropertyAccess(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonProperty.Access;
					public findNameForSerialization(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
					public allIntrospectors(): java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>;
					public findPropertyDefaultValue(param0: com.fasterxml.jackson.databind.introspect.Annotated): string;
					public findSerializationConverter(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public hasAnySetterAnnotation(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
					public findViews(param0: com.fasterxml.jackson.databind.introspect.Annotated): native.Array<java.lang.Class<any>>;
					public findNullSerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findPropertiesToIgnore(param0: com.fasterxml.jackson.databind.introspect.Annotated): native.Array<string>;
					public static nopInstance(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public findPropertyContentTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
					public findKeySerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findSerializationInclusionForContent(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
					public findSerializationContentType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
					public findImplicitPropertyName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): string;
					public findEnumValue(param0: java.lang.Enum<any>): string;
					public refineDeserializationType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					public isIgnorableType(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
					public findDeserializationContentConverter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
					public findPOJOBuilder(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Class<any>;
					public findAutoDetectVisibility(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param1: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
					public findSerializationKeyType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
					public hasCreatorAnnotation(param0: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
					public findContentDeserializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findSerializationSortAlphabetically(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					public findEnumValues(param0: java.lang.Class<any>, param1: native.Array<java.lang.Enum<any>>, param2: native.Array<string>): native.Array<string>;
					public isAnnotationBundle(param0: java.lang.annotation.Annotation): boolean;
					public _findAnnotation(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: java.lang.Class): java.lang.annotation.Annotation;
				}
				export namespace AnnotationIntrospector {
					export class ReferenceProperty {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty>;
						public isBackReference(): boolean;
						public getType(): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
						public static managed(param0: string): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public static back(param0: string): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public isManagedReference(): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type, param1: string);
						public getName(): string;
					}
					export namespace ReferenceProperty {
						export class Type {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type>;
							public static MANAGED_REFERENCE: com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
							public static BACK_REFERENCE: com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
							public static values(): native.Array<com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type>;
							public static valueOf(param0: string): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class BeanDescription {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.BeanDescription>;
					public _type: com.fasterxml.jackson.databind.JavaType;
					public findExpectedFormat(param0: com.fasterxml.jackson.annotation.JsonFormat.Value): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public findSingleArgConstructor(param0: native.Array<java.lang.Class<any>>): java.lang.reflect.Constructor<any>;
					public hasKnownClassAnnotations(): boolean;
					public findBackReferenceProperties(): java.util.Map<string,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
					public findAnySetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					public getObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
					public findMethod(param0: string, param1: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					public findProperties(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
					public getClassInfo(): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
					public findClassDescription(): string;
					public findInjectables(): java.util.Map<any,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
					public findDeserializationConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
					public bindingsForBeanType(): com.fasterxml.jackson.databind.type.TypeBindings;
					public constructor(param0: com.fasterxml.jackson.databind.JavaType);
					public getConstructors(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
					public getBeanClass(): java.lang.Class<any>;
					public getClassAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
					public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					public findDefaultConstructor(): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
					public findPropertyInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
					public findSerializationConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
					public getFactoryMethods(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
					public findPOJOBuilder(): java.lang.Class<any>;
					public findFactoryMethod(param0: native.Array<java.lang.Class<any>>): java.lang.reflect.Method;
					public instantiateBean(param0: boolean): any;
					public findJsonValueMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					public findAnyGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					public getIgnoredPropertyNames(): java.util.Set<string>;
					public findPOJOBuilderConfig(): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
					public getType(): com.fasterxml.jackson.databind.JavaType;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class BeanProperty extends com.fasterxml.jackson.databind.util.Named {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.BeanProperty>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.databind.BeanProperty interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getName(): string;
						getFullName(): com.fasterxml.jackson.databind.PropertyName;
						getType(): com.fasterxml.jackson.databind.JavaType;
						getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						isRequired(): boolean;
						isVirtual(): boolean;
						getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						<clinit>(): void;
						getName(): string;
					});
					public constructor();
					public static EMPTY_FORMAT: com.fasterxml.jackson.annotation.JsonFormat.Value;
					public static EMPTY_INCLUDE: com.fasterxml.jackson.annotation.JsonInclude.Value;
					public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
					public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
					public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
					public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public isRequired(): boolean;
					public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					public getName(): string;
					public getFullName(): com.fasterxml.jackson.databind.PropertyName;
					public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
					public isVirtual(): boolean;
					public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
					public getType(): com.fasterxml.jackson.databind.JavaType;
					public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
				}
				export namespace BeanProperty {
					export class Std extends com.fasterxml.jackson.databind.BeanProperty {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.BeanProperty.Std>;
						public _name: com.fasterxml.jackson.databind.PropertyName;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _wrapperName: com.fasterxml.jackson.databind.PropertyName;
						public _metadata: com.fasterxml.jackson.databind.PropertyMetadata;
						public _member: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _contextAnnotations: com.fasterxml.jackson.databind.util.Annotations;
						public constructor(param0: com.fasterxml.jackson.databind.BeanProperty.Std, param1: com.fasterxml.jackson.databind.JavaType);
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public isRequired(): boolean;
						public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.util.Annotations, param4: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param5: boolean);
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public isVirtual(): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.util.Annotations, param4: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param5: com.fasterxml.jackson.databind.PropertyMetadata);
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public getName(): string;
						public withType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanProperty.Std;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class DatabindContext {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.DatabindContext>;
					public getAttribute(param0: any): any;
					public objectIdResolverInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.annotation.ObjectIdResolver;
					public converterInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.util.Converter<any,any>;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public getLocale(): java.util.Locale;
					public getActiveView(): java.lang.Class<any>;
					public getConfig(): com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
					public getTimeZone(): java.util.TimeZone;
					public objectIdGeneratorInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public constructType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					public constructor();
					public setAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.DatabindContext;
					public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public constructSpecializedType(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public canOverrideAccessModifiers(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class DeserializationConfig extends com.fasterxml.jackson.databind.cfg.MapperConfigBase<com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationConfig> implements java.io.Serializable  {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.DeserializationConfig>;
					public _problemHandlers: com.fasterxml.jackson.databind.util.LinkedNode<com.fasterxml.jackson.databind.deser.DeserializationProblemHandler>;
					public _nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory;
					public _deserFeatures: number;
					public _parserFeatures: number;
					public _parserFeaturesToChange: number;
					public _formatReadFeatures: number;
					public _formatReadFeaturesToChange: number;
					public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): com.fasterxml.jackson.databind.DeserializationConfig;
					public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.DeserializationConfig;
					public getDefaultVisibilityChecker(): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
					public with(param0: java.text.DateFormat): any;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.cfg.BaseSettings);
					public withHandler(param0: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): com.fasterxml.jackson.databind.DeserializationConfig;
					public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public getNodeFactory(): com.fasterxml.jackson.databind.node.JsonNodeFactory;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: number);
					public hasDeserializationFeatures(param0: number): boolean;
					public without(param0: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.DeserializationConfig;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.core.JsonParser.Feature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public withInsertedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
					public without(param0: com.fasterxml.jackson.databind.DeserializationFeature, param1: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.core.FormatFeature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public findTypeDeserializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.PropertyName);
					public with(param0: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): com.fasterxml.jackson.databind.DeserializationConfig;
					public withView(param0: java.lang.Class<any>): any;
					public with(param0: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.DeserializationConfig;
					public getDefaultPropertyInclusion(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
					public with(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): com.fasterxml.jackson.databind.DeserializationConfig;
					public withRootName(param0: string): any;
					public initialize(param0: com.fasterxml.jackson.core.JsonParser): void;
					public withAppendedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
					public introspect(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public constructor(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
					public with(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): any;
					public with(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.core.JsonParser.Feature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>);
					public hasSomeOfFeatures(param0: number): boolean;
					public isEnabled(param0: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
					public introspectForBuilder(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>);
					public constructor(param0: com.fasterxml.jackson.databind.cfg.BaseSettings, param1: number);
					public with(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): any;
					public with(param0: com.fasterxml.jackson.databind.DeserializationFeature, param1: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public introspectDirectClassAnnotations(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.BeanDescription;
					public with(param0: java.util.Locale): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.core.Base64Variant): any;
					public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.type.TypeFactory): any;
					public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
					public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): any;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: number);
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: java.lang.Class<any>);
					public with(param0: java.util.TimeZone): com.fasterxml.jackson.databind.DeserializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, param2: com.fasterxml.jackson.databind.util.RootNameLookup);
					public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature, param1: com.fasterxml.jackson.core.JsonFactory): boolean;
					public getProblemHandlers(): com.fasterxml.jackson.databind.util.LinkedNode<com.fasterxml.jackson.databind.deser.DeserializationProblemHandler>;
					public with(param0: java.util.Locale): any;
					public withView(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.DeserializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, param2: com.fasterxml.jackson.databind.util.RootNameLookup);
					public with(param0: java.util.TimeZone): any;
					public with(param0: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): any;
					public with(param0: java.text.DateFormat): com.fasterxml.jackson.databind.DeserializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.cfg.ContextAttributes);
					public without(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public without(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): any;
					public without(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.databind.DeserializationConfig;
					public getBaseSettings(): com.fasterxml.jackson.databind.cfg.BaseSettings;
					public useRootWrapping(): boolean;
					public introspectForCreation(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public with(param0: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): any;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.jsontype.SubtypeResolver);
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.cfg.BaseSettings);
					public with(param0: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): any;
					public withAppendedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.DeserializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.cfg.ContextAttributes);
					public getDeserializationFeatures(): number;
					public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public introspectClassAnnotations(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.BeanDescription;
					public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.BaseSettings, param1: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, param2: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, param3: com.fasterxml.jackson.databind.util.RootNameLookup);
					public with(param0: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.DeserializationConfig;
					public without(param0: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.DeserializationConfig;
					public withInsertedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.DeserializationConfig;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public with(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.databind.DeserializationConfig;
					public introspectClassAnnotations(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public with(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): any;
					public withNoProblemHandlers(): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): any;
					public getDefaultPropertyInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
					public with(param0: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): any;
					public with(param0: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public introspectDirectClassAnnotations(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public with(param0: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): any;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.core.FormatFeature>): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.DeserializationConfig;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class DeserializationContext extends com.fasterxml.jackson.databind.DatabindContext {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.DeserializationContext>;
					public _cache: com.fasterxml.jackson.databind.deser.DeserializerCache;
					public _factory: com.fasterxml.jackson.databind.deser.DeserializerFactory;
					public _config: com.fasterxml.jackson.databind.DeserializationConfig;
					public _featureFlags: number;
					public _view: java.lang.Class<any>;
					public _parser: com.fasterxml.jackson.core.JsonParser;
					public _injectableValues: com.fasterxml.jackson.databind.InjectableValues;
					public _arrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders;
					public _objectBuffer: com.fasterxml.jackson.databind.util.ObjectBuffer;
					public _dateFormat: java.text.DateFormat;
					public _attributes: com.fasterxml.jackson.databind.cfg.ContextAttributes;
					public _currentType: com.fasterxml.jackson.databind.util.LinkedNode<com.fasterxml.jackson.databind.JavaType>;
					public returnObjectBuffer(param0: com.fasterxml.jackson.databind.util.ObjectBuffer): void;
					public getBase64Variant(): com.fasterxml.jackson.core.Base64Variant;
					public weirdKeyException(param0: java.lang.Class<any>, param1: string, param2: string): com.fasterxml.jackson.databind.JsonMappingException;
					public handleUnknownProperty(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: any, param3: string): boolean;
					public readPropertyValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JavaType): any;
					public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param2: com.fasterxml.jackson.annotation.ObjectIdResolver): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
					public constructType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public mappingException(param0: string): com.fasterxml.jackson.databind.JsonMappingException;
					public constructor(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.core.JsonParser, param3: com.fasterxml.jackson.databind.InjectableValues);
					public deserializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
					public constructor();
					public constructor(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory, param1: com.fasterxml.jackson.databind.deser.DeserializerCache);
					public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public canOverrideAccessModifiers(): boolean;
					public getNodeFactory(): com.fasterxml.jackson.databind.node.JsonNodeFactory;
					public findContextualValueDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public hasDeserializationFeatures(param0: number): boolean;
					public instantiationException(param0: java.lang.Class<any>, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
					public unknownTypeException(param0: com.fasterxml.jackson.databind.JavaType, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
					public determineClassName(param0: any): string;
					public _quotedString(param0: string): string;
					public mappingException(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonMappingException;
					public findInjectableValue(param0: any, param1: com.fasterxml.jackson.databind.BeanProperty, param2: any): any;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.JavaType): any;
					public leaseObjectBuffer(): com.fasterxml.jackson.databind.util.ObjectBuffer;
					public getDateFormat(): java.text.DateFormat;
					public handlePrimaryContextualization(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public getDeserializationFeatures(): number;
					public constructor(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory);
					public getArrayBuilders(): com.fasterxml.jackson.databind.util.ArrayBuilders;
					public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public constructType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					public _valueDesc(): string;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Class): any;
					public hasValueDeserializerFor(param0: com.fasterxml.jackson.databind.JavaType): boolean;
					public findRootValueDeserializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public getAttribute(param0: any): any;
					public _calcName(param0: java.lang.Class<any>): string;
					public keyDeserializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.KeyDeserializer;
					public readPropertyValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Class): any;
					public wrongTokenException(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.JsonToken, param2: string): com.fasterxml.jackson.databind.JsonMappingException;
					public findKeyDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.KeyDeserializer;
					public constructCalendar(param0: java.util.Date): java.util.Calendar;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public hasSomeOfFeatures(param0: number): boolean;
					public hasValueDeserializerFor(param0: com.fasterxml.jackson.databind.JavaType, param1: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
					public mappingException(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.core.JsonToken): com.fasterxml.jackson.databind.JsonMappingException;
					public handleSecondaryContextualization(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public getLocale(): java.util.Locale;
					public isEnabled(param0: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
					public constructor(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory);
					public getActiveView(): java.lang.Class<any>;
					public getConfig(): com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
					public getTimeZone(): java.util.TimeZone;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public parseDate(param0: string): java.util.Date;
					public endOfInputException(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonMappingException;
					public setAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.DatabindContext;
					public findClass(param0: string): java.lang.Class<any>;
					public getParser(): com.fasterxml.jackson.core.JsonParser;
					public getFactory(): com.fasterxml.jackson.databind.deser.DeserializerFactory;
					public getConfig(): com.fasterxml.jackson.databind.DeserializationConfig;
					public setAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.DeserializationContext;
					public weirdNumberException(param0: java.lang.Number, param1: java.lang.Class<any>, param2: string): com.fasterxml.jackson.databind.JsonMappingException;
					public getContextualType(): com.fasterxml.jackson.databind.JavaType;
					public handleSecondaryContextualization(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public unknownTypeException(param0: com.fasterxml.jackson.databind.JavaType, param1: string, param2: string): com.fasterxml.jackson.databind.JsonMappingException;
					public mappingException(param0: string, param1: native.Array<any>): com.fasterxml.jackson.databind.JsonMappingException;
					public instantiationException(param0: java.lang.Class<any>, param1: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					public reportUnknownProperty(param0: any, param1: string, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>): void;
					public weirdStringException(param0: string, param1: java.lang.Class<any>, param2: string): com.fasterxml.jackson.databind.JsonMappingException;
					public _desc(param0: string): string;
					public findNonContextualValueDeserializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public checkUnresolvedObjectId(): void;
					public handlePrimaryContextualization(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public constructor(param0: com.fasterxml.jackson.databind.DeserializationContext);
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class DeserializationFeature extends com.fasterxml.jackson.databind.cfg.ConfigFeature {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.DeserializationFeature>;
					public static USE_BIG_DECIMAL_FOR_FLOATS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static USE_BIG_INTEGER_FOR_INTS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static USE_LONG_FOR_INTS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static USE_JAVA_ARRAY_FOR_JSON_ARRAY: com.fasterxml.jackson.databind.DeserializationFeature;
					public static READ_ENUMS_USING_TO_STRING: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_UNKNOWN_PROPERTIES: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_NULL_FOR_PRIMITIVES: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_NUMBERS_FOR_ENUMS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_INVALID_SUBTYPE: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_READING_DUP_TREE_KEY: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_IGNORED_PROPERTIES: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_UNRESOLVED_OBJECT_IDS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_MISSING_CREATOR_PROPERTIES: com.fasterxml.jackson.databind.DeserializationFeature;
					public static WRAP_EXCEPTIONS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ACCEPT_SINGLE_VALUE_AS_ARRAY: com.fasterxml.jackson.databind.DeserializationFeature;
					public static UNWRAP_SINGLE_VALUE_ARRAYS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static UNWRAP_ROOT_VALUE: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ACCEPT_FLOAT_AS_INT: com.fasterxml.jackson.databind.DeserializationFeature;
					public static READ_UNKNOWN_ENUM_VALUES_AS_NULL: com.fasterxml.jackson.databind.DeserializationFeature;
					public static READ_DATE_TIMESTAMPS_AS_NANOSECONDS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ADJUST_DATES_TO_CONTEXT_TIME_ZONE: com.fasterxml.jackson.databind.DeserializationFeature;
					public static EAGER_DESERIALIZER_FETCH: com.fasterxml.jackson.databind.DeserializationFeature;
					public static valueOf(param0: string): com.fasterxml.jackson.databind.DeserializationFeature;
					public enabledIn(param0: number): boolean;
					public getMask(): number;
					public static values(): native.Array<com.fasterxml.jackson.databind.DeserializationFeature>;
					public enabledByDefault(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class InjectableValues {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.InjectableValues>;
					public constructor();
					public findInjectableValue(param0: any, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.BeanProperty, param3: any): any;
				}
				export namespace InjectableValues {
					export class Std extends com.fasterxml.jackson.databind.InjectableValues {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.InjectableValues.Std>;
						public _values: java.util.Map<string,any>;
						public addValue(param0: string, param1: any): com.fasterxml.jackson.databind.InjectableValues.Std;
						public constructor();
						public constructor(param0: java.util.Map<string,any>);
						public addValue(param0: java.lang.Class<any>, param1: any): com.fasterxml.jackson.databind.InjectableValues.Std;
						public findInjectableValue(param0: any, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.BeanProperty, param3: any): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class JavaType extends com.fasterxml.jackson.core.type.ResolvedType {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JavaType>;
					public _class: java.lang.Class<any>;
					public _hash: number;
					public _valueHandler: any;
					public _typeHandler: any;
					public _asStatic: boolean;
					public getContentType(): com.fasterxml.jackson.databind.JavaType;
					public getKeyType(): com.fasterxml.jackson.databind.JavaType;
					public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
					public containedTypeOrUnknown(param0: number): com.fasterxml.jackson.databind.JavaType;
					public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
					public getInterfaces(): java.util.List<com.fasterxml.jackson.databind.JavaType>;
					public getErasedSignature(): string;
					public constructor();
					public getValueHandler(): any;
					public isThrowable(): boolean;
					public getTypeHandler(): any;
					public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
					public isFinal(): boolean;
					public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
					public getSuperClass(): com.fasterxml.jackson.databind.JavaType;
					public findTypeParameters(param0: java.lang.Class<any>): native.Array<com.fasterxml.jackson.databind.JavaType>;
					public isInterface(): boolean;
					public getContentValueHandler(): any;
					public isPrimitive(): boolean;
					public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public isJavaLangObject(): boolean;
					public getReferencedType(): com.fasterxml.jackson.databind.JavaType;
					public isEnumType(): boolean;
					public getKeyType(): com.fasterxml.jackson.core.type.ResolvedType;
					public containedTypeName(param0: number): string;
					public isArrayType(): boolean;
					public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
					public isConcrete(): boolean;
					public findSuperType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
					public isMapLikeType(): boolean;
					public getContentType(): com.fasterxml.jackson.core.type.ResolvedType;
					public hasRawClass(param0: java.lang.Class<any>): boolean;
					public toString(): string;
					public containedType(param0: number): com.fasterxml.jackson.databind.JavaType;
					public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
					public getParameterSource(): java.lang.Class<any>;
					public isCollectionLikeType(): boolean;
					public hashCode(): number;
					public constructor(param0: com.fasterxml.jackson.databind.JavaType);
					public containedTypeCount(): number;
					public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
					public isContainerType(): boolean;
					public hasGenericTypes(): boolean;
					public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
					public getBindings(): com.fasterxml.jackson.databind.type.TypeBindings;
					public isAbstract(): boolean;
					public equals(param0: any): boolean;
					public containedType(param0: number): com.fasterxml.jackson.core.type.ResolvedType;
					public getContentTypeHandler(): any;
					public isTypeOrSubTypeOf(param0: java.lang.Class<any>): boolean;
					public forcedNarrowBy(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public useStaticType(): boolean;
					public hasValueHandler(): boolean;
					public getRawClass(): java.lang.Class<any>;
					public getReferencedType(): com.fasterxml.jackson.core.type.ResolvedType;
					public getGenericSignature(): string;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class JsonDeserializer<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonDeserializer<any>>;
					public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): T;
					public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
					public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<T>;
					public getEmptyValue(): T;
					public isCachable(): boolean;
					public replaceDelegatee(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public getEmptyValue(param0: com.fasterxml.jackson.databind.DeserializationContext): T;
					public getNullValue(): T;
					public getDelegatee(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public findBackReference(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
					public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): T;
					public getKnownPropertyNames(): java.util.Collection<any>;
					public constructor();
					public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: T): T;
					public handledType(): java.lang.Class<any>;
					public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
				}
				export namespace JsonDeserializer {
					export abstract class None extends com.fasterxml.jackson.databind.JsonDeserializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonDeserializer.None>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class JsonMappingException extends com.fasterxml.jackson.core.JsonProcessingException {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonMappingException>;
					public _path: java.util.LinkedList<com.fasterxml.jackson.databind.JsonMappingException.Reference>;
					public _processor: java.io.Closeable;
					public _appendPathDesc(param0: java.lang.StringBuilder): void;
					public constructor(param0: java.io.Closeable, param1: string);
					public constructor(param0: string);
					public static from(param0: com.fasterxml.jackson.core.JsonGenerator, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
					public static from(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					public prependPath(param0: com.fasterxml.jackson.databind.JsonMappingException.Reference): void;
					public getPathReference(param0: java.lang.StringBuilder): java.lang.StringBuilder;
					public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					public toString(): string;
					public static from(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
					public prependPath(param0: any, param1: string): void;
					public constructor(param0: java.io.Closeable, param1: string, param2: java.lang.Throwable);
					public static wrapWithPath(param0: java.lang.Throwable, param1: any, param2: number): com.fasterxml.jackson.databind.JsonMappingException;
					public getPathReference(): string;
					public static fromUnexpectedIOE(param0: java.io.IOException): com.fasterxml.jackson.databind.JsonMappingException;
					public getPath(): java.util.List<com.fasterxml.jackson.databind.JsonMappingException.Reference>;
					public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Throwable);
					public prependPath(param0: any, param1: number): void;
					public static from(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
					public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation);
					public getLocalizedMessage(): string;
					public static from(param0: com.fasterxml.jackson.core.JsonGenerator, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					public _buildMessage(): string;
					public static wrapWithPath(param0: java.lang.Throwable, param1: any, param2: string): com.fasterxml.jackson.databind.JsonMappingException;
					public constructor(param0: java.io.Closeable, param1: string, param2: com.fasterxml.jackson.core.JsonLocation);
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: java.lang.Throwable);
					public getMessage(): string;
					public static from(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
					public static wrapWithPath(param0: java.lang.Throwable, param1: com.fasterxml.jackson.databind.JsonMappingException.Reference): com.fasterxml.jackson.databind.JsonMappingException;
				}
				export namespace JsonMappingException {
					export class Reference {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonMappingException.Reference>;
						public _from: any;
						public _fieldName: string;
						public _index: number;
						public constructor();
						public getFrom(): any;
						public setFieldName(param0: string): void;
						public setFrom(param0: any): void;
						public constructor(param0: any, param1: string);
						public constructor(param0: any);
						public setIndex(param0: number): void;
						public getIndex(): number;
						public getFieldName(): string;
						public toString(): string;
						public constructor(param0: any, param1: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class JsonNode extends com.fasterxml.jackson.databind.JsonSerializable.Base {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonNode>;
					public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
					public isObject(): boolean;
					public asDouble(param0: number): number;
					public asLong(param0: number): number;
					public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
					public asText(param0: string): string;
					public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
					public _at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
					public canConvertToInt(): boolean;
					public findParents(param0: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
					public asInt(param0: number): number;
					public get(param0: number): com.fasterxml.jackson.core.TreeNode;
					public isPojo(): boolean;
					public size(): number;
					public bigIntegerValue(): java.math.BigInteger;
					public asDouble(): number;
					public constructor();
					public fieldNames(): java.util.Iterator<string>;
					public findParent(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public isTextual(): boolean;
					public hasNonNull(param0: number): boolean;
					public numberValue(): java.lang.Number;
					public isDouble(): boolean;
					public findValuesAsText(param0: string): java.util.List<string>;
					public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
					public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
					public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
					public isBoolean(): boolean;
					public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
					public isBinary(): boolean;
					public isNumber(): boolean;
					public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
					public path(param0: string): com.fasterxml.jackson.core.TreeNode;
					public isInt(): boolean;
					public asInt(): number;
					public findValues(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
					public canConvertToLong(): boolean;
					public with(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public get(param0: string): com.fasterxml.jackson.core.TreeNode;
					public isBigInteger(): boolean;
					public longValue(): number;
					public at(param0: string): com.fasterxml.jackson.core.TreeNode;
					public has(param0: number): boolean;
					public elements(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
					public binaryValue(): native.Array<number>;
					public asText(): string;
					public asLong(): number;
					public findValue(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public path(param0: number): com.fasterxml.jackson.core.TreeNode;
					public doubleValue(): number;
					public findPath(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public fields(): java.util.Iterator<java.util.Map.Entry<string,com.fasterxml.jackson.databind.JsonNode>>;
					public findValuesAsText(param0: string, param1: java.util.List<string>): java.util.List<string>;
					public asToken(): com.fasterxml.jackson.core.JsonToken;
					public isNull(): boolean;
					public has(param0: string): boolean;
					public asBoolean(param0: boolean): boolean;
					public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
					public intValue(): number;
					public toString(): string;
					public hasNonNull(param0: string): boolean;
					public findValues(param0: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
					public isFloat(): boolean;
					public isIntegralNumber(): boolean;
					public isFloatingPointNumber(): boolean;
					public findParents(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
					public isMissingNode(): boolean;
					public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
					public decimalValue(): java.math.BigDecimal;
					public isArray(): boolean;
					public shortValue(): number;
					public asBoolean(): boolean;
					public textValue(): string;
					public isValueNode(): boolean;
					public isShort(): boolean;
					public floatValue(): number;
					public traverse(): com.fasterxml.jackson.core.JsonParser;
					public withArray(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public isBigDecimal(): boolean;
					public equals(param0: any): boolean;
					public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public booleanValue(): boolean;
					public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
					public isLong(): boolean;
					public isContainerNode(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class JsonSerializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonSerializable>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.databind.JsonSerializable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					});
					public constructor();
					public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
				}
				export namespace JsonSerializable {
					export abstract class Base extends com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonSerializable.Base>;
						public constructor();
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider): boolean;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class JsonSerializer<T>  extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonSerializer<any>>;
					public usesObjectId(): boolean;
					public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
					public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
					public isEmpty(param0: any): boolean;
					public properties(): java.util.Iterator<com.fasterxml.jackson.databind.ser.PropertyWriter>;
					public replaceDelegatee(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
					public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					public constructor();
					public unwrappingSerializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public handledType(): java.lang.Class<any>;
					public withFilterId(param0: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public isUnwrappingSerializer(): boolean;
					public getDelegatee(): com.fasterxml.jackson.databind.JsonSerializer<any>;
				}
				export namespace JsonSerializer {
					export abstract class None extends com.fasterxml.jackson.databind.JsonSerializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonSerializer.None>;
						public constructor();
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class KeyDeserializer {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.KeyDeserializer>;
					public constructor();
					public deserializeKey(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
				}
				export namespace KeyDeserializer {
					export abstract class None extends com.fasterxml.jackson.databind.KeyDeserializer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.KeyDeserializer.None>;
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class MapperFeature extends com.fasterxml.jackson.databind.cfg.ConfigFeature {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.MapperFeature>;
					public static USE_ANNOTATIONS: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_CREATORS: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_FIELDS: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_GETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_IS_GETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_SETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static REQUIRE_SETTERS_FOR_GETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static USE_GETTERS_AS_SETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static CAN_OVERRIDE_ACCESS_MODIFIERS: com.fasterxml.jackson.databind.MapperFeature;
					public static OVERRIDE_PUBLIC_ACCESS_MODIFIERS: com.fasterxml.jackson.databind.MapperFeature;
					public static INFER_PROPERTY_MUTATORS: com.fasterxml.jackson.databind.MapperFeature;
					public static ALLOW_FINAL_FIELDS_AS_MUTATORS: com.fasterxml.jackson.databind.MapperFeature;
					public static PROPAGATE_TRANSIENT_MARKER: com.fasterxml.jackson.databind.MapperFeature;
					public static USE_STATIC_TYPING: com.fasterxml.jackson.databind.MapperFeature;
					public static DEFAULT_VIEW_INCLUSION: com.fasterxml.jackson.databind.MapperFeature;
					public static SORT_PROPERTIES_ALPHABETICALLY: com.fasterxml.jackson.databind.MapperFeature;
					public static ACCEPT_CASE_INSENSITIVE_PROPERTIES: com.fasterxml.jackson.databind.MapperFeature;
					public static USE_WRAPPER_NAME_AS_PROPERTY_NAME: com.fasterxml.jackson.databind.MapperFeature;
					public static USE_STD_BEAN_NAMING: com.fasterxml.jackson.databind.MapperFeature;
					public static ALLOW_EXPLICIT_PROPERTY_RENAMING: com.fasterxml.jackson.databind.MapperFeature;
					public static IGNORE_DUPLICATE_namespace_REGISTRATIONS: com.fasterxml.jackson.databind.MapperFeature;
					public enabledIn(param0: number): boolean;
					public getMask(): number;
					public static valueOf(param0: string): com.fasterxml.jackson.databind.MapperFeature;
					public static values(): native.Array<com.fasterxml.jackson.databind.MapperFeature>;
					public enabledByDefault(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class MappingIterator<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.MappingIterator<any>>;
					public static EMPTY_ITERATOR: com.fasterxml.jackson.databind.MappingIterator<any>;
					public static STATE_CLOSED: number;
					public static STATE_NEED_RESYNC: number;
					public static STATE_MAY_HAVE_VALUE: number;
					public static STATE_HAS_VALUE: number;
					public _type: com.fasterxml.jackson.databind.JavaType;
					public _context: com.fasterxml.jackson.databind.DeserializationContext;
					public _deserializer: com.fasterxml.jackson.databind.JsonDeserializer<T>;
					public _parser: com.fasterxml.jackson.core.JsonParser;
					public _seqContext: com.fasterxml.jackson.core.JsonStreamContext;
					public _updatedValue: T;
					public _closeParser: boolean;
					public _state: number;
					public readAll(param0: java.util.List): java.util.List;
					public nextValue(): T;
					public getParserSchema(): com.fasterxml.jackson.core.FormatSchema;
					public hasNextValue(): boolean;
					public next(): T;
					public hasNext(): boolean;
					public remove(): void;
					public readAll(param0: java.util.Collection): java.util.Collection;
					public _handleMappingException(param0: com.fasterxml.jackson.databind.JsonMappingException): any;
					public readAll(): java.util.List<T>;
					public _resync(): void;
					public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.core.JsonParser, param2: com.fasterxml.jackson.databind.DeserializationContext, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: boolean, param5: any);
					public close(): void;
					public _handleIOException(param0: java.io.IOException): any;
					public static emptyIterator(): com.fasterxml.jackson.databind.MappingIterator<any>;
					public _throwNoSuchElement(): any;
					public getParser(): com.fasterxml.jackson.core.JsonParser;
					public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class MappingJsonFactory extends com.fasterxml.jackson.core.JsonFactory {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.MappingJsonFactory>;
					public constructor(param0: com.fasterxml.jackson.core.JsonFactory, param1: com.fasterxml.jackson.databind.ObjectMapper);
					public constructor(param0: com.fasterxml.jackson.core.ObjectCodec);
					public copy(): com.fasterxml.jackson.core.JsonFactory;
					public getCodec(): com.fasterxml.jackson.databind.ObjectMapper;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectMapper);
					public constructor();
					public constructor(param0: com.fasterxml.jackson.core.JsonFactory, param1: com.fasterxml.jackson.core.ObjectCodec);
					public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
					public version(): com.fasterxml.jackson.core.Version;
					public getFormatName(): string;
					public hasFormat(param0: com.fasterxml.jackson.core.format.InputAccessor): com.fasterxml.jackson.core.format.MatchStrength;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class namespace extends com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.namespace>;
					public setupnamespace(param0: com.fasterxml.jackson.databind.namespace.SetupContext): void;
					public constructor();
					public getnamespaceName(): string;
					public version(): com.fasterxml.jackson.core.Version;
					public getTypeId(): any;
				}
				export namespace namespace {
					export class SetupContext {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.namespace.SetupContext>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.namespace$SetupContext interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getMapperVersion(): com.fasterxml.jackson.core.Version;
							getOwner(): com.fasterxml.jackson.core.ObjectCodec;
							getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
							isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
							isEnabled(param0: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
							isEnabled(param0: com.fasterxml.jackson.databind.SerializationFeature): boolean;
							isEnabled(param0: com.fasterxml.jackson.core.JsonFactory.Feature): boolean;
							isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
							isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
							addDeserializers(param0: com.fasterxml.jackson.databind.deser.Deserializers): void;
							addKeyDeserializers(param0: com.fasterxml.jackson.databind.deser.KeyDeserializers): void;
							addSerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): void;
							addKeySerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): void;
							addBeanDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): void;
							addBeanSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): void;
							addAbstractTypeResolver(param0: com.fasterxml.jackson.databind.AbstractTypeResolver): void;
							addTypeModifier(param0: com.fasterxml.jackson.databind.type.TypeModifier): void;
							addValueInstantiators(param0: com.fasterxml.jackson.databind.deser.ValueInstantiators): void;
							setClassIntrospector(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): void;
							insertAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
							appendAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
							registerSubtypes(param0: native.Array<java.lang.Class<any>>): void;
							registerSubtypes(param0: native.Array<com.fasterxml.jackson.databind.jsontype.NamedType>): void;
							setMixInAnnotations(param0: java.lang.Class<any>, param1: java.lang.Class<any>): void;
							addDeserializationProblemHandler(param0: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): void;
							setNamingStrategy(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): void;
						});
						public constructor();
						public addDeserializers(param0: com.fasterxml.jackson.databind.deser.Deserializers): void;
						public registerSubtypes(param0: native.Array<java.lang.Class<any>>): void;
						public registerSubtypes(param0: native.Array<com.fasterxml.jackson.databind.jsontype.NamedType>): void;
						public addSerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): void;
						public addBeanSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): void;
						public isEnabled(param0: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
						public insertAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
						public addDeserializationProblemHandler(param0: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): void;
						public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
						public addKeySerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): void;
						public addBeanDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): void;
						public setNamingStrategy(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): void;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonFactory.Feature): boolean;
						public getOwner(): com.fasterxml.jackson.core.ObjectCodec;
						public setClassIntrospector(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): void;
						public addAbstractTypeResolver(param0: com.fasterxml.jackson.databind.AbstractTypeResolver): void;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
						public setMixInAnnotations(param0: java.lang.Class<any>, param1: java.lang.Class<any>): void;
						public addTypeModifier(param0: com.fasterxml.jackson.databind.type.TypeModifier): void;
						public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
						public getMapperVersion(): com.fasterxml.jackson.core.Version;
						public appendAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
						public isEnabled(param0: com.fasterxml.jackson.databind.SerializationFeature): boolean;
						public addValueInstantiators(param0: com.fasterxml.jackson.databind.deser.ValueInstantiators): void;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
						public addKeyDeserializers(param0: com.fasterxml.jackson.databind.deser.KeyDeserializers): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class ObjectMapper extends com.fasterxml.jackson.core.ObjectCodec implements com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectMapper>;
					public static DEFAULT_ANNOTATION_INTROSPECTOR: com.fasterxml.jackson.databind.AnnotationIntrospector;
					public static STD_VISIBILITY_CHECKER: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
					public static DEFAULT_BASE: com.fasterxml.jackson.databind.cfg.BaseSettings;
					public _jsonFactory: com.fasterxml.jackson.core.JsonFactory;
					public _typeFactory: com.fasterxml.jackson.databind.type.TypeFactory;
					public _injectableValues: com.fasterxml.jackson.databind.InjectableValues;
					public _subtypeResolver: com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
					public _mixIns: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
					public _serializationConfig: com.fasterxml.jackson.databind.SerializationConfig;
					public _serializerFactory: com.fasterxml.jackson.databind.ser.SerializerFactory;
					public _deserializationConfig: com.fasterxml.jackson.databind.DeserializationConfig;
					public _deserializationContext: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					public _registerednamespaceTypes: java.util.Set<any>;
					public _rootDeserializers: java.util.concurrent.ConcurrentHashMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
					public registernamespaces(param0: java.lang.Iterable<com.fasterxml.jackson.databind.namespace>): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(param0: java.net.URL, param1: java.lang.Class): any;
					public enableDefaultTypingAsProperty(param0: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, param1: string): com.fasterxml.jackson.databind.ObjectMapper;
					public static findnamespaces(param0: java.lang.ClassLoader): java.util.List<com.fasterxml.jackson.databind.namespace>;
					public constructor(param0: com.fasterxml.jackson.core.JsonFactory, param1: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider, param2: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext);
					public valueToTree(param0: any): com.fasterxml.jackson.databind.JsonNode;
					public writer(param0: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.databind.ObjectWriter;
					public constructor();
					public enableDefaultTyping(): com.fasterxml.jackson.databind.ObjectMapper;
					public reader(param0: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.ObjectReader;
					public static findnamespaces(): java.util.List<com.fasterxml.jackson.databind.namespace>;
					public getNodeFactory(): com.fasterxml.jackson.databind.node.JsonNodeFactory;
					public _newWriter(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectWriter;
					public configure(param0: com.fasterxml.jackson.databind.DeserializationFeature, param1: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.JavaType): any;
					public readTree(param0: java.io.File): com.fasterxml.jackson.databind.JsonNode;
					public configure(param0: com.fasterxml.jackson.databind.SerializationFeature, param1: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public setPropertyNamingStrategy(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): com.fasterxml.jackson.databind.ObjectMapper;
					public writeValue(param0: java.io.Writer, param1: any): void;
					public _configAndWriteValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any, param2: java.lang.Class<any>): void;
					public getSerializerProviderInstance(): com.fasterxml.jackson.databind.SerializerProvider;
					public writeValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any): void;
					public readerForUpdating(param0: any): com.fasterxml.jackson.databind.ObjectReader;
					public configure(param0: com.fasterxml.jackson.core.JsonGenerator.Feature, param1: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public setVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.ObjectMapper;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Class): java.util.Iterator;
					public setSerializationInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.ResolvedType): any;
					public readTree(param0: native.Array<number>): com.fasterxml.jackson.databind.JsonNode;
					public getFactory(): com.fasterxml.jackson.core.JsonFactory;
					public writer(param0: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(param0: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
					public convertValue(param0: any, param1: java.lang.Class): any;
					public readValue(param0: native.Array<number>, param1: java.lang.Class): any;
					public registerSubtypes(param0: native.Array<com.fasterxml.jackson.databind.jsontype.NamedType>): void;
					public writeValue(param0: java.io.OutputStream, param1: any): void;
					public getPropertyNamingStrategy(): com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public convertValue(param0: any, param1: com.fasterxml.jackson.databind.JavaType): any;
					public reader(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public disable(param0: com.fasterxml.jackson.databind.DeserializationFeature, param1: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(param0: string, param1: com.fasterxml.jackson.databind.JavaType): any;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonFactory.Feature): boolean;
					public readValue(param0: java.io.Reader, param1: com.fasterxml.jackson.databind.JavaType): any;
					public setDateFormat(param0: java.text.DateFormat): com.fasterxml.jackson.databind.ObjectMapper;
					public writer(param0: com.fasterxml.jackson.databind.SerializationFeature, param1: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.ObjectWriter;
					public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
					public _readValue(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.core.JsonParser, param2: com.fasterxml.jackson.databind.JavaType): any;
					public copy(): com.fasterxml.jackson.databind.ObjectMapper;
					public setPropertyInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.ObjectMapper;
					public setConfig(param0: com.fasterxml.jackson.databind.SerializationConfig): com.fasterxml.jackson.databind.ObjectMapper;
					public writer(): com.fasterxml.jackson.databind.ObjectWriter;
					public _verifySchemaType(param0: com.fasterxml.jackson.core.FormatSchema): void;
					public enable(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(param0: string, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public _serializerProvider(param0: com.fasterxml.jackson.databind.SerializationConfig): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.TypeReference<any>): java.util.Iterator;
					public getSubtypeResolver(): com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
					public setFilterProvider(param0: com.fasterxml.jackson.databind.ser.FilterProvider): com.fasterxml.jackson.databind.ObjectMapper;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.MappingIterator<any>;
					public disableDefaultTyping(): com.fasterxml.jackson.databind.ObjectMapper;
					public writeTree(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.TreeNode): void;
					public readTree(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.TreeNode;
					public writeValue(param0: java.io.File, param1: any): void;
					public _newWriter(param0: com.fasterxml.jackson.databind.SerializationConfig): com.fasterxml.jackson.databind.ObjectWriter;
					public registernamespace(param0: com.fasterxml.jackson.databind.namespace): com.fasterxml.jackson.databind.ObjectMapper;
					public writeValueAsBytes(param0: any): native.Array<number>;
					public readValue(param0: java.net.URL, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public readValue(param0: java.io.File, param1: com.fasterxml.jackson.databind.JavaType): any;
					public enableDefaultTyping(param0: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, param1: com.fasterxml.jackson.annotation.JsonTypeInfo.As): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(param0: java.io.File, param1: java.lang.Class): any;
					public _readMapAndClose(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.JavaType): any;
					public disable(param0: native.Array<com.fasterxml.jackson.core.JsonParser.Feature>): com.fasterxml.jackson.databind.ObjectMapper;
					public writeTree(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.JsonNode): void;
					public reader(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: string, param1: java.lang.Class): any;
					public addMixInAnnotations(param0: java.lang.Class<any>, param1: java.lang.Class<any>): void;
					public findAndRegisternamespaces(): com.fasterxml.jackson.databind.ObjectMapper;
					public setSerializerFactory(param0: com.fasterxml.jackson.databind.ser.SerializerFactory): com.fasterxml.jackson.databind.ObjectMapper;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public registernamespaces(param0: native.Array<com.fasterxml.jackson.databind.namespace>): com.fasterxml.jackson.databind.ObjectMapper;
					public enable(param0: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectMapper;
					public disable(param0: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public createObjectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectMapper);
					public canSerialize(param0: java.lang.Class<any>): boolean;
					public acceptJsonFormatVisitor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
					public defaultClassIntrospector(): com.fasterxml.jackson.databind.introspect.ClassIntrospector;
					public setVisibility(param0: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.ObjectMapper;
					public convertValue(param0: any, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public configure(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public writer(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.ObjectWriter;
					public enable(param0: com.fasterxml.jackson.databind.DeserializationFeature, param1: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.ObjectMapper;
					public getDeserializationContext(): com.fasterxml.jackson.databind.DeserializationContext;
					public getSerializerFactory(): com.fasterxml.jackson.databind.ser.SerializerFactory;
					public _newReader(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: any, param3: com.fasterxml.jackson.core.FormatSchema, param4: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.ObjectReader;
					public setDefaultPrettyPrinter(param0: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectMapper;
					public getJsonFactory(): com.fasterxml.jackson.core.JsonFactory;
					public _convert(param0: any, param1: com.fasterxml.jackson.databind.JavaType): any;
					public writerWithType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter;
					public createArrayNode(): com.fasterxml.jackson.core.TreeNode;
					public treeToValue(param0: com.fasterxml.jackson.core.TreeNode, param1: java.lang.Class): any;
					public readValue(param0: native.Array<number>, param1: number, param2: number, param3: java.lang.Class): any;
					public treeAsTokens(param0: com.fasterxml.jackson.core.TreeNode): com.fasterxml.jackson.core.JsonParser;
					public disable(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): com.fasterxml.jackson.databind.ObjectMapper;
					public readerWithView(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public writerFor(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Class): com.fasterxml.jackson.databind.MappingIterator<any>;
					public readValue(param0: native.Array<number>, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public _newReader(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectReader;
					public clearProblemHandlers(): com.fasterxml.jackson.databind.ObjectMapper;
					public writer(param0: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter;
					public setMixIns(param0: java.util.Map<java.lang.Class<any>,java.lang.Class<any>>): com.fasterxml.jackson.databind.ObjectMapper;
					public disable(param0: com.fasterxml.jackson.databind.SerializationFeature, param1: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.ObjectMapper;
					public mixInCount(): number;
					public getSerializationConfig(): com.fasterxml.jackson.databind.SerializationConfig;
					public readValue(param0: java.net.URL, param1: com.fasterxml.jackson.databind.JavaType): any;
					public getDateFormat(): java.text.DateFormat;
					public _initForReading(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.JsonToken;
					public writer(param0: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectWriter;
					public constructType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					public version(): com.fasterxml.jackson.core.Version;
					public readerFor(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectReader;
					public setSubtypeResolver(param0: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): com.fasterxml.jackson.databind.ObjectMapper;
					public _defaultPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
					public setLocale(param0: java.util.Locale): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(param0: native.Array<number>, param1: number, param2: number, param3: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public setFilters(param0: com.fasterxml.jackson.databind.ser.FilterProvider): void;
					public getInjectableValues(): com.fasterxml.jackson.databind.InjectableValues;
					public createObjectNode(): com.fasterxml.jackson.core.TreeNode;
					public canDeserialize(param0: com.fasterxml.jackson.databind.JavaType): boolean;
					public addMixIn(param0: java.lang.Class<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectMapper;
					public setDefaultTyping(param0: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): com.fasterxml.jackson.databind.ObjectMapper;
					public reader(): com.fasterxml.jackson.databind.ObjectReader;
					public setSerializerProvider(param0: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider): com.fasterxml.jackson.databind.ObjectMapper;
					public setInjectableValues(param0: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.ObjectMapper;
					public _findRootDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public readValue(param0: java.io.Reader, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public writer(param0: com.fasterxml.jackson.databind.ser.FilterProvider): com.fasterxml.jackson.databind.ObjectWriter;
					public writer(param0: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectWriter;
					public reader(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectReader;
					public setMixInAnnotations(param0: java.util.Map<java.lang.Class<any>,java.lang.Class<any>>): void;
					public writerWithType(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public createDeserializationContext(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					public readValue(param0: java.io.InputStream, param1: com.fasterxml.jackson.databind.JavaType): any;
					public reader(param0: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectReader;
					public setHandlerInstantiator(param0: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): any;
					public getSerializerProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					public setAnnotationIntrospectors(param0: com.fasterxml.jackson.databind.AnnotationIntrospector, param1: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.ObjectMapper;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
					public _unwrapAndDeserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.DeserializationConfig, param3: com.fasterxml.jackson.databind.JavaType, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): any;
					public getDeserializationConfig(): com.fasterxml.jackson.databind.DeserializationConfig;
					public setMixInResolver(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.ObjectMapper;
					public reader(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.ObjectReader;
					public setTypeFactory(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.ObjectMapper;
					public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
					public _newWriter(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter;
					public setAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.ObjectMapper;
					public setBase64Variant(param0: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectMapper;
					public writerFor(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter;
					public writerWithView(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public readerFor(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: native.Array<number>, param1: com.fasterxml.jackson.databind.JavaType): any;
					public readValue(param0: java.io.Reader, param1: java.lang.Class): any;
					public writerWithDefaultPrettyPrinter(): com.fasterxml.jackson.databind.ObjectWriter;
					public canSerialize(param0: java.lang.Class<any>, param1: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
					public writer(param0: java.text.DateFormat): com.fasterxml.jackson.databind.ObjectWriter;
					public setVisibilityChecker(param0: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): void;
					public readTree(param0: java.io.InputStream): com.fasterxml.jackson.databind.JsonNode;
					public setConfig(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectMapper;
					public enableDefaultTyping(param0: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping): com.fasterxml.jackson.databind.ObjectMapper;
					public writerWithType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public reader(param0: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectReader;
					public readTree(param0: java.net.URL): com.fasterxml.jackson.databind.JsonNode;
					public generateJsonSchema(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.jsonschema.JsonSchema;
					public enable(param0: com.fasterxml.jackson.databind.SerializationFeature, param1: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(param0: java.io.File, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public readTree(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public readTree(param0: java.io.Reader): com.fasterxml.jackson.databind.JsonNode;
					public reader(param0: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.ObjectReader;
					public enable(param0: native.Array<com.fasterxml.jackson.core.JsonParser.Feature>): com.fasterxml.jackson.databind.ObjectMapper;
					public getVisibilityChecker(): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
					public registerSubtypes(param0: native.Array<java.lang.Class<any>>): void;
					public writerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Class): any;
					public _checkInvalidCopy(param0: java.lang.Class<any>): void;
					public setTimeZone(param0: java.util.TimeZone): com.fasterxml.jackson.databind.ObjectMapper;
					public enable(param0: native.Array<com.fasterxml.jackson.core.JsonGenerator.Feature>): com.fasterxml.jackson.databind.ObjectMapper;
					public constructor(param0: com.fasterxml.jackson.core.JsonFactory);
					public disable(param0: native.Array<com.fasterxml.jackson.core.JsonGenerator.Feature>): com.fasterxml.jackson.databind.ObjectMapper;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.ResolvedType): java.util.Iterator;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.MappingIterator<any>;
					public setNodeFactory(param0: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.ObjectMapper;
					public reader(param0: com.fasterxml.jackson.databind.DeserializationFeature, param1: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.ObjectReader;
					public addHandler(param0: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): com.fasterxml.jackson.databind.ObjectMapper;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.ResolvedType): com.fasterxml.jackson.databind.MappingIterator<any>;
					public readerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: native.Array<number>, param1: number, param2: number, param3: com.fasterxml.jackson.databind.JavaType): any;
					public isEnabled(param0: com.fasterxml.jackson.databind.SerializationFeature): boolean;
					public canDeserialize(param0: com.fasterxml.jackson.databind.JavaType, param1: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
					public writeValueAsString(param0: any): string;
					public readValue(param0: java.io.InputStream, param1: java.lang.Class): any;
					public enable(param0: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectMapper;
					public reader(param0: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectReader;
					public disable(param0: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectMapper;
					public configure(param0: com.fasterxml.jackson.core.JsonParser.Feature, param1: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public createArrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
					public readValue(param0: java.io.InputStream, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public _configAndWriteValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any): void;
				}
				export namespace ObjectMapper {
					export class DefaultTypeResolverBuilder extends com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder>;
						public _appliesFor: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public constructor();
						public inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): any;
						public buildTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public typeProperty(param0: string): any;
						public defaultImpl(param0: java.lang.Class<any>): any;
						public typeIdVisibility(param0: boolean): any;
						public init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): any;
						public init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public typeProperty(param0: string): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public buildTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public constructor(param0: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping);
						public typeIdVisibility(param0: boolean): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public useForType(param0: com.fasterxml.jackson.databind.JavaType): boolean;
						public defaultImpl(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public getDefaultImpl(): java.lang.Class<any>;
					}
					export class DefaultTyping {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping>;
						public static JAVA_LANG_OBJECT: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static OBJECT_AND_NON_CONCRETE: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static NON_CONCRETE_AND_ARRAYS: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static NON_FINAL: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static valueOf(param0: string): com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static values(): native.Array<com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class ObjectReader extends com.fasterxml.jackson.core.ObjectCodec implements com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectReader>;
					public _config: com.fasterxml.jackson.databind.DeserializationConfig;
					public _context: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					public _parserFactory: com.fasterxml.jackson.core.JsonFactory;
					public _unwrapRoot: boolean;
					public _valueType: com.fasterxml.jackson.databind.JavaType;
					public _rootDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public _valueToUpdate: any;
					public _schema: com.fasterxml.jackson.core.FormatSchema;
					public _injectableValues: com.fasterxml.jackson.databind.InjectableValues;
					public _dataFormatReaders: com.fasterxml.jackson.databind.deser.DataFormatReaders;
					public _rootDeserializers: java.util.concurrent.ConcurrentHashMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
					public createArrayNode(): com.fasterxml.jackson.core.TreeNode;
					public treeToValue(param0: com.fasterxml.jackson.core.TreeNode, param1: java.lang.Class): any;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.core.JsonParser.Feature>): com.fasterxml.jackson.databind.ObjectReader;
					public treeAsTokens(param0: com.fasterxml.jackson.core.TreeNode): com.fasterxml.jackson.core.JsonParser;
					public without(param0: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.ObjectReader;
					public withType(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: java.io.Reader): any;
					public constructor();
					public withView(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public without(param0: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectReader;
					public with(param0: java.util.TimeZone): com.fasterxml.jackson.databind.ObjectReader;
					public _inputStream(param0: java.io.File): java.io.InputStream;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.JavaType): any;
					public with(param0: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.ObjectReader;
					public _findRootDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public _initForReading(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.JsonToken;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectReader, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: any, param5: com.fasterxml.jackson.core.FormatSchema, param6: com.fasterxml.jackson.databind.InjectableValues, param7: com.fasterxml.jackson.databind.deser.DataFormatReaders);
					public writeValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any): void;
					public readValues(param0: string): com.fasterxml.jackson.databind.MappingIterator<any>;
					public with(param0: com.fasterxml.jackson.core.JsonFactory): com.fasterxml.jackson.databind.ObjectReader;
					public withRootName(param0: string): com.fasterxml.jackson.databind.ObjectReader;
					public version(): com.fasterxml.jackson.core.Version;
					public _bindAndReadValues(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.MappingIterator<any>;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectReader, param1: com.fasterxml.jackson.core.JsonFactory);
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Class): java.util.Iterator;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.ObjectReader;
					public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.ObjectReader;
					public forType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.ResolvedType): any;
					public getFactory(): com.fasterxml.jackson.core.JsonFactory;
					public getInjectableValues(): com.fasterxml.jackson.databind.InjectableValues;
					public isEnabled(param0: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
					public createObjectNode(): com.fasterxml.jackson.core.TreeNode;
					public readValues(param0: java.io.File): com.fasterxml.jackson.databind.MappingIterator<any>;
					public with(param0: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectReader;
					public _initForMultiRead(param0: com.fasterxml.jackson.core.JsonParser): void;
					public readValues(param0: java.io.InputStream): com.fasterxml.jackson.databind.MappingIterator<any>;
					public withValueToUpdate(param0: any): com.fasterxml.jackson.databind.ObjectReader;
					public getConfig(): com.fasterxml.jackson.databind.DeserializationConfig;
					public withType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectReader;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectMapper, param1: com.fasterxml.jackson.databind.DeserializationConfig);
					public readValues(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.MappingIterator<any>;
					public _detectBindAndClose(param0: native.Array<number>, param1: number, param2: number): any;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
					public createDeserializationContext(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					public withoutRootName(): com.fasterxml.jackson.databind.ObjectReader;
					public forType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public _bindAndCloseAsTree(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.JsonNode;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.ObjectReader;
					public without(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.databind.ObjectReader;
					public _detectBindAndReadValues(param0: com.fasterxml.jackson.databind.deser.DataFormatReaders.Match, param1: boolean): com.fasterxml.jackson.databind.MappingIterator<any>;
					public readValues(param0: java.io.Reader): com.fasterxml.jackson.databind.MappingIterator<any>;
					public without(param0: com.fasterxml.jackson.databind.DeserializationFeature, param1: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.ObjectReader;
					public _with(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectReader;
					public _verifySchemaType(param0: com.fasterxml.jackson.core.FormatSchema): void;
					public readValues(param0: native.Array<number>): com.fasterxml.jackson.databind.MappingIterator<any>;
					public _considerFilter(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.JsonParser;
					public with(param0: com.fasterxml.jackson.databind.DeserializationFeature, param1: native.Array<com.fasterxml.jackson.databind.DeserializationFeature>): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: native.Array<number>, param1: number, param2: number): any;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectReader, param1: com.fasterxml.jackson.databind.DeserializationConfig);
					public readValue(param0: string): any;
					public readValue(param0: java.io.File): any;
					public withAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.ObjectReader;
					public withAttributes(param0: java.util.Map<any,any>): com.fasterxml.jackson.databind.ObjectReader;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.TypeReference<any>): java.util.Iterator;
					public with(param0: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.ObjectReader;
					public withHandler(param0: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): com.fasterxml.jackson.databind.ObjectReader;
					public readTree(param0: java.io.InputStream): com.fasterxml.jackson.databind.JsonNode;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.core.FormatFeature>): com.fasterxml.jackson.databind.ObjectReader;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectReader, param1: com.fasterxml.jackson.core.filter.TokenFilter);
					public withType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.ObjectReader;
					public with(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectReader;
					public at(param0: string): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: java.net.URL): any;
					public writeTree(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.TreeNode): void;
					public _bind(param0: com.fasterxml.jackson.core.JsonParser, param1: any): any;
					public createObjectNode(): com.fasterxml.jackson.databind.JsonNode;
					public readTree(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.TreeNode;
					public readValues(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.MappingIterator<any>;
					public _newIterator(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: boolean): com.fasterxml.jackson.databind.MappingIterator<any>;
					public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.ObjectReader;
					public _bindAsTree(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.JsonNode;
					public readTree(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public _unwrapAndDeserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): any;
					public with(param0: java.util.Locale): com.fasterxml.jackson.databind.ObjectReader;
					public withoutAttribute(param0: any): com.fasterxml.jackson.databind.ObjectReader;
					public readTree(param0: java.io.Reader): com.fasterxml.jackson.databind.JsonNode;
					public with(param0: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.ObjectReader;
					public with(param0: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectReader;
					public with(param0: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: native.Array<number>): any;
					public with(param0: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Class): any;
					public _inputStream(param0: java.net.URL): java.io.InputStream;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.core.JsonParser.Feature>): com.fasterxml.jackson.databind.ObjectReader;
					public _findTreeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public _reportUnkownFormat(param0: com.fasterxml.jackson.databind.deser.DataFormatReaders, param1: com.fasterxml.jackson.databind.deser.DataFormatReaders.Match): void;
					public withFormatDetection(param0: com.fasterxml.jackson.databind.deser.DataFormatReaders): com.fasterxml.jackson.databind.ObjectReader;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectMapper, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.JavaType, param3: any, param4: com.fasterxml.jackson.core.FormatSchema, param5: com.fasterxml.jackson.databind.InjectableValues);
					public _detectBindAndCloseAsTree(param0: java.io.InputStream): com.fasterxml.jackson.databind.JsonNode;
					public _new(param0: com.fasterxml.jackson.databind.ObjectReader, param1: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.TypeReference<any>): any;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.core.FormatFeature>): com.fasterxml.jackson.databind.ObjectReader;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public _prefetchRootDeserializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public readValue(param0: com.fasterxml.jackson.core.JsonParser): any;
					public _new(param0: com.fasterxml.jackson.databind.ObjectReader, param1: com.fasterxml.jackson.core.JsonFactory): com.fasterxml.jackson.databind.ObjectReader;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.core.type.ResolvedType): java.util.Iterator;
					public _reportUndetectableSource(param0: any): void;
					public forType(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectReader;
					public withType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.ObjectReader;
					public withFormatDetection(param0: native.Array<com.fasterxml.jackson.databind.ObjectReader>): com.fasterxml.jackson.databind.ObjectReader;
					public _new(param0: com.fasterxml.jackson.databind.ObjectReader, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: any, param5: com.fasterxml.jackson.core.FormatSchema, param6: com.fasterxml.jackson.databind.InjectableValues, param7: com.fasterxml.jackson.databind.deser.DataFormatReaders): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(param0: com.fasterxml.jackson.databind.JsonNode): any;
					public _detectBindAndClose(param0: com.fasterxml.jackson.databind.deser.DataFormatReaders.Match, param1: boolean): any;
					public readValues(param0: java.net.URL): com.fasterxml.jackson.databind.MappingIterator<any>;
					public getAttributes(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
					public readValues(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.JavaType): java.util.Iterator;
					public _bindAndClose(param0: com.fasterxml.jackson.core.JsonParser): any;
					public createArrayNode(): com.fasterxml.jackson.databind.JsonNode;
					public readValue(param0: java.io.InputStream): any;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class ObjectWriter extends com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectWriter>;
					public static NULL_PRETTY_PRINTER: com.fasterxml.jackson.core.PrettyPrinter;
					public _config: com.fasterxml.jackson.databind.SerializationConfig;
					public _serializerFactory: com.fasterxml.jackson.databind.ser.SerializerFactory;
					public _generatorFactory: com.fasterxml.jackson.core.JsonFactory;
					public _generatorSettings: com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
					public _prefetch: com.fasterxml.jackson.databind.ObjectWriter.Prefetch;
					public forType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValuesAsArray(param0: java.io.Writer): com.fasterxml.jackson.databind.SequenceWriter;
					public getConfig(): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectWriter;
					public withType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public with(param0: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValues(param0: java.io.File): com.fasterxml.jackson.databind.SequenceWriter;
					public with(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.databind.ObjectWriter;
					public withRootName(param0: string): com.fasterxml.jackson.databind.ObjectWriter;
					public canSerialize(param0: java.lang.Class<any>, param1: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
					public withDefaultPrettyPrinter(): com.fasterxml.jackson.databind.ObjectWriter;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.ObjectWriter;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.core.JsonGenerator.Feature>): com.fasterxml.jackson.databind.ObjectWriter;
					public withoutRootName(): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValuesAsArray(param0: java.io.OutputStream): com.fasterxml.jackson.databind.SequenceWriter;
					public writeValuesAsArray(param0: java.io.File): com.fasterxml.jackson.databind.SequenceWriter;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectMapper, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.core.FormatSchema);
					public withFeatures(param0: native.Array<com.fasterxml.jackson.core.FormatFeature>): com.fasterxml.jackson.databind.ObjectWriter;
					public withSchema(param0: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter;
					public withView(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public without(param0: com.fasterxml.jackson.databind.SerializationFeature, param1: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.ObjectWriter;
					public withAttributes(param0: java.util.Map<any,any>): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValue(param0: java.io.File, param1: any): void;
					public with(param0: com.fasterxml.jackson.databind.SerializationFeature, param1: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.ObjectWriter;
					public _configureGenerator(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public _new(param0: com.fasterxml.jackson.databind.ObjectWriter, param1: com.fasterxml.jackson.core.JsonFactory): com.fasterxml.jackson.databind.ObjectWriter;
					public _newSequenceWriter(param0: boolean, param1: com.fasterxml.jackson.core.JsonGenerator, param2: boolean): com.fasterxml.jackson.databind.SequenceWriter;
					public withRootValueSeparator(param0: string): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValue(param0: java.io.Writer, param1: any): void;
					public with(param0: java.util.Locale): com.fasterxml.jackson.databind.ObjectWriter;
					public with(param0: com.fasterxml.jackson.core.JsonFactory): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValueAsBytes(param0: any): native.Array<number>;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectWriter, param1: com.fasterxml.jackson.core.JsonFactory);
					public with(param0: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any): void;
					public with(param0: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectMapper, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.core.PrettyPrinter);
					public version(): com.fasterxml.jackson.core.Version;
					public withoutAttribute(param0: any): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValues(param0: com.fasterxml.jackson.core.JsonGenerator): com.fasterxml.jackson.databind.SequenceWriter;
					public without(param0: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public with(param0: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectWriter;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public getFactory(): com.fasterxml.jackson.core.JsonFactory;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.core.JsonGenerator.Feature>): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValue(param0: java.io.OutputStream, param1: any): void;
					public _new(param0: com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings, param1: com.fasterxml.jackson.databind.ObjectWriter.Prefetch): com.fasterxml.jackson.databind.ObjectWriter;
					public with(param0: java.util.TimeZone): com.fasterxml.jackson.databind.ObjectWriter;
					public withAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.ObjectWriter;
					public acceptJsonFormatVisitor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
					public canSerialize(param0: java.lang.Class<any>): boolean;
					public without(param0: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public forType(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public withRootValueSeparator(param0: com.fasterxml.jackson.core.SerializableString): com.fasterxml.jackson.databind.ObjectWriter;
					public hasPrefetchedSerializer(): boolean;
					public _serializerProvider(): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
					public withType(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValues(param0: java.io.OutputStream): com.fasterxml.jackson.databind.SequenceWriter;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectWriter, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings, param3: com.fasterxml.jackson.databind.ObjectWriter.Prefetch);
					public with(param0: java.text.DateFormat): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValues(param0: java.io.Writer): com.fasterxml.jackson.databind.SequenceWriter;
					public without(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.databind.ObjectWriter;
					public with(param0: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.databind.ObjectWriter;
					public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
					public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.core.FormatFeature>): com.fasterxml.jackson.databind.ObjectWriter;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectWriter, param1: com.fasterxml.jackson.databind.SerializationConfig);
					public with(param0: com.fasterxml.jackson.databind.ser.FilterProvider): com.fasterxml.jackson.databind.ObjectWriter;
					public forType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(param0: com.fasterxml.jackson.databind.SerializationFeature): boolean;
					public writeValuesAsArray(param0: com.fasterxml.jackson.core.JsonGenerator): com.fasterxml.jackson.databind.SequenceWriter;
					public constructor(param0: com.fasterxml.jackson.databind.ObjectMapper, param1: com.fasterxml.jackson.databind.SerializationConfig);
					public writeValueAsString(param0: any): string;
					public getAttributes(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
					public _new(param0: com.fasterxml.jackson.databind.ObjectWriter, param1: com.fasterxml.jackson.databind.SerializationConfig): com.fasterxml.jackson.databind.ObjectWriter;
					public _verifySchemaType(param0: com.fasterxml.jackson.core.FormatSchema): void;
					public withType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter;
					public _configAndWriteValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any): void;
				}
				export namespace ObjectWriter {
					export class GeneratorSettings {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings>;
						public static empty: com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public prettyPrinter: com.fasterxml.jackson.core.PrettyPrinter;
						public schema: com.fasterxml.jackson.core.FormatSchema;
						public characterEscapes: com.fasterxml.jackson.core.io.CharacterEscapes;
						public rootValueSeparator: com.fasterxml.jackson.core.SerializableString;
						public with(param0: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public with(param0: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public withRootValueSeparator(param0: string): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public withRootValueSeparator(param0: com.fasterxml.jackson.core.SerializableString): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public with(param0: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public initialize(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor(param0: com.fasterxml.jackson.core.PrettyPrinter, param1: com.fasterxml.jackson.core.FormatSchema, param2: com.fasterxml.jackson.core.io.CharacterEscapes, param3: com.fasterxml.jackson.core.SerializableString);
					}
					export class Prefetch {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectWriter.Prefetch>;
						public static empty: com.fasterxml.jackson.databind.ObjectWriter.Prefetch;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any, param2: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider): void;
						public getValueSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public forRootType(param0: com.fasterxml.jackson.databind.ObjectWriter, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter.Prefetch;
						public getTypeSerializer(): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public hasSerializer(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class PropertyMetadata {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyMetadata>;
					public static STD_REQUIRED: com.fasterxml.jackson.databind.PropertyMetadata;
					public static STD_OPTIONAL: com.fasterxml.jackson.databind.PropertyMetadata;
					public static STD_REQUIRED_OR_OPTIONAL: com.fasterxml.jackson.databind.PropertyMetadata;
					public _required: java.lang.Boolean;
					public _description: string;
					public _index: java.lang.Integer;
					public _defaultValue: string;
					public static construct(param0: boolean, param1: string): com.fasterxml.jackson.databind.PropertyMetadata;
					public getRequired(): java.lang.Boolean;
					public hasDefaultValue(): boolean;
					public isRequired(): boolean;
					public constructor(param0: java.lang.Boolean, param1: string, param2: java.lang.Integer, param3: string);
					public hasDefuaultValue(): boolean;
					public constructor(param0: java.lang.Boolean, param1: string);
					public static construct(param0: boolean, param1: string, param2: java.lang.Integer, param3: string): com.fasterxml.jackson.databind.PropertyMetadata;
					public getIndex(): java.lang.Integer;
					public hasIndex(): boolean;
					public readResolve(): any;
					public withRequired(param0: java.lang.Boolean): com.fasterxml.jackson.databind.PropertyMetadata;
					public getDescription(): string;
					public getDefaultValue(): string;
					public withDescription(param0: string): com.fasterxml.jackson.databind.PropertyMetadata;
					public withDefaultValue(param0: string): com.fasterxml.jackson.databind.PropertyMetadata;
					public withIndex(param0: java.lang.Integer): com.fasterxml.jackson.databind.PropertyMetadata;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class PropertyName {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyName>;
					public static USE_DEFAULT: com.fasterxml.jackson.databind.PropertyName;
					public static NO_NAME: com.fasterxml.jackson.databind.PropertyName;
					public _simpleName: string;
					public _namespace: string;
					public _encodedSimple: com.fasterxml.jackson.core.SerializableString;
					public static construct(param0: string): com.fasterxml.jackson.databind.PropertyName;
					public getNamespace(): string;
					public simpleAsEncoded(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.core.SerializableString;
					public isEmpty(): boolean;
					public constructor(param0: string);
					public internSimpleName(): com.fasterxml.jackson.databind.PropertyName;
					public withSimpleName(param0: string): com.fasterxml.jackson.databind.PropertyName;
					public hasSimpleName(param0: string): boolean;
					public static construct(param0: string, param1: string): com.fasterxml.jackson.databind.PropertyName;
					public getSimpleName(): string;
					public constructor(param0: string, param1: string);
					public hasSimpleName(): boolean;
					public equals(param0: any): boolean;
					public toString(): string;
					public hasNamespace(): boolean;
					public readResolve(): any;
					public withNamespace(param0: string): com.fasterxml.jackson.databind.PropertyName;
					public hashCode(): number;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class PropertyNamingStrategy {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy>;
					public static SNAKE_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static UPPER_CAMEL_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static LOWER_CAMEL_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static LOWER_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static KEBAB_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static PASCAL_CASE_TO_CAMEL_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public nameForField(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedField, param2: string): string;
					public constructor();
					public nameForGetterMethod(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: string): string;
					public nameForConstructorParameter(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, param2: string): string;
					public nameForSetterMethod(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: string): string;
				}
				export namespace PropertyNamingStrategy {
					export class KebabCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.KebabCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
					}
					export class LowerCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
					}
					export class LowerCaseWithUnderscoresStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy>;
						public constructor();
					}
					export class PascalCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.UpperCamelCaseStrategy {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.PascalCaseStrategy>;
						public constructor();
					}
					export abstract class PropertyNamingStrategyBase extends com.fasterxml.jackson.databind.PropertyNamingStrategy {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase>;
						public nameForGetterMethod(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: string): string;
						public nameForConstructorParameter(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, param2: string): string;
						public constructor();
						public nameForSetterMethod(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: string): string;
						public translate(param0: string): string;
						public nameForField(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedField, param2: string): string;
					}
					export class SnakeCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
					}
					export class UpperCamelCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.UpperCamelCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class RuntimeJsonMappingException {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.RuntimeJsonMappingException>;
					public constructor(param0: string);
					public constructor(param0: string, param1: com.fasterxml.jackson.databind.JsonMappingException);
					public constructor(param0: com.fasterxml.jackson.databind.JsonMappingException);
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class SequenceWriter extends com.fasterxml.jackson.core.Versioned {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.SequenceWriter>;
					public _provider: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
					public _config: com.fasterxml.jackson.databind.SerializationConfig;
					public _generator: com.fasterxml.jackson.core.JsonGenerator;
					public _rootSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _typeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
					public _closeGenerator: boolean;
					public _cfgFlush: boolean;
					public _cfgCloseCloseable: boolean;
					public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
					public _openArray: boolean;
					public _closed: boolean;
					public init(param0: boolean): com.fasterxml.jackson.databind.SequenceWriter;
					public constructor(param0: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider, param1: com.fasterxml.jackson.core.JsonGenerator, param2: boolean, param3: com.fasterxml.jackson.databind.ObjectWriter.Prefetch);
					public write(param0: any): com.fasterxml.jackson.databind.SequenceWriter;
					public writeAll(param0: native.Array<any>): com.fasterxml.jackson.databind.SequenceWriter;
					public close(): void;
					public _writeCloseableValue(param0: any, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.SequenceWriter;
					public version(): com.fasterxml.jackson.core.Version;
					public flush(): void;
					public writeAll(param0: java.lang.Iterable<any>): com.fasterxml.jackson.databind.SequenceWriter;
					public _writeCloseableValue(param0: any): com.fasterxml.jackson.databind.SequenceWriter;
					public write(param0: any, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.SequenceWriter;
					public writeAll(param0: java.util.Collection): com.fasterxml.jackson.databind.SequenceWriter;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class SerializationConfig extends com.fasterxml.jackson.databind.cfg.MapperConfigBase<com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationConfig> implements java.io.Serializable  {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.SerializationConfig>;
					public static DEFAULT_PRETTY_PRINTER: com.fasterxml.jackson.core.PrettyPrinter;
					public static DEFAULT_INCLUSION: com.fasterxml.jackson.annotation.JsonInclude.Value;
					public _filterProvider: com.fasterxml.jackson.databind.ser.FilterProvider;
					public _defaultPrettyPrinter: com.fasterxml.jackson.core.PrettyPrinter;
					public _serFeatures: number;
					public _generatorFeatures: number;
					public _generatorFeaturesToChange: number;
					public _formatWriteFeatures: number;
					public _formatWriteFeaturesToChange: number;
					public _serializationInclusion: com.fasterxml.jackson.annotation.JsonInclude.Value;
					public with(param0: java.text.DateFormat): com.fasterxml.jackson.databind.SerializationConfig;
					public withSerializationInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.SerializationConfig;
					public withDefaultPrettyPrinter(param0: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.SerializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, param2: com.fasterxml.jackson.databind.util.RootNameLookup);
					public getDefaultVisibilityChecker(): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
					public with(param0: java.text.DateFormat): any;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.cfg.BaseSettings);
					public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public with(param0: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): com.fasterxml.jackson.databind.SerializationConfig;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.SerializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: number);
					public withFeatures(param0: native.Array<com.fasterxml.jackson.core.JsonGenerator.Feature>): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): com.fasterxml.jackson.databind.SerializationConfig;
					public withInsertedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
					public constructDefaultPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
					public with(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.SerializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.cfg.ContextAttributes);
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.PropertyName);
					public withView(param0: java.lang.Class<any>): any;
					public getDefaultPropertyInclusion(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
					public withRootName(param0: string): any;
					public withAppendedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
					public introspect(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public with(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): any;
					public with(param0: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
					public with(param0: com.fasterxml.jackson.databind.SerializationFeature, param1: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.SerializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>);
					public without(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): com.fasterxml.jackson.databind.SerializationConfig;
					public getFilterProvider(): com.fasterxml.jackson.databind.ser.FilterProvider;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>);
					public constructor(param0: com.fasterxml.jackson.databind.cfg.BaseSettings, param1: number);
					public withView(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): any;
					public getDefaultPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.core.FormatFeature>): com.fasterxml.jackson.databind.SerializationConfig;
					public introspectDirectClassAnnotations(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.BeanDescription;
					public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.SerializationConfig;
					public withPropertyInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.SerializationConfig;
					public constructor(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
					public with(param0: com.fasterxml.jackson.core.Base64Variant): any;
					public with(param0: com.fasterxml.jackson.databind.type.TypeFactory): any;
					public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
					public with(param0: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.databind.SerializationConfig;
					public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): any;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: number);
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: java.lang.Class<any>);
					public getSerializationFeatures(): number;
					public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
					public with(param0: java.util.Locale): any;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, param2: com.fasterxml.jackson.databind.util.RootNameLookup);
					public with(param0: java.util.TimeZone): any;
					public withInsertedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): any;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.cfg.ContextAttributes);
					public without(param0: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: java.util.TimeZone): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): com.fasterxml.jackson.databind.SerializationConfig;
					public without(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): any;
					public with(param0: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.SerializationConfig;
					public useRootWrapping(): boolean;
					public with(param0: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): any;
					public initialize(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.jsontype.SubtypeResolver);
					public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.cfg.BaseSettings);
					public with(param0: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): any;
					public withFeatures(param0: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.SerializationConfig;
					public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public introspectClassAnnotations(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.BeanDescription;
					public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
					public constructor(param0: com.fasterxml.jackson.databind.cfg.BaseSettings, param1: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, param2: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, param3: com.fasterxml.jackson.databind.util.RootNameLookup);
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.core.FormatFeature>): com.fasterxml.jackson.databind.SerializationConfig;
					public hasSerializationFeatures(param0: number): boolean;
					public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): com.fasterxml.jackson.databind.SerializationConfig;
					public without(param0: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): com.fasterxml.jackson.databind.SerializationConfig;
					public without(param0: com.fasterxml.jackson.databind.SerializationFeature, param1: native.Array<com.fasterxml.jackson.databind.SerializationFeature>): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): com.fasterxml.jackson.databind.SerializationConfig;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public toString(): string;
					public withAppendedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.SerializationConfig;
					public introspectClassAnnotations(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public getSerializationInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Include;
					public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.SerializationConfig;
					public without(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): any;
					public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): any;
					public withFilters(param0: com.fasterxml.jackson.databind.ser.FilterProvider): com.fasterxml.jackson.databind.SerializationConfig;
					public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.SerializationConfig;
					public getDefaultPropertyInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
					public with(param0: java.util.Locale): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): any;
					public isEnabled(param0: com.fasterxml.jackson.databind.SerializationFeature): boolean;
					public introspectDirectClassAnnotations(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public constructor(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.core.PrettyPrinter);
					public with(param0: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): any;
					public isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature, param1: com.fasterxml.jackson.core.JsonFactory): boolean;
					public withoutFeatures(param0: native.Array<com.fasterxml.jackson.core.JsonGenerator.Feature>): com.fasterxml.jackson.databind.SerializationConfig;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export class SerializationFeature extends com.fasterxml.jackson.databind.cfg.ConfigFeature {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.SerializationFeature>;
					public static WRAP_ROOT_VALUE: com.fasterxml.jackson.databind.SerializationFeature;
					public static INDENT_OUTPUT: com.fasterxml.jackson.databind.SerializationFeature;
					public static FAIL_ON_EMPTY_BEANS: com.fasterxml.jackson.databind.SerializationFeature;
					public static FAIL_ON_SELF_REFERENCES: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRAP_EXCEPTIONS: com.fasterxml.jackson.databind.SerializationFeature;
					public static FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS: com.fasterxml.jackson.databind.SerializationFeature;
					public static CLOSE_CLOSEABLE: com.fasterxml.jackson.databind.SerializationFeature;
					public static FLUSH_AFTER_WRITE_VALUE: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DATES_AS_TIMESTAMPS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DATE_KEYS_AS_TIMESTAMPS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DATES_WITH_ZONE_ID: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DURATIONS_AS_TIMESTAMPS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_ENUMS_USING_TO_STRING: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_ENUMS_USING_INDEX: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_NULL_MAP_VALUES: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_EMPTY_JSON_ARRAYS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_BIGDECIMAL_AS_PLAIN: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS: com.fasterxml.jackson.databind.SerializationFeature;
					public static ORDER_MAP_ENTRIES_BY_KEYS: com.fasterxml.jackson.databind.SerializationFeature;
					public static EAGER_SERIALIZER_FETCH: com.fasterxml.jackson.databind.SerializationFeature;
					public static USE_EQUALITY_FOR_OBJECT_ID: com.fasterxml.jackson.databind.SerializationFeature;
					public enabledIn(param0: number): boolean;
					public static valueOf(param0: string): com.fasterxml.jackson.databind.SerializationFeature;
					public static values(): native.Array<com.fasterxml.jackson.databind.SerializationFeature>;
					public getMask(): number;
					public enabledByDefault(): boolean;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export abstract class SerializerProvider extends com.fasterxml.jackson.databind.DatabindContext {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.SerializerProvider>;
					public static CACHE_UNKNOWN_MAPPINGS: boolean;
					public static DEFAULT_NULL_KEY_SERIALIZER: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public static DEFAULT_UNKNOWN_SERIALIZER: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _config: com.fasterxml.jackson.databind.SerializationConfig;
					public _serializationView: java.lang.Class<any>;
					public _serializerFactory: com.fasterxml.jackson.databind.ser.SerializerFactory;
					public _serializerCache: com.fasterxml.jackson.databind.ser.SerializerCache;
					public _attributes: com.fasterxml.jackson.databind.cfg.ContextAttributes;
					public _unknownTypeSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _nullValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _nullKeySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _knownSerializers: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
					public _stdNullValueSerializer: boolean;
					public getConfig(): com.fasterxml.jackson.databind.SerializationConfig;
					public setNullKeySerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
					public handleSecondaryContextualization(param0: com.fasterxml.jackson.databind.JsonSerializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public findKeySerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public defaultSerializeDateValue(param0: number, param1: com.fasterxml.jackson.core.JsonGenerator): void;
					public _createUntypedSerializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public defaultSerializeDateKey(param0: number, param1: com.fasterxml.jackson.core.JsonGenerator): void;
					public constructor();
					public _handleContextualResolvable(param0: com.fasterxml.jackson.databind.JsonSerializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public findTypedValueSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean, param2: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public findPrimaryPropertySerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public canOverrideAccessModifiers(): boolean;
					public _createAndCacheUntypedSerializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public defaultSerializeValue(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
					public findTypeSerializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
					public defaultSerializeDateKey(param0: java.util.Date, param1: com.fasterxml.jackson.core.JsonGenerator): void;
					public setDefaultKeySerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
					public findKeySerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.databind.ser.SerializerFactory);
					public getDefaultNullKeySerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _findExplicitUntypedSerializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public setNullValueSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
					public findValueSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
					public _createAndCacheUntypedSerializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public isUnknownTypeSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): boolean;
					public setAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.SerializerProvider;
					public defaultSerializeField(param0: string, param1: any, param2: com.fasterxml.jackson.core.JsonGenerator): void;
					public hasSerializationFeatures(param0: number): boolean;
					public findValueSerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getAttribute(param0: any): any;
					public findPrimaryPropertySerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getDefaultNullValueSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _handleResolvable(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _reportIncompatibleRootType(param0: any, param1: com.fasterxml.jackson.databind.JavaType): void;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public getLocale(): java.util.Locale;
					public getActiveView(): java.lang.Class<any>;
					public findTypedValueSerializer(param0: java.lang.Class<any>, param1: boolean, param2: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getConfig(): com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
					public getTimeZone(): java.util.TimeZone;
					public findValueSerializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public defaultSerializeDateValue(param0: java.util.Date, param1: com.fasterxml.jackson.core.JsonGenerator): void;
					public findNullValueSerializer(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public setAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.DatabindContext;
					public getFilterProvider(): com.fasterxml.jackson.databind.ser.FilterProvider;
					public findValueSerializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public handlePrimaryContextualization(param0: com.fasterxml.jackson.databind.JsonSerializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public serializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getUnknownTypeSerializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public defaultSerializeNull(param0: com.fasterxml.jackson.core.JsonGenerator): void;
					public _dateFormat(): java.text.DateFormat;
					public mappingException(param0: string, param1: native.Array<any>): com.fasterxml.jackson.databind.JsonMappingException;
					public getSerializationView(): java.lang.Class<any>;
					public isEnabled(param0: com.fasterxml.jackson.databind.SerializationFeature): boolean;
					public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider);
					public findNullKeySerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class JacksonStdImpl {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JacksonStdImpl>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JacksonStdImpl interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class JsonAppend {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonAppend>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonAppend interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							attrs(): native.Array<com.fasterxml.jackson.databind.annotation.JsonAppend.Attr>;
							props(): native.Array<com.fasterxml.jackson.databind.annotation.JsonAppend.Prop>;
							prepend(): boolean;
						});
						public constructor();
						public attrs(): native.Array<com.fasterxml.jackson.databind.annotation.JsonAppend.Attr>;
						public props(): native.Array<com.fasterxml.jackson.databind.annotation.JsonAppend.Prop>;
						public prepend(): boolean;
					}
					export namespace JsonAppend {
						export class Attr {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonAppend.Attr>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonAppend$Attr interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								value(): string;
								propName(): string;
								propNamespace(): string;
								include(): com.fasterxml.jackson.annotation.JsonInclude.Include;
								required(): boolean;
							});
							public constructor();
							public propNamespace(): string;
							public propName(): string;
							public value(): string;
							public required(): boolean;
							public include(): com.fasterxml.jackson.annotation.JsonInclude.Include;
						}
						export class Prop {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonAppend.Prop>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonAppend$Prop interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								value(): java.lang.Class<any>;
								name(): string;
								namespace(): string;
								include(): com.fasterxml.jackson.annotation.JsonInclude.Include;
								required(): boolean;
								type(): java.lang.Class<any>;
							});
							public constructor();
							public namespace(): string;
							public type(): java.lang.Class<any>;
							public value(): java.lang.Class<any>;
							public name(): string;
							public required(): boolean;
							public include(): com.fasterxml.jackson.annotation.JsonInclude.Include;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class JsonDeserialize {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonDeserialize>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonDeserialize interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							using(): java.lang.Class<any>;
							contentUsing(): java.lang.Class<any>;
							keyUsing(): java.lang.Class<any>;
							builder(): java.lang.Class<any>;
							converter(): java.lang.Class<any>;
							contentConverter(): java.lang.Class<any>;
							as(): java.lang.Class<any>;
							keyAs(): java.lang.Class<any>;
							contentAs(): java.lang.Class<any>;
						});
						public constructor();
						public keyUsing(): java.lang.Class<any>;
						public contentUsing(): java.lang.Class<any>;
						public contentAs(): java.lang.Class<any>;
						public contentConverter(): java.lang.Class<any>;
						public converter(): java.lang.Class<any>;
						public as(): java.lang.Class<any>;
						public using(): java.lang.Class<any>;
						public builder(): java.lang.Class<any>;
						public keyAs(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class JsonNaming {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonNaming>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonNaming interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): java.lang.Class<any>;
						});
						public constructor();
						public value(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class JsonPOJOBuilder {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							buildMethodName(): string;
							withPrefix(): string;
						});
						public constructor();
						public buildMethodName(): string;
						public withPrefix(): string;
					}
					export namespace JsonPOJOBuilder {
						export class Value {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value>;
							public buildMethodName: string;
							public withPrefix: string;
							public constructor(param0: com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class JsonSerialize {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonSerialize>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonSerialize interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							using(): java.lang.Class<any>;
							contentUsing(): java.lang.Class<any>;
							keyUsing(): java.lang.Class<any>;
							nullsUsing(): java.lang.Class<any>;
							as(): java.lang.Class<any>;
							keyAs(): java.lang.Class<any>;
							contentAs(): java.lang.Class<any>;
							typing(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
							converter(): java.lang.Class<any>;
							contentConverter(): java.lang.Class<any>;
							include(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
						});
						public constructor();
						public keyUsing(): java.lang.Class<any>;
						public contentUsing(): java.lang.Class<any>;
						public contentAs(): java.lang.Class<any>;
						public contentConverter(): java.lang.Class<any>;
						public converter(): java.lang.Class<any>;
						public nullsUsing(): java.lang.Class<any>;
						public as(): java.lang.Class<any>;
						public using(): java.lang.Class<any>;
						public typing(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
						public include(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
						public keyAs(): java.lang.Class<any>;
					}
					export namespace JsonSerialize {
						export class Inclusion {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion>;
							public static ALWAYS: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static NON_NULL: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static NON_DEFAULT: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static NON_EMPTY: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static DEFAULT_INCLUSION: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static valueOf(param0: string): com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static values(): native.Array<com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion>;
						}
						export class Typing {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing>;
							public static DYNAMIC: com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
							public static STATIC: com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
							public static DEFAULT_TYPING: com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
							public static values(): native.Array<com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing>;
							public static valueOf(param0: string): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class JsonTypeIdResolver {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): java.lang.Class<any>;
						});
						public constructor();
						public value(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class JsonTypeResolver {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonTypeResolver>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonTypeResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): java.lang.Class<any>;
						});
						public constructor();
						public value(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class JsonValueInstantiator {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonValueInstantiator>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonValueInstantiator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): java.lang.Class<any>;
						});
						public constructor();
						public value(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace annotation {
					export class NoClass {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.NoClass>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace cfg {
					export class BaseSettings {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.BaseSettings>;
						public _classIntrospector: com.fasterxml.jackson.databind.introspect.ClassIntrospector;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _visibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public _propertyNamingStrategy: com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public _typeFactory: com.fasterxml.jackson.databind.type.TypeFactory;
						public _typeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public _dateFormat: java.text.DateFormat;
						public _handlerInstantiator: com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
						public _locale: java.util.Locale;
						public _timeZone: java.util.TimeZone;
						public _defaultBase64: com.fasterxml.jackson.core.Base64Variant;
						public getHandlerInstantiator(): com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
						public withAppendedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getLocale(): java.util.Locale;
						public withVisibilityChecker(param0: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getPropertyNamingStrategy(): com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public withTypeResolverBuilder(param0: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getVisibilityChecker(): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public getDateFormat(): java.text.DateFormat;
						public withPropertyNamingStrategy(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getBase64Variant(): com.fasterxml.jackson.core.Base64Variant;
						public withAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public withInsertedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
						public withDateFormat(param0: java.text.DateFormat): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public with(param0: java.util.Locale): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
						public with(param0: java.util.TimeZone): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector, param1: com.fasterxml.jackson.databind.AnnotationIntrospector, param2: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>, param3: com.fasterxml.jackson.databind.PropertyNamingStrategy, param4: com.fasterxml.jackson.databind.type.TypeFactory, param5: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>, param6: java.text.DateFormat, param7: com.fasterxml.jackson.databind.cfg.HandlerInstantiator, param8: java.util.Locale, param9: java.util.TimeZone, param10: com.fasterxml.jackson.core.Base64Variant);
						public getTimeZone(): java.util.TimeZone;
						public getClassIntrospector(): com.fasterxml.jackson.databind.introspect.ClassIntrospector;
						public hasExplicitTimeZone(): boolean;
						public withClassIntrospector(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public with(param0: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getTypeResolverBuilder(): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public withTypeFactory(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public withHandlerInstantiator(param0: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): com.fasterxml.jackson.databind.cfg.BaseSettings;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace cfg {
					export class ConfigFeature {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ConfigFeature>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.cfg.ConfigFeature interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							enabledByDefault(): boolean;
							getMask(): number;
							enabledIn(param0: number): boolean;
						});
						public constructor();
						public getMask(): number;
						public enabledIn(param0: number): boolean;
						public enabledByDefault(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace cfg {
					export abstract class ContextAttributes {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ContextAttributes>;
						public static getEmpty(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public withSharedAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public constructor();
						public withoutSharedAttribute(param0: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public withPerCallAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public withSharedAttributes(param0: java.util.Map<any,any>): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public getAttribute(param0: any): any;
					}
					export namespace ContextAttributes {
						export class Impl extends com.fasterxml.jackson.databind.cfg.ContextAttributes {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ContextAttributes.Impl>;
							public static EMPTY: com.fasterxml.jackson.databind.cfg.ContextAttributes.Impl;
							public static NULL_SURROGATE: any;
							public _shared: java.util.Map<any,any>;
							public _nonShared: java.util.Map<any,any>;
							public constructor();
							public withoutSharedAttribute(param0: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public withPerCallAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public nonSharedInstance(param0: any, param1: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public constructor(param0: java.util.Map<any,any>);
							public withSharedAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public constructor(param0: java.util.Map<any,any>, param1: java.util.Map<any,any>);
							public static getEmpty(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public getAttribute(param0: any): any;
							public withSharedAttributes(param0: java.util.Map<any,any>): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace cfg {
					export class DeserializerFactoryConfig {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig>;
						public static NO_DESERIALIZERS: native.Array<com.fasterxml.jackson.databind.deser.Deserializers>;
						public static NO_MODIFIERS: native.Array<com.fasterxml.jackson.databind.deser.BeanDeserializerModifier>;
						public static NO_ABSTRACT_TYPE_RESOLVERS: native.Array<com.fasterxml.jackson.databind.AbstractTypeResolver>;
						public static NO_VALUE_INSTANTIATORS: native.Array<com.fasterxml.jackson.databind.deser.ValueInstantiators>;
						public static DEFAULT_KEY_DESERIALIZERS: native.Array<com.fasterxml.jackson.databind.deser.KeyDeserializers>;
						public _additionalDeserializers: native.Array<com.fasterxml.jackson.databind.deser.Deserializers>;
						public _additionalKeyDeserializers: native.Array<com.fasterxml.jackson.databind.deser.KeyDeserializers>;
						public _modifiers: native.Array<com.fasterxml.jackson.databind.deser.BeanDeserializerModifier>;
						public _abstractTypeResolvers: native.Array<com.fasterxml.jackson.databind.AbstractTypeResolver>;
						public _valueInstantiators: native.Array<com.fasterxml.jackson.databind.deser.ValueInstantiators>;
						public constructor(param0: native.Array<com.fasterxml.jackson.databind.deser.Deserializers>, param1: native.Array<com.fasterxml.jackson.databind.deser.KeyDeserializers>, param2: native.Array<com.fasterxml.jackson.databind.deser.BeanDeserializerModifier>, param3: native.Array<com.fasterxml.jackson.databind.AbstractTypeResolver>, param4: native.Array<com.fasterxml.jackson.databind.deser.ValueInstantiators>);
						public constructor();
						public withAbstractTypeResolver(param0: com.fasterxml.jackson.databind.AbstractTypeResolver): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public deserializers(): java.lang.Iterable<com.fasterxml.jackson.databind.deser.Deserializers>;
						public keyDeserializers(): java.lang.Iterable<com.fasterxml.jackson.databind.deser.KeyDeserializers>;
						public deserializerModifiers(): java.lang.Iterable<com.fasterxml.jackson.databind.deser.BeanDeserializerModifier>;
						public hasValueInstantiators(): boolean;
						public hasAbstractTypeResolvers(): boolean;
						public hasDeserializers(): boolean;
						public hasKeyDeserializers(): boolean;
						public valueInstantiators(): java.lang.Iterable<com.fasterxml.jackson.databind.deser.ValueInstantiators>;
						public withAdditionalKeyDeserializers(param0: com.fasterxml.jackson.databind.deser.KeyDeserializers): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public withValueInstantiators(param0: com.fasterxml.jackson.databind.deser.ValueInstantiators): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public hasDeserializerModifiers(): boolean;
						public abstractTypeResolvers(): java.lang.Iterable<com.fasterxml.jackson.databind.AbstractTypeResolver>;
						public withAdditionalDeserializers(param0: com.fasterxml.jackson.databind.deser.Deserializers): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public withDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace cfg {
					export abstract class HandlerInstantiator {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.HandlerInstantiator>;
						public constructor();
						public objectIdGeneratorInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
						public converterInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public namingStrategyInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public serializerInstance(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public deserializerInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public valueInstantiatorInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public typeResolverBuilderInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public typeIdResolverInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
						public virtualPropertyWriterInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
						public keyDeserializerInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.KeyDeserializer;
						public resolverIdGeneratorInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdResolver;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace cfg {
					export abstract class MapperConfig<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.MapperConfig<any>>;
						public static EMPTY_INCLUDE: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public static EMPTY_FORMAT: com.fasterxml.jackson.annotation.JsonFormat.Value;
						public _mapperFeatures: number;
						public _base: com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getHandlerInstantiator(): com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
						public typeResolverBuilderInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public compileString(param0: string): com.fasterxml.jackson.core.SerializableString;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<T>, param1: number);
						public getLocale(): java.util.Locale;
						public getSubtypeResolver(): com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
						public typeIdResolverInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
						public canOverrideAccessModifiers(): boolean;
						public constructType(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.JavaType;
						public getDefaultPropertyInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getActiveView(): java.lang.Class<any>;
						public with(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): T;
						public hasMapperFeatures(param0: number): boolean;
						public isAnnotationProcessingEnabled(): boolean;
						public without(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): T;
						public getPropertyNamingStrategy(): com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public introspectDirectClassAnnotations(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.BeanDescription;
						public findRootName(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.PropertyName;
						public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.BaseSettings, param1: number);
						public introspectClassAnnotations(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.BeanDescription;
						public getDateFormat(): java.text.DateFormat;
						public getAttributes(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public getDefaultVisibilityChecker(): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<T>, param1: com.fasterxml.jackson.databind.cfg.BaseSettings);
						public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
						public introspectClassAnnotations(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<T>);
						public getBase64Variant(): com.fasterxml.jackson.core.Base64Variant;
						public findRootName(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.PropertyName;
						public shouldSortPropertiesAlphabetically(): boolean;
						public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
						public constructType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
						public constructSpecializedType(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public useRootWrapping(): boolean;
						public getTimeZone(): java.util.TimeZone;
						public getClassIntrospector(): com.fasterxml.jackson.databind.introspect.ClassIntrospector;
						public static collectFeatureDefaults(param0: java.lang.Class): number;
						public introspectDirectClassAnnotations(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
						public getDefaultPropertyInclusion(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getDefaultTyper(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): T;
						public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace cfg {
					export abstract class MapperConfigBase<CFG, T>  extends com.fasterxml.jackson.databind.cfg.MapperConfig<any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>>;
						public _mixIns: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
						public _subtypeResolver: com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
						public _rootName: com.fasterxml.jackson.databind.PropertyName;
						public _view: java.lang.Class<any>;
						public _attributes: com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public _rootNames: com.fasterxml.jackson.databind.util.RootNameLookup;
						public with(param0: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): any;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: number);
						public getFullRootName(): com.fasterxml.jackson.databind.PropertyName;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.PropertyName);
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: java.lang.Class<any>);
						public with(param0: com.fasterxml.jackson.core.Base64Variant): any;
						public withoutAttribute(param0: any): any;
						public getSubtypeResolver(): com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.BaseSettings, param1: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, param2: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, param3: com.fasterxml.jackson.databind.util.RootNameLookup);
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.cfg.ContextAttributes);
						public with(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): any;
						public withRootName(param0: string): any;
						public getActiveView(): java.lang.Class<any>;
						public with(param0: java.util.Locale): any;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.jsontype.SubtypeResolver);
						public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): any;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, param2: com.fasterxml.jackson.databind.util.RootNameLookup);
						public with(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): any;
						public with(param0: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): any;
						public findRootName(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.PropertyName;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.BaseSettings, param1: number);
						public withAppendedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
						public getAttributes(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): any;
						public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: number);
						public withAttributes(param0: java.util.Map<any,any>): any;
						public with(param0: java.util.TimeZone): any;
						public with(param0: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): any;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
						public findRootName(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.PropertyName;
						public withInsertedAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
						public with(param0: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): any;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>);
						public with(param0: native.Array<com.fasterxml.jackson.databind.MapperFeature>): any;
						public with(param0: com.fasterxml.jackson.databind.type.TypeFactory): any;
						public mixInCount(): number;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>);
						public getRootName(): string;
						public with(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
						public with(param0: java.text.DateFormat): any;
						public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
						public withView(param0: java.lang.Class<any>): any;
						public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.cfg.BaseSettings);
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, param1: com.fasterxml.jackson.databind.cfg.BaseSettings);
						public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): any;
						public withAttribute(param0: any, param1: any): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace cfg {
					export class PackageVersion extends com.fasterxml.jackson.core.Versioned {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.PackageVersion>;
						public static VERSION: com.fasterxml.jackson.core.Version;
						public constructor();
						public version(): com.fasterxml.jackson.core.Version;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace cfg {
					export class SerializerFactoryConfig {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig>;
						public static NO_SERIALIZERS: native.Array<com.fasterxml.jackson.databind.ser.Serializers>;
						public static NO_MODIFIERS: native.Array<com.fasterxml.jackson.databind.ser.BeanSerializerModifier>;
						public _additionalSerializers: native.Array<com.fasterxml.jackson.databind.ser.Serializers>;
						public _additionalKeySerializers: native.Array<com.fasterxml.jackson.databind.ser.Serializers>;
						public _modifiers: native.Array<com.fasterxml.jackson.databind.ser.BeanSerializerModifier>;
						public withAdditionalKeySerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public withAdditionalSerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public hasKeySerializers(): boolean;
						public constructor();
						public hasSerializerModifiers(): boolean;
						public serializerModifiers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.BeanSerializerModifier>;
						public hasSerializers(): boolean;
						public keySerializers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>;
						public constructor(param0: native.Array<com.fasterxml.jackson.databind.ser.Serializers>, param1: native.Array<com.fasterxml.jackson.databind.ser.Serializers>, param2: native.Array<com.fasterxml.jackson.databind.ser.BeanSerializerModifier>);
						public withSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public serializers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class AbstractDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.AbstractDeserializer>;
						public _baseType: com.fasterxml.jackson.databind.JavaType;
						public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public _backRefProperties: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _acceptString: boolean;
						public _acceptBoolean: boolean;
						public _acceptInt: boolean;
						public _acceptDouble: boolean;
						public handledType(): java.lang.Class<any>;
						public _deserializeIfNatural(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor();
						public findBackReference(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public static constructForNonPOJO(param0: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.AbstractDeserializer;
						public _deserializeFromObjectId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
						public isCachable(): boolean;
						public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, param1: com.fasterxml.jackson.databind.BeanDescription, param2: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>);
						public constructor(param0: com.fasterxml.jackson.databind.BeanDescription);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export abstract class BasicDeserializerFactory extends com.fasterxml.jackson.databind.deser.DeserializerFactory {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory>;
						public static UNWRAPPED_CREATOR_PARAM_NAME: com.fasterxml.jackson.databind.PropertyName;
						public _factoryConfig: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public createCollectionDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createArrayDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createKeyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
						public _findJsonValueFor(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public findPropertyTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public _checkIfCreatorPropertyBased(param0: com.fasterxml.jackson.databind.AnnotationIntrospector, param1: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param2: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition): boolean;
						public createMapLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public _findParamName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, param1: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.PropertyName;
						public _findCustomCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findDefaultDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor();
						public createMapDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _findCustomCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _findExplicitParamName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, param1: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.PropertyName;
						public createReferenceDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _findImplicitParamName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, param1: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.PropertyName;
						public _findCustomTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createTreeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public createCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructCreatorProperty(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.PropertyName, param3: number, param4: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, param5: any): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public _hasExplicitParamName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, param1: com.fasterxml.jackson.databind.AnnotationIntrospector): boolean;
						public _findCreatorsFromProperties(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription): java.util.Map<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,native.Array<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>>;
						public _findCustomReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig);
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public findOptionalStdDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _findCustomArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withAdditionalKeyDeserializers(param0: com.fasterxml.jackson.databind.deser.KeyDeserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public withAdditionalDeserializers(param0: com.fasterxml.jackson.databind.deser.Deserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public createEnumDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findDeserializerFromAnnotation(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _mapAbstractCollectionType(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.type.CollectionType;
						public getFactoryConfig(): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public modifyTypeByAnnotation(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public resolveType(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.JavaType;
						public withAbstractTypeResolver(param0: com.fasterxml.jackson.databind.AbstractTypeResolver): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _findCustomMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _findCustomMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _addDeserializerConstructors(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>, param3: com.fasterxml.jackson.databind.AnnotationIntrospector, param4: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, param5: java.util.Map<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,native.Array<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>>): void;
						public _handleSingleArgumentConstructor(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>, param3: com.fasterxml.jackson.databind.AnnotationIntrospector, param4: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, param5: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor, param6: boolean, param7: boolean): boolean;
						public _addDeserializerFactoryMethods(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>, param3: com.fasterxml.jackson.databind.AnnotationIntrospector, param4: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, param5: java.util.Map<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,native.Array<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>>): void;
						public _valueInstantiatorInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: any): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public _findRemappedType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _findCustomEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _constructDefaultValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public mapAbstractType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withValueInstantiators(param0: com.fasterxml.jackson.databind.deser.ValueInstantiators): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _handleSingleArgumentFactory(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>, param3: com.fasterxml.jackson.databind.AnnotationIntrospector, param4: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, param5: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param6: boolean): boolean;
						public findKeyDeserializerFromAnnotation(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.KeyDeserializer;
						public constructEnumResolver(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.util.EnumResolver;
						public findPropertyContentTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public _checkImplicitlyNamedConstructors(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>, param3: com.fasterxml.jackson.databind.AnnotationIntrospector, param4: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, param5: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>): void;
						public _findCustomBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class BeanDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializer>;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: java.util.HashSet<string>);
						public deserializeWithExternalTypeId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
						public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializer;
						public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _deserializeOther(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.core.JsonToken): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						public deserializeUsingPropertyBasedWithUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _deserializeWithErrorWrapping(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.deser.SettableBeanProperty): any;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
						public constructor(param0: java.lang.Class<any>);
						public deserializeWithView(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: java.lang.Class<any>): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
						public _missingToken(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public withIgnorableProperties(param0: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
						public deserializeFromNull(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor();
						public deserializeWithExternalTypeId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
						public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
						public deserializeWithUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, param3: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, param4: java.util.HashSet<string>, param5: boolean, param6: boolean);
						public deserializeUsingPropertyBasedWithExternalTypeId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeWithUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withIgnorableProperties(param0: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.BeanDeserializer;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export abstract class BeanDeserializerBase extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializerBase>;
						public static TEMP_PROPERTY_NAME: com.fasterxml.jackson.databind.PropertyName;
						public _beanType: com.fasterxml.jackson.databind.JavaType;
						public _serializationShape: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _arrayDelegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _propertyBasedCreator: com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
						public _nonStandardCreation: boolean;
						public _vanillaProcessing: boolean;
						public _beanProperties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
						public _injectables: native.Array<com.fasterxml.jackson.databind.deser.impl.ValueInjector>;
						public _anySetter: com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public _ignorableProps: java.util.HashSet<string>;
						public _ignoreAllUnknown: boolean;
						public _needViewProcesing: boolean;
						public _backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _subDeserializers: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
						public _unwrappedPropertyHandler: com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler;
						public _externalTypeIdHandler: com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
						public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: boolean);
						public _convertObjectId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): any;
						public deserializeFromString(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: java.util.HashSet<string>);
						public deserializeFromObjectId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getBeanClass(): java.lang.Class<any>;
						public handleIgnoredProperty(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: string): void;
						public _resolveInnerClassValuedProperty(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public getPropertyCount(): number;
						public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						public findConvertingDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findProperty(param0: number): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public properties(): java.util.Iterator<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public handleUnknownProperties(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any, param2: com.fasterxml.jackson.databind.util.TokenBuffer): any;
						public wrapAndThrow(param0: java.lang.Throwable, param1: any, param2: string, param3: com.fasterxml.jackson.databind.DeserializationContext): void;
						public handleUnknownProperty(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: string): void;
						public _resolvedObjectIdProperty(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public deserializeFromBoolean(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
						public withIgnorableProperties(param0: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
						public injectValues(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): void;
						public getValueType(): com.fasterxml.jackson.databind.JavaType;
						public wrapInstantiationProblem(param0: java.lang.Throwable, param1: com.fasterxml.jackson.databind.DeserializationContext): void;
						public constructor();
						public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public deserializeWithObjectId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public isCachable(): boolean;
						public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, param3: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, param4: java.util.HashSet<string>, param5: boolean, param6: boolean);
						public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public findBackReference(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public hasProperty(param0: string): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public hasViews(): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
						public constructor(param0: java.lang.Class<any>);
						public findProperty(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public _findSubclassDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any, param2: com.fasterxml.jackson.databind.util.TokenBuffer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public deserializeFromEmbedded(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public replaceProperty(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public handledType(): java.lang.Class<any>;
						public getKnownPropertyNames(): java.util.Collection<any>;
						public _resolveUnwrappedProperty(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public deserializeFromDouble(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _handleTypedObjectId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: any): any;
						public _resolveManagedReferenceProperty(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public handleUnknownVanilla(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: string): void;
						public handlePolymorphic(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: com.fasterxml.jackson.databind.util.TokenBuffer): any;
						public wrapAndThrow(param0: java.lang.Throwable, param1: any, param2: number, param3: com.fasterxml.jackson.databind.DeserializationContext): void;
						public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
						public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public findProperty(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public creatorProperties(): java.util.Iterator<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public deserializeFromArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeFromObjectUsingNonDefault(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeFromNumber(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class BeanDeserializerBuilder {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder>;
						public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
						public _defaultViewInclusion: boolean;
						public _caseInsensitivePropertyComparison: boolean;
						public _properties: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _injectables: java.util.List<com.fasterxml.jackson.databind.deser.impl.ValueInjector>;
						public _backRefProperties: java.util.HashMap<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _ignorableProps: java.util.HashSet<string>;
						public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public _anySetter: com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public _ignoreAllUnknown: boolean;
						public _buildMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public _builderConfig: com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public addBackReferenceProperty(param0: string, param1: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public constructor(param0: com.fasterxml.jackson.databind.BeanDescription, param1: com.fasterxml.jackson.databind.DeserializationConfig);
						public hasProperty(param0: com.fasterxml.jackson.databind.PropertyName): boolean;
						public getBuilderConfig(): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder);
						public setIgnoreUnknownProperties(param0: boolean): void;
						public setValueInstantiator(param0: com.fasterxml.jackson.databind.deser.ValueInstantiator): void;
						public getInjectables(): java.util.List<com.fasterxml.jackson.databind.deser.impl.ValueInjector>;
						public addIgnorable(param0: string): void;
						public getBuildMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public build(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public buildAbstract(): com.fasterxml.jackson.databind.deser.AbstractDeserializer;
						public buildBuilderBased(param0: com.fasterxml.jackson.databind.JavaType, param1: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public setPOJOBuilder(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value): void;
						public findProperty(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public setObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): void;
						public getAnySetter(): com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public setAnySetter(param0: com.fasterxml.jackson.databind.deser.SettableAnyProperty): void;
						public getProperties(): java.util.Iterator<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public addOrReplaceProperty(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: boolean): void;
						public addProperty(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public addCreatorProperty(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public addInjectable(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param4: any): void;
						public removeProperty(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class BeanDeserializerFactory extends com.fasterxml.jackson.databind.deser.BasicDeserializerFactory {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory>;
						public static instance: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
						public addObjectIdReader(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): void;
						public addInjectables(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): void;
						public constructor();
						public materializeAbstractType(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JavaType;
						public buildBuilderBasedDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public addBeanProps(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): void;
						public createBuilderBasedDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public filterBeanProps(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, param3: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>, param4: java.util.Set<string>): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public constructAnySetter(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public constructBeanDeserializerBuilder(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public buildThrowableDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public isIgnorableType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: java.lang.Class<any>, param3: java.util.Map<java.lang.Class<any>,java.lang.Boolean>): boolean;
						public createBeanDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findStdDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public addReferenceProperties(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): void;
						public constructSetterlessProperty(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public isPotentialBeanType(param0: java.lang.Class<any>): boolean;
						public constructSettableProperty(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param3: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public buildBeanDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export abstract class BeanDeserializerModifier {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializerModifier>;
						public modifyCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor();
						public modifyArrayDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public updateProperties(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public modifyKeyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.KeyDeserializer): com.fasterxml.jackson.databind.KeyDeserializer;
						public modifyReferenceDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyEnumDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyCollectionDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public updateBuilder(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
						public modifyMapLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyMapDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class BuilderBasedDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer>;
						public _buildMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: java.util.HashSet<string>);
						public constructor(param0: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, param1: com.fasterxml.jackson.databind.util.NameTransformer);
						public deserializeWithExternalTypeId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
						public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer);
						public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer;
						public finishBuild(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						public deserializeUsingPropertyBasedWithUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
						public constructor(param0: java.lang.Class<any>);
						public deserializeWithView(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: java.lang.Class<any>): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
						public constructor(param0: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, param1: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
						public constructor(param0: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, param1: java.util.HashSet<string>);
						public constructor(param0: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, param1: boolean);
						public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
						public withIgnorableProperties(param0: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
						public constructor();
						public deserializeWithExternalTypeId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public withIgnorableProperties(param0: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
						public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
						public deserializeWithUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, param3: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, param4: java.util.HashSet<string>, param5: boolean, param6: boolean);
						public deserializeUsingPropertyBasedWithExternalTypeId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeWithUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class ContextualDeserializer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ContextualDeserializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.ContextualDeserializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						});
						public constructor();
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class ContextualKeyDeserializer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ContextualKeyDeserializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.ContextualKeyDeserializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.KeyDeserializer;
						});
						public constructor();
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.KeyDeserializer;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class CreatorProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.CreatorProperty>;
						public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public _injectableValueId: any;
						public _creatorIndex: number;
						public _fallbackSetter: com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public set(param0: any, param1: any): void;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public isRequired(): boolean;
						public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.CreatorProperty;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations);
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.PropertyName);
						public setAndReturn(param0: any, param1: any): any;
						public getCreatorIndex(): number;
						public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						public withName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.CreatorProperty;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
						public inject(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): void;
						public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: boolean);
						public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public findInjectableValue(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): any;
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public constructor(param0: com.fasterxml.jackson.databind.deser.CreatorProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						public setFallbackSetter(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.PropertyMetadata);
						public constructor(param0: com.fasterxml.jackson.databind.deser.CreatorProperty, param1: com.fasterxml.jackson.databind.PropertyName);
						public toString(): string;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, param6: number, param7: any, param8: com.fasterxml.jackson.databind.PropertyMetadata);
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getInjectableValueId(): any;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyMetadata, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class DataFormatReaders {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DataFormatReaders>;
						public static DEFAULT_MAX_INPUT_LOOKAHEAD: number;
						public _readers: native.Array<com.fasterxml.jackson.databind.ObjectReader>;
						public _optimalMatch: com.fasterxml.jackson.core.format.MatchStrength;
						public _minimalMatch: com.fasterxml.jackson.core.format.MatchStrength;
						public _maxInputLookahead: number;
						public withOptimalMatch(param0: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public with(param0: native.Array<com.fasterxml.jackson.databind.ObjectReader>): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public with(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public findFormat(param0: native.Array<number>): com.fasterxml.jackson.databind.deser.DataFormatReaders.Match;
						public constructor(param0: native.Array<com.fasterxml.jackson.databind.ObjectReader>);
						public withMaxInputLookahead(param0: number): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public findFormat(param0: java.io.InputStream): com.fasterxml.jackson.databind.deser.DataFormatReaders.Match;
						public constructor(param0: java.util.Collection<com.fasterxml.jackson.databind.ObjectReader>);
						public withType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public withMinimalMatch(param0: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public toString(): string;
						public findFormat(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.deser.DataFormatReaders.Match;
					}
					export namespace DataFormatReaders {
						export class AccessorForReader extends com.fasterxml.jackson.core.format.InputAccessor.Std {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DataFormatReaders.AccessorForReader>;
							public constructor(param0: java.io.InputStream, param1: native.Array<number>);
							public nextByte(): number;
							public constructor(param0: native.Array<number>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.DataFormatReaders, param1: native.Array<number>);
							public hasMoreBytes(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.DataFormatReaders, param1: native.Array<number>, param2: number, param3: number);
							public constructor(param0: native.Array<number>, param1: number, param2: number);
							public constructor(param0: com.fasterxml.jackson.databind.deser.DataFormatReaders, param1: java.io.InputStream, param2: native.Array<number>);
							public createMatcher(param0: com.fasterxml.jackson.core.JsonFactory, param1: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.core.format.DataFormatMatcher;
							public createMatcher(param0: com.fasterxml.jackson.databind.ObjectReader, param1: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.databind.deser.DataFormatReaders.Match;
							public reset(): void;
						}
						export class Match {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DataFormatReaders.Match>;
							public _originalStream: java.io.InputStream;
							public _bufferedData: native.Array<number>;
							public _bufferedStart: number;
							public _bufferedLength: number;
							public _match: com.fasterxml.jackson.databind.ObjectReader;
							public _matchStrength: com.fasterxml.jackson.core.format.MatchStrength;
							public hasMatch(): boolean;
							public createParserWithMatch(): com.fasterxml.jackson.core.JsonParser;
							public getReader(): com.fasterxml.jackson.databind.ObjectReader;
							public getMatchedFormatName(): string;
							public constructor(param0: java.io.InputStream, param1: native.Array<number>, param2: number, param3: number, param4: com.fasterxml.jackson.databind.ObjectReader, param5: com.fasterxml.jackson.core.format.MatchStrength);
							public getDataStream(): java.io.InputStream;
							public getMatchStrength(): com.fasterxml.jackson.core.format.MatchStrength;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export abstract class DefaultDeserializationContext extends com.fasterxml.jackson.databind.DeserializationContext {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext>;
						public _objectIds: java.util.LinkedHashMap<com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey,com.fasterxml.jackson.databind.deser.impl.ReadableObjectId>;
						public constructor(param0: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext);
						public constructor();
						public constructor(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory);
						public constructor(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory, param1: com.fasterxml.jackson.databind.deser.DeserializerCache);
						public constructor(param0: com.fasterxml.jackson.databind.DeserializationContext);
						public constructor(param0: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.core.JsonParser, param3: com.fasterxml.jackson.databind.InjectableValues);
						public checkUnresolvedObjectId(): void;
						public with(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
						public createReadableObjectId(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
						public tryToResolveUnresolvedObjectId(param0: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId): boolean;
						public deserializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
						public constructor(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory);
						public constructor(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.core.JsonParser, param3: com.fasterxml.jackson.databind.InjectableValues);
						public constructor(param0: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory);
						public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param2: com.fasterxml.jackson.annotation.ObjectIdResolver): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
						public keyDeserializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.KeyDeserializer;
						public createInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.core.JsonParser, param2: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
						public copy(): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					}
					export namespace DefaultDeserializationContext {
						export class Impl extends com.fasterxml.jackson.databind.deser.DefaultDeserializationContext {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl>;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.core.JsonParser, param3: com.fasterxml.jackson.databind.InjectableValues);
							public constructor(param0: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl);
							public with(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public constructor(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory);
							public constructor(param0: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.core.JsonParser, param3: com.fasterxml.jackson.databind.InjectableValues);
							public constructor(param0: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory);
							public constructor(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.core.JsonParser, param3: com.fasterxml.jackson.databind.InjectableValues);
							public constructor(param0: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext);
							public constructor(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory);
							public copy(): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public createInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.core.JsonParser, param2: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public constructor(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory, param1: com.fasterxml.jackson.databind.deser.DeserializerCache);
							public constructor(param0: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory);
							public constructor(param0: com.fasterxml.jackson.databind.DeserializationContext);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export abstract class DeserializationProblemHandler {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DeserializationProblemHandler>;
						public constructor();
						public handleUnknownProperty(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.core.JsonParser, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: any, param4: string): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class DeserializerCache {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DeserializerCache>;
						public _cachedDeserializers: java.util.concurrent.ConcurrentHashMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
						public _incompleteDeserializers: java.util.HashMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
						public findValueDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor();
						public _handleUnknownValueDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public cachedDeserializersCount(): number;
						public _handleUnknownKeyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
						public _createDeserializer2(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findDeserializerFromAnnotation(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _createAndCache2(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _createAndCacheValueDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _createDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findKeyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
						public findConverter(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public flushCachedDeserializers(): void;
						public _findCachedDeserializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findConvertingDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public hasValueDeserializerFor(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.DeserializerFactory, param2: com.fasterxml.jackson.databind.JavaType): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export abstract class DeserializerFactory {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DeserializerFactory>;
						public static NO_DESERIALIZERS: native.Array<com.fasterxml.jackson.databind.deser.Deserializers>;
						public withAdditionalKeyDeserializers(param0: com.fasterxml.jackson.databind.deser.KeyDeserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public constructor();
						public createMapDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withAdditionalDeserializers(param0: com.fasterxml.jackson.databind.deser.Deserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public createBuilderBasedDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createReferenceDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createCollectionDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createEnumDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createTreeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createArrayDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createKeyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
						public withDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public createCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createBeanDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createMapLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public mapAbstractType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public findTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public withValueInstantiators(param0: com.fasterxml.jackson.databind.deser.ValueInstantiators): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public withAbstractTypeResolver(param0: com.fasterxml.jackson.databind.AbstractTypeResolver): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.ValueInstantiator;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class Deserializers {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.Deserializers>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.Deserializers interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						});
						public constructor();
						public findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
					export namespace Deserializers {
						export class Base extends com.fasterxml.jackson.databind.deser.Deserializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.Deserializers.Base>;
							public constructor();
							public findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class KeyDeserializers {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.KeyDeserializers>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.KeyDeserializers interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							findKeyDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
						});
						public constructor();
						public findKeyDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class ResolvableDeserializer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ResolvableDeserializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.ResolvableDeserializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
						});
						public constructor();
						public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class SettableAnyProperty {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.SettableAnyProperty>;
						public _property: com.fasterxml.jackson.databind.BeanProperty;
						public _setter: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public set(param0: any, param1: string, param2: any): void;
						public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: string): void;
						public getProperty(): com.fasterxml.jackson.databind.BeanProperty;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public hasValueDeserializer(): boolean;
						public _throwAsIOE(param0: java.lang.Exception, param1: string, param2: any): void;
						public constructor(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
						public constructor(param0: com.fasterxml.jackson.databind.deser.SettableAnyProperty);
						public toString(): string;
					}
					export namespace SettableAnyProperty {
						export class AnySetterReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.SettableAnyProperty.AnySetterReferring>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, param1: java.lang.Class<any>);
							public handleResolvedForwardReference(param0: any, param1: any): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableAnyProperty, param1: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, param2: java.lang.Class<any>, param3: any, param4: string);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export abstract class SettableBeanProperty extends com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public static MISSING_VALUE_DESERIALIZER: com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _propName: com.fasterxml.jackson.databind.PropertyName;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _wrapperName: com.fasterxml.jackson.databind.PropertyName;
						public _contextAnnotations: com.fasterxml.jackson.databind.util.Annotations;
						public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public _managedReferenceName: string;
						public _objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public _viewMatcher: com.fasterxml.jackson.databind.util.ViewMatcher;
						public _propertyIndex: number;
						public isRequired(): boolean;
						public getValueTypeDeserializer(): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations);
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public setAndReturn(param0: any, param1: any): any;
						public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
						public withName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public _throwAsIOE(param0: java.lang.Exception): java.io.IOException;
						public setViews(param0: native.Array<java.lang.Class<any>>): void;
						public toString(): string;
						public _throwAsIOE(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Exception, param2: any): void;
						public _throwAsIOE(param0: com.fasterxml.jackson.core.JsonParser, param1: java.lang.Exception): java.io.IOException;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public getPropertyIndex(): number;
						public hasValueDeserializer(): boolean;
						public getInjectableValueId(): any;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public set(param0: any, param1: any): void;
						public getManagedReferenceName(): string;
						public getDeclaringClass(): java.lang.Class<any>;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public withSimpleName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public hasViews(): boolean;
						public setManagedReferenceName(param0: string): void;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.PropertyName);
						public assignIndex(param0: number): void;
						public _throwAsIOE(param0: java.lang.Exception, param1: any): void;
						public getCreatorIndex(): number;
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						public setObjectIdInfo(param0: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): void;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
						public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: boolean);
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public getValueDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.PropertyMetadata);
						public hasValueTypeDeserializer(): boolean;
						public visibleInView(param0: java.lang.Class<any>): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyMetadata, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
						public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class UnresolvedForwardReference extends com.fasterxml.jackson.databind.JsonMappingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.UnresolvedForwardReference>;
						public getMessage(): string;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation);
						public getUnresolvedIds(): java.util.List<com.fasterxml.jackson.databind.deser.UnresolvedId>;
						public constructor(param0: java.io.Closeable, param1: string, param2: com.fasterxml.jackson.core.JsonLocation);
						public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: com.fasterxml.jackson.core.JsonLocation, param3: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId);
						public getRoid(): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Throwable);
						public constructor(param0: java.lang.Throwable);
						public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string);
						public constructor(param0: java.io.Closeable, param1: string);
						public getUnresolvedId(): any;
						public constructor(param0: string, param1: java.lang.Throwable);
						public constructor(param0: string);
						public constructor(param0: java.io.Closeable, param1: string, param2: java.lang.Throwable);
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId);
						public addUnresolvedId(param0: any, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.core.JsonLocation): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class UnresolvedId {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.UnresolvedId>;
						public constructor(param0: any, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.core.JsonLocation);
						public getId(): any;
						public getLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getType(): java.lang.Class<any>;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export abstract class ValueInstantiator {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ValueInstantiator>;
						public canCreateFromString(): boolean;
						public createUsingDelegate(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): any;
						public getDelegateType(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
						public getDefaultCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public createFromBoolean(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: boolean): any;
						public createUsingDefault(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getArrayDelegateType(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
						public getDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public canCreateUsingArrayDelegate(): boolean;
						public createFromObjectWith(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: native.Array<any>): any;
						public canCreateUsingDefault(): boolean;
						public getFromObjectArguments(param0: com.fasterxml.jackson.databind.DeserializationConfig): native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public constructor();
						public createFromDouble(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: number): any;
						public getIncompleteParameter(): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public canCreateFromBoolean(): boolean;
						public canCreateFromObjectWith(): boolean;
						public createFromString(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string): any;
						public canCreateFromInt(): boolean;
						public canCreateFromDouble(): boolean;
						public getWithArgsCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public _createFromStringFallbacks(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string): any;
						public canCreateFromLong(): boolean;
						public createFromInt(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: number): any;
						public getValueTypeDesc(): string;
						public createFromLong(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: number): any;
						public createUsingArrayDelegate(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): any;
						public canCreateUsingDelegate(): boolean;
						public canInstantiate(): boolean;
						public getArrayDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export class ValueInstantiators {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ValueInstantiators>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.ValueInstantiators interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						});
						public constructor();
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
					}
					export namespace ValueInstantiators {
						export class Base extends com.fasterxml.jackson.databind.deser.ValueInstantiators {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ValueInstantiators.Base>;
							public constructor();
							public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class BeanAsArrayBuilderDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer>;
							public _delegate: com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public _orderedProperties: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public _buildMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, param3: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, param4: java.util.HashSet<string>, param5: boolean, param6: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: boolean);
							public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer;
							public finishBuild(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public _deserializeFromNonArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod);
							public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer;
							public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
							public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor();
							public withIgnorableProperties(param0: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer;
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(param0: java.lang.Class<any>);
							public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withIgnorableProperties(param0: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public _deserializeNonVanilla(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: java.util.HashSet<string>);
							public _deserializeWithCreator(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class BeanAsArrayDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer>;
							public _delegate: com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public _orderedProperties: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, param3: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, param4: java.util.HashSet<string>, param5: boolean, param6: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public _deserializeFromNonArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
							public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
							public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(param0: java.lang.Class<any>);
							public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withIgnorableProperties(param0: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public _deserializeNonVanilla(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer;
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: java.util.HashSet<string>);
							public _deserializeWithCreator(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withIgnorableProperties(param0: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer;
							public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class BeanPropertyMap extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap>;
							public _caseInsensitive: boolean;
							public find(param0: number): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public size(): number;
							public assignIndexes(): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public getPropertyName(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): string;
							public find(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public renameAll(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public static construct(param0: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>, param1: boolean): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public toString(): string;
							public _rename(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public wrapAndThrow(param0: java.lang.Throwable, param1: any, param2: string, param3: com.fasterxml.jackson.databind.DeserializationContext): void;
							public remove(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
							public replace(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
							public findDeserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: string): boolean;
							public getPropertiesInInsertionOrder(): native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public constructor(param0: boolean, param1: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>);
							public init(param0: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): void;
							public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public withProperty(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class CreatorCollector {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.CreatorCollector>;
							public static C_DEFAULT: number;
							public static C_STRING: number;
							public static C_INT: number;
							public static C_LONG: number;
							public static C_DOUBLE: number;
							public static C_BOOLEAN: number;
							public static C_DELEGATE: number;
							public static C_PROPS: number;
							public static C_ARRAY_DELEGATE: number;
							public static TYPE_DESCS: native.Array<string>;
							public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
							public _canFixAccess: boolean;
							public _forceAccess: boolean;
							public _creators: native.Array<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams>;
							public _explicitCreators: number;
							public _hasNonDefaultCreator: boolean;
							public _delegateArgs: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public _arrayDelegateArgs: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public _propertyBasedArgs: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public _incompleteParameter: com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
							public addIncompeteParameter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): void;
							public hasPropertyBasedCreator(): boolean;
							public setDefaultCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public addIntCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: boolean): void;
							public addDoubleCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: boolean): void;
							public hasDefaultCreator(): boolean;
							public addDoubleCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public addBooleanCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public addDelegatingCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: boolean, param2: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): void;
							public hasDelegatingCreator(): boolean;
							public addLongCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: boolean): void;
							public addPropertyCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: native.Array<com.fasterxml.jackson.databind.deser.CreatorProperty>): void;
							public constructor(param0: com.fasterxml.jackson.databind.BeanDescription, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>);
							public addLongCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public verifyNonDup(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: number, param2: boolean): void;
							public addStringCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public addStringCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: boolean): void;
							public addIntCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public addPropertyCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: boolean, param2: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): void;
							public addDelegatingCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: native.Array<com.fasterxml.jackson.databind.deser.CreatorProperty>): void;
							public constructValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public addBooleanCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: boolean): void;
						}
						export namespace CreatorCollector {
							export class Vanilla extends com.fasterxml.jackson.databind.deser.ValueInstantiator {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.CreatorCollector.Vanilla>;
								public static TYPE_COLLECTION: number;
								public static TYPE_MAP: number;
								public static TYPE_HASH_MAP: number;
								public canInstantiate(): boolean;
								public constructor(param0: number);
								public canCreateUsingDefault(): boolean;
								public constructor();
								public createUsingDefault(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getValueTypeDesc(): string;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class ExternalTypeHandler {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler>;
							public constructor(param0: native.Array<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.ExtTypedProperty>, param1: java.util.HashMap<string,java.lang.Integer>, param2: native.Array<string>, param3: native.Array<com.fasterxml.jackson.databind.util.TokenBuffer>);
							public start(): com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
							public _deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: number, param3: string): any;
							public handlePropertyValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: string, param3: any): boolean;
							public complete(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer, param3: com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator): any;
							public handleTypePropertyValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: string, param3: any): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler);
							public complete(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public _deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: number, param4: string): void;
						}
						export namespace ExternalTypeHandler {
							export class Builder {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder>;
								public build(): com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
								public constructor();
								public addExternal(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): void;
							}
							export class ExtTypedProperty {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.ExtTypedProperty>;
								public hasTypePropertyName(param0: string): boolean;
								public getTypePropertyName(): string;
								public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
								public getDefaultTypeId(): string;
								public getProperty(): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
								public hasDefaultType(): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class FailingDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.FailingDeserializer>;
							public _message: string;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: string);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class FieldProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.FieldProperty>;
							public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedField;
							public _field: java.lang.reflect.Field;
							public isVirtual(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.impl.FieldProperty;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyMetadata, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations);
							public withName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.FieldProperty);
							public set(param0: any, param1: any): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.PropertyMetadata);
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.FieldProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.impl.FieldProperty;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations, param4: com.fasterxml.jackson.databind.introspect.AnnotatedField);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public setAndReturn(param0: any, param1: any): any;
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.FieldProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class InnerClassProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.InnerClassProperty>;
							public _delegate: com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public _creator: java.lang.reflect.Constructor<any>;
							public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
							public isVirtual(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyMetadata, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.InnerClassProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations);
							public withName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public set(param0: any, param1: any): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.PropertyMetadata);
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.InnerClassProperty, param1: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor);
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.InnerClassProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.impl.InnerClassProperty;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.impl.InnerClassProperty;
							public setAndReturn(param0: any, param1: any): any;
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: java.lang.reflect.Constructor<any>);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class ManagedReferenceProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty>;
							public _referenceName: string;
							public _isContainer: boolean;
							public _managedProperty: com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public _backProperty: com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public isVirtual(): boolean;
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyMetadata, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations);
							public withName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty;
							public set(param0: any, param1: any): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: string, param2: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param3: com.fasterxml.jackson.databind.util.Annotations, param4: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.PropertyMetadata);
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public setAndReturn(param0: any, param1: any): any;
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class MethodProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.MethodProperty>;
							public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
							public _setter: java.lang.reflect.Method;
							public isVirtual(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.MethodProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.MethodProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.impl.MethodProperty;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyMetadata, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.MethodProperty, param1: java.lang.reflect.Method);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations);
							public withName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public set(param0: any, param1: any): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.PropertyMetadata);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.impl.MethodProperty;
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations, param4: com.fasterxml.jackson.databind.introspect.AnnotatedMethod);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public setAndReturn(param0: any, param1: any): any;
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class NoClassDefFoundDeserializer<T>  extends com.fasterxml.jackson.databind.JsonDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.NoClassDefFoundDeserializer<any>>;
							public constructor();
							public constructor(param0: java.lang.NoClassDefFoundError);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class NullProvider {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.NullProvider>;
							public nullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: any);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class ObjectIdReader {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ObjectIdReader>;
							public _idType: com.fasterxml.jackson.databind.JavaType;
							public propertyName: com.fasterxml.jackson.databind.PropertyName;
							public generator: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public resolver: com.fasterxml.jackson.annotation.ObjectIdResolver;
							public _deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public idProperty: com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public isValidReferencePropertyName(param0: string, param1: com.fasterxml.jackson.core.JsonParser): boolean;
							public getDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getIdType(): com.fasterxml.jackson.databind.JavaType;
							public static construct(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.PropertyName, param2: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param5: com.fasterxml.jackson.annotation.ObjectIdResolver): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.PropertyName, param2: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param5: com.fasterxml.jackson.annotation.ObjectIdResolver);
							public readObjectReference(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.PropertyName, param2: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public static construct(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.PropertyName, param2: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
							public maySerializeAsObject(): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class ObjectIdReferenceProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty>;
							public isVirtual(): boolean;
							public getCreatorIndex(): number;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyMetadata, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations);
							public withName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public set(param0: any, param1: any): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.PropertyMetadata);
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public setAndReturn(param0: any, param1: any): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.introspect.ObjectIdInfo);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
						export namespace ObjectIdReferenceProperty {
							export class PropertyReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty.PropertyReferring>;
								public _pojo: any;
								public constructor(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty, param1: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, param2: java.lang.Class<any>, param3: any);
								public constructor(param0: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, param1: java.lang.Class<any>);
								public handleResolvedForwardReference(param0: any, param1: any): void;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class ObjectIdValueProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty>;
							public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
							public isVirtual(): boolean;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty;
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyMetadata, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations);
							public withName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public set(param0: any, param1: any): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.PropertyMetadata);
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public setAndReturn(param0: any, param1: any): any;
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader, param1: com.fasterxml.jackson.databind.PropertyMetadata);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class PropertyBasedCreator {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator>;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _propertyLookup: java.util.HashMap<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public _propertyCount: number;
							public _allProperties: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public build(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer): any;
							public properties(): java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public startBuilding(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
							public static construct(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.deser.ValueInstantiator, param2: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
							public constructor(param0: com.fasterxml.jackson.databind.deser.ValueInstantiator, param1: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>);
							public findCreatorProperty(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findCreatorProperty(param0: number): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class PropertyBasedObjectIdGenerator extends com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public generateId(param0: any): any;
							public key(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
							public forScope(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public newForSerialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export abstract class PropertyValue {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValue>;
							public next: com.fasterxml.jackson.databind.deser.impl.PropertyValue;
							public value: any;
							public assign(param0: any): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.PropertyValue, param1: any);
						}
						export namespace PropertyValue {
							export class Any extends com.fasterxml.jackson.databind.deser.impl.PropertyValue {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValue.Any>;
								public assign(param0: any): void;
								public constructor(param0: com.fasterxml.jackson.databind.deser.impl.PropertyValue, param1: any);
								public constructor(param0: com.fasterxml.jackson.databind.deser.impl.PropertyValue, param1: any, param2: com.fasterxml.jackson.databind.deser.SettableAnyProperty, param3: string);
							}
							export class Map extends com.fasterxml.jackson.databind.deser.impl.PropertyValue {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValue.Map>;
								public assign(param0: any): void;
								public constructor(param0: com.fasterxml.jackson.databind.deser.impl.PropertyValue, param1: any);
								public constructor(param0: com.fasterxml.jackson.databind.deser.impl.PropertyValue, param1: any, param2: any);
							}
							export class Regular extends com.fasterxml.jackson.databind.deser.impl.PropertyValue {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValue.Regular>;
								public assign(param0: any): void;
								public constructor(param0: com.fasterxml.jackson.databind.deser.impl.PropertyValue, param1: any);
								public constructor(param0: com.fasterxml.jackson.databind.deser.impl.PropertyValue, param1: any, param2: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class PropertyValueBuffer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer>;
							public _parser: com.fasterxml.jackson.core.JsonParser;
							public _context: com.fasterxml.jackson.databind.DeserializationContext;
							public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
							public _creatorParameters: native.Array<any>;
							public _paramsNeeded: number;
							public _paramsSeen: number;
							public _paramsSeenBig: java.util.BitSet;
							public _buffered: com.fasterxml.jackson.databind.deser.impl.PropertyValue;
							public _idValue: any;
							public isComplete(): boolean;
							public getParameters(param0: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): native.Array<any>;
							public assignParameter(param0: number, param1: any): boolean;
							public readIdProperty(param0: string): boolean;
							public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: number, param3: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
							public handleIdValue(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): any;
							public buffered(): com.fasterxml.jackson.databind.deser.impl.PropertyValue;
							public bufferMapProperty(param0: any, param1: any): void;
							public assignParameter(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: any): boolean;
							public _findMissing(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): any;
							public bufferProperty(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: any): void;
							public bufferAnyProperty(param0: com.fasterxml.jackson.databind.deser.SettableAnyProperty, param1: string, param2: any): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class ReadableObjectId {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId>;
							public item: any;
							public id: any;
							public _key: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
							public _referringProperties: java.util.LinkedList<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring>;
							public _resolver: com.fasterxml.jackson.annotation.ObjectIdResolver;
							public setResolver(param0: com.fasterxml.jackson.annotation.ObjectIdResolver): void;
							public tryToResolveUnresolved(param0: com.fasterxml.jackson.databind.DeserializationContext): boolean;
							public appendReferring(param0: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring): void;
							public hasReferringProperties(): boolean;
							public resolve(): any;
							public bindItem(param0: any): void;
							public referringProperties(): java.util.Iterator<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring>;
							public toString(): string;
							public constructor(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey);
							public getKey(): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
							public constructor(param0: any);
							public getResolver(): com.fasterxml.jackson.annotation.ObjectIdResolver;
						}
						export namespace ReadableObjectId {
							export abstract class Referring {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, param1: java.lang.Class<any>);
								public getLocation(): com.fasterxml.jackson.core.JsonLocation;
								public handleResolvedForwardReference(param0: any, param1: any): void;
								public hasId(param0: any): boolean;
								public getBeanType(): java.lang.Class<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class SetterlessProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.SetterlessProperty>;
							public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
							public _getter: java.lang.reflect.Method;
							public isVirtual(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.impl.SetterlessProperty;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyMetadata, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations);
							public withName(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public set(param0: any, param1: any): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: com.fasterxml.jackson.databind.PropertyMetadata);
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.util.Annotations, param4: com.fasterxml.jackson.databind.introspect.AnnotatedMethod);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.util.Annotations, param5: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.impl.SetterlessProperty;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.SetterlessProperty, param1: com.fasterxml.jackson.databind.PropertyName);
							public setAndReturn(param0: any, param1: any): any;
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.deser.impl.SetterlessProperty, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class TypeWrappedDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<any> implements java.io.Serializable  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer>;
							public _typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public handledType(): java.lang.Class<any>;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class UnwrappedPropertyHandler {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler>;
							public _properties: java.util.List<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public constructor();
							public constructor(param0: java.util.List<com.fasterxml.jackson.databind.deser.SettableBeanProperty>);
							public renameAll(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler;
							public processUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: com.fasterxml.jackson.databind.util.TokenBuffer): any;
							public addProperty(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace impl {
						export class ValueInjector extends com.fasterxml.jackson.databind.BeanProperty.Std {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ValueInjector>;
							public _valueId: any;
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.util.Annotations, param4: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param5: boolean);
							public isVirtual(): boolean;
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param4: any);
							public isRequired(): boolean;
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.BeanProperty.Std, param1: com.fasterxml.jackson.databind.JavaType);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.util.Annotations, param4: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param5: com.fasterxml.jackson.databind.PropertyMetadata);
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getName(): string;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public inject(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): void;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findValue(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): any;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param4: any);
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class ArrayBlockingQueueDeserializer extends com.fasterxml.jackson.databind.deser.std.CollectionDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Collection<any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.deser.ValueInstantiator);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							public withResolved(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.deser.ValueInstantiator, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>, param5: java.lang.Boolean);
							public withResolved(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.util.Collection<any>): java.util.Collection<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withResolved(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.CollectionDeserializer);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class AtomicBooleanDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.util.concurrent.atomic.AtomicBoolean> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.AtomicBooleanDeserializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.concurrent.atomic.AtomicBoolean;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class AtomicReferenceDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<java.util.concurrent.atomic.AtomicReference<any>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer>;
							public _referencedType: com.fasterxml.jackson.databind.JavaType;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor();
							public withResolved(param0: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;
							public constructor(param0: java.lang.Class<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): java.util.concurrent.atomic.AtomicReference<any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(): any;
							public getNullValue(): java.util.concurrent.atomic.AtomicReference<any>;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.concurrent.atomic.AtomicReference<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export abstract class BaseNodeDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer<any>>;
							public constructor();
							public _fromInt(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserializeObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.node.ObjectNode;
							public _fromEmbedded(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.JsonNode;
							public deserializeAny(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.JsonNode;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public _handleDuplicateField(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.node.JsonNodeFactory, param3: string, param4: com.fasterxml.jackson.databind.node.ObjectNode, param5: com.fasterxml.jackson.databind.JsonNode, param6: com.fasterxml.jackson.databind.JsonNode): void;
							public deserializeArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.node.ArrayNode;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public _reportProblem(param0: com.fasterxml.jackson.core.JsonParser, param1: string): void;
							public _fromFloat(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.JsonNode;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class ByteBufferDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.nio.ByteBuffer> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.nio.ByteBuffer;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.nio.ByteBuffer): java.nio.ByteBuffer;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class CollectionDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.Collection<any>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer>;
							public _collectionType: com.fasterxml.jackson.databind.JavaType;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _unwrapSingle: java.lang.Boolean;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Collection<any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.deser.ValueInstantiator);
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: com.fasterxml.jackson.databind.deser.ValueInstantiator, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>, param5: java.lang.Boolean);
							public withResolved(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.util.Collection<any>): java.util.Collection<any>;
							public withResolved(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.CollectionDeserializer);
							public handleNonArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.util.Collection<any>): java.util.Collection<any>;
						}
						export namespace CollectionDeserializer {
							export class CollectionReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionReferring>;
								public next: java.util.List<any>;
								public handleResolvedForwardReference(param0: any, param1: any): void;
							}
							export class CollectionReferringAccumulator {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionReferringAccumulator>;
								public add(param0: any): void;
								public handleUnresolvedReference(param0: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;
								public resolveForwardReference(param0: any, param1: any): void;
								public constructor(param0: java.lang.Class<any>, param1: java.util.Collection<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export abstract class ContainerDeserializerBase<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public wrapAndThrow(param0: java.lang.Throwable, param1: any, param2: string): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public findBackReference(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class DateDeserializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers>;
							public constructor();
							public static find(param0: java.lang.Class<any>, param1: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
						export namespace DateDeserializers {
							export class CalendarDeserializer extends com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<java.util.Calendar> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.CalendarDeserializer>;
								public _calendarClass: java.lang.Class<any>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, param1: java.text.DateFormat, param2: string);
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.DateDeserializers.CalendarDeserializer, param1: java.text.DateFormat, param2: string);
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.CalendarDeserializer;
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Calendar;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export abstract class DateBasedDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>>;
								public _customFormat: java.text.DateFormat;
								public _formatString: string;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, param1: java.text.DateFormat, param2: string);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public _parseDate(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Date;
								public constructor();
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							}
							export class DateDeserializer extends com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<java.util.Date> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateDeserializer>;
								public static instance: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateDeserializer;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, param1: java.text.DateFormat, param2: string);
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor();
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateDeserializer;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Date;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateDeserializer, param1: java.text.DateFormat, param2: string);
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class SqlDateDeserializer extends com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<java.sql.Date> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.SqlDateDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, param1: java.text.DateFormat, param2: string);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.DateDeserializers.SqlDateDeserializer, param1: java.text.DateFormat, param2: string);
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.SqlDateDeserializer;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.sql.Date;
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class TimestampDeserializer extends com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<java.sql.Timestamp> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.TimestampDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, param1: java.text.DateFormat, param2: string);
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.DateDeserializers.TimestampDeserializer, param1: java.text.DateFormat, param2: string);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.sql.Timestamp;
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.TimestampDeserializer;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export abstract class DelegatingDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer>;
							public _delegatee: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public getEmptyValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public findBackReference(param0: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public _createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getDelegatee(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public replaceDelegatee(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getEmptyValue(): any;
							public getKnownPropertyNames(): java.util.Collection<any>;
							public constructor(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public newDelegatingInstance(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(): any;
							public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class EnumDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.EnumDeserializer>;
							public _enumLookup: com.fasterxml.jackson.databind.util.CompactStringObjectMap;
							public _enumsByIndex: native.Array<any>;
							public constructor();
							public _failOnNumber(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.core.JsonParser, param2: number): void;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public static deserializerForCreator(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public _deserializeOther(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.util.EnumResolver);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _enumClass(): java.lang.Class<any>;
						}
						export namespace EnumDeserializer {
							export class FactoryBasedDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.EnumDeserializer.FactoryBasedDeserializer>;
								public _inputType: java.lang.Class<any>;
								public _factory: java.lang.reflect.Method;
								public _deser: com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: java.lang.Class<any>);
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.EnumDeserializer.FactoryBasedDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class EnumMapDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.EnumMap<any,any>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer>;
							public _mapType: com.fasterxml.jackson.databind.JavaType;
							public _enumClass: java.lang.Class<any>;
							public _keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public constructor();
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.EnumMap<any,any>;
							public constructor(param0: java.lang.Class<any>);
							public constructMap(): java.util.EnumMap<any,any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public withResolved(param0: com.fasterxml.jackson.databind.KeyDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.KeyDeserializer, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class EnumSetDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<java.util.EnumSet<any>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer>;
							public _enumType: com.fasterxml.jackson.databind.JavaType;
							public _enumClass: java.lang.Class<java.lang.Enum>;
							public _enumDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Enum<any>>;
							public _unwrapSingle: java.lang.Boolean;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public withResolved(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.EnumSet<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: java.lang.Boolean);
							public handleNonArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.EnumSet<any>;
							public withDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export abstract class FromStringDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>>;
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: java.lang.Class<any>);
							public static types(): native.Array<java.lang.Class<any>>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public _deserializeFromEmptyString(): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public findDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _deserializeEmbedded(param0: any, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public static findDeserializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.Std;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
						export namespace FromStringDeserializer {
							export class Std extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.Std>;
								public static STD_FILE: number;
								public static STD_URL: number;
								public static STD_URI: number;
								public static STD_CLASS: number;
								public static STD_JAVA_TYPE: number;
								public static STD_CURRENCY: number;
								public static STD_PATTERN: number;
								public static STD_LOCALE: number;
								public static STD_CHARSET: number;
								public static STD_TIME_ZONE: number;
								public static STD_INET_ADDRESS: number;
								public static STD_INET_SOCKET_ADDRESS: number;
								public _kind: number;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public _deserializeFromEmptyString(): any;
								public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: java.lang.Class<any>, param1: number);
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class JdkDeserializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JdkDeserializers>;
							public constructor();
							public static find(param0: java.lang.Class<any>, param1: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class JsonLocationInstantiator extends com.fasterxml.jackson.databind.deser.ValueInstantiator {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator>;
							public constructor();
							public createFromObjectWith(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: native.Array<any>): any;
							public getFromObjectArguments(param0: com.fasterxml.jackson.databind.DeserializationConfig): native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public getValueTypeDesc(): string;
							public canCreateFromObjectWith(): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class JsonNodeDeserializer extends com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer<com.fasterxml.jackson.databind.JsonNode> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer>;
							public constructor();
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonNode;
							public getNullValue(): com.fasterxml.jackson.databind.JsonNode;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonNode;
							public static getDeserializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
						export namespace JsonNodeDeserializer {
							export class ArrayDeserializer extends com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer<com.fasterxml.jackson.databind.node.ArrayNode> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ArrayDeserializer>;
								public static _instance: com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ArrayDeserializer;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public static getInstance(): com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ArrayDeserializer;
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.node.ArrayNode;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class ObjectDeserializer extends com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer<com.fasterxml.jackson.databind.node.ObjectNode> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ObjectDeserializer>;
								public static _instance: com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ObjectDeserializer;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public static getInstance(): com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ObjectDeserializer;
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.node.ObjectNode;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class MapDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.Map<any,any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.MapDeserializer>;
							public _mapType: com.fasterxml.jackson.databind.JavaType;
							public _keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer;
							public _standardStringKey: boolean;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _hasDefaultCreator: boolean;
							public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _propertyBasedCreator: com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
							public _ignorableProperties: java.util.HashSet<string>;
							public wrapAndThrow(param0: java.lang.Throwable, param1: any, param2: string): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.util.Map<any,any>): java.util.Map<any,any>;
							public getMapClass(): java.lang.Class<any>;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public _deserializeUsingCreator(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Map<any,any>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.MapDeserializer);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _readAndBindStringMap(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.util.Map<any,any>): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.deser.ValueInstantiator, param2: com.fasterxml.jackson.databind.KeyDeserializer, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
							public _isStdKeyDeser(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.KeyDeserializer): boolean;
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(param0: java.lang.Class<any>);
							public wrapAndThrow(param0: java.lang.Throwable, param1: any): void;
							public setIgnorableProperties(param0: native.Array<string>): void;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.MapDeserializer, param1: com.fasterxml.jackson.databind.KeyDeserializer, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: java.util.HashSet<string>);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public _readAndBind(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.util.Map<any,any>): void;
							public withResolved(param0: com.fasterxml.jackson.databind.KeyDeserializer, param1: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: java.util.HashSet<string>): com.fasterxml.jackson.databind.deser.std.MapDeserializer;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Map<any,any>;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getValueType(): com.fasterxml.jackson.databind.JavaType;
						}
						export namespace MapDeserializer {
							export class MapReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapReferring>;
								public next: java.util.Map<any,any>;
								public key: any;
								public handleResolvedForwardReference(param0: any, param1: any): void;
							}
							export class MapReferringAccumulator {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapReferringAccumulator>;
								public resolveForwardReference(param0: any, param1: any): void;
								public constructor(param0: java.lang.Class<any>, param1: java.util.Map<any,any>);
								public put(param0: any, param1: any): void;
								public handleUnresolvedReference(param0: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, param1: any): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class MapEntryDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.Map.Entry<any,any>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer>;
							public _type: com.fasterxml.jackson.databind.JavaType;
							public _keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.util.Map.Entry<any,any>): java.util.Map.Entry<any,any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public withResolved(param0: com.fasterxml.jackson.databind.KeyDeserializer, param1: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer, param1: com.fasterxml.jackson.databind.KeyDeserializer, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.KeyDeserializer, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Map.Entry<any,any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getValueType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class NullifyingDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer>;
							public static instance: com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class NumberDeserializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers>;
							public constructor();
							public static find(param0: java.lang.Class<any>, param1: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
						export namespace NumberDeserializers {
							export class BigDecimalDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.math.BigDecimal> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigDecimalDeserializer>;
								public static instance: com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigDecimalDeserializer;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.math.BigDecimal;
							}
							export class BigIntegerDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.math.BigInteger> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigIntegerDeserializer>;
								public static instance: com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigIntegerDeserializer;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.math.BigInteger;
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class BooleanDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Boolean> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BooleanDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: java.lang.Class<java.lang.Boolean>, param1: java.lang.Boolean);
								public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): java.lang.Boolean;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(param0: java.lang.Class<any>, param1: any);
								public constructor();
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Boolean;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class ByteDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Byte> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.ByteDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(param0: java.lang.Class<any>, param1: any);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Byte;
								public constructor();
								public constructor(param0: java.lang.Class<java.lang.Byte>, param1: java.lang.Byte);
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class CharacterDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Character> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.CharacterDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(param0: java.lang.Class<java.lang.Character>, param1: java.lang.Character);
								public constructor(param0: java.lang.Class<any>, param1: any);
								public constructor();
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Character;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class DoubleDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Double> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.DoubleDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): java.lang.Double;
								public constructor(param0: java.lang.Class<java.lang.Double>, param1: java.lang.Double);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(param0: java.lang.Class<any>, param1: any);
								public constructor();
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Double;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class FloatDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Float> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.FloatDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Float;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(param0: java.lang.Class<java.lang.Float>, param1: java.lang.Float);
								public constructor(param0: java.lang.Class<any>, param1: any);
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class IntegerDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Integer> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.IntegerDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): java.lang.Integer;
								public constructor(param0: java.lang.Class<any>, param1: any);
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public constructor(param0: java.lang.Class<java.lang.Integer>, param1: java.lang.Integer);
								public isCachable(): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Integer;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class LongDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Long> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.LongDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public isCachable(): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Long;
								public constructor(param0: java.lang.Class<java.lang.Long>, param1: java.lang.Long);
								public constructor(param0: java.lang.Class<any>, param1: any);
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class NumberDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.NumberDeserializer>;
								public static instance: com.fasterxml.jackson.databind.deser.std.NumberDeserializers.NumberDeserializer;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export abstract class PrimitiveOrWrapperDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<any>>;
								public _nullValue: any;
								public _primitive: boolean;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public getNullValue(): any;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(param0: java.lang.Class<any>, param1: any);
								public getEmptyValue(): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getEmptyValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							}
							export class ShortDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Short> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.ShortDeserializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(param0: java.lang.Class<java.lang.Short>, param1: java.lang.Short);
								public constructor(param0: java.lang.Class<any>, param1: any);
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Short;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class ObjectArrayDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<native.Array<any>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer>;
							public _arrayType: com.fasterxml.jackson.databind.type.ArrayType;
							public _untyped: boolean;
							public _elementClass: java.lang.Class<any>;
							public _elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _unwrapSingle: java.lang.Boolean;
							public constructor();
							public handleNonArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<any>;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<any>;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public withDeserializer(param0: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param3: java.lang.Boolean);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserializeFromBase64(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<java.lang.Byte>;
							public withResolved(param0: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): native.Array<any>;
							public constructor(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export abstract class PrimitiveArrayDeserializers<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>>;
							public _unwrapSingle: java.lang.Boolean;
							public constructor();
							public handleNonArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: java.lang.Class<any>);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public withResolved(param0: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
							public static forType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, param1: java.lang.Boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
						export namespace PrimitiveArrayDeserializers {
							export class BooleanDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<native.Array<boolean>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.BooleanDeser>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, param1: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<boolean>;
								public withResolved(param0: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<boolean>;
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.BooleanDeser, param1: java.lang.Boolean);
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class ByteDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.ByteDeser>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, param1: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public withResolved(param0: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.ByteDeser, param1: java.lang.Boolean);
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class CharDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<native.Array<string>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.CharDeser>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, param1: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public withResolved(param0: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.CharDeser, param1: java.lang.Boolean);
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<string>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<string>;
							}
							export class DoubleDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.DoubleDeser>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, param1: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public withResolved(param0: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.DoubleDeser, param1: java.lang.Boolean);
							}
							export class FloatDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.FloatDeser>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, param1: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public withResolved(param0: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.FloatDeser, param1: java.lang.Boolean);
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class IntDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.IntDeser>;
								public static instance: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.IntDeser;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, param1: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public withResolved(param0: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.IntDeser, param1: java.lang.Boolean);
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class LongDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.LongDeser>;
								public static instance: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.LongDeser;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, param1: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.LongDeser, param1: java.lang.Boolean);
								public withResolved(param0: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class ShortDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.ShortDeser>;
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, param1: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public withResolved(param0: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public constructor();
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.ShortDeser, param1: java.lang.Boolean);
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<number>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: java.lang.Class<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class StackTraceElementDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.lang.StackTraceElement> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.StackTraceElement;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class StdDelegatingDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer<any>>;
							public _converter: com.fasterxml.jackson.databind.util.Converter<any,any>;
							public _delegateType: com.fasterxml.jackson.databind.JavaType;
							public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor();
							public handledType(): java.lang.Class<any>;
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(param0: com.fasterxml.jackson.databind.util.Converter<any,any>);
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public withDelegate(param0: com.fasterxml.jackson.databind.util.Converter<any,any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public constructor(param0: com.fasterxml.jackson.databind.util.Converter<any,any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public getDelegatee(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _handleIncompatibleUpdateValue(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public convertValue(param0: any): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export abstract class StdDeserializer<T>  extends com.fasterxml.jackson.databind.JsonDeserializer<any> implements java.io.Serializable  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>>;
							public static F_MASK_INT_COERCIONS: number;
							public _valueClass: java.lang.Class<any>;
							public handledType(): java.lang.Class<any>;
							public _parseShort(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Short;
							public _parseBooleanPrimitive(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): boolean;
							public _isNegInf(param0: string): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public _parseIntPrimitive(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): number;
							public _parseShortPrimitive(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): number;
							public _parseBooleanFromOther(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): boolean;
							public findFormatFeature(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Class<any>, param3: com.fasterxml.jackson.annotation.JsonFormat.Feature): java.lang.Boolean;
							public _parseLong(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Long;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public _isIntNumber(param0: string): boolean;
							public _isPosInf(param0: string): boolean;
							public _parseBoolean(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Boolean;
							public _deserializeFromEmpty(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _parseInteger(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Integer;
							public _parseDate(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Date;
							public static parseDouble(param0: string): number;
							public _parseByte(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Byte;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public _isNaN(param0: string): boolean;
							public isDefaultKeyDeserializer(param0: com.fasterxml.jackson.databind.KeyDeserializer): boolean;
							public _hasTextualNull(param0: string): boolean;
							public _parseFloatPrimitive(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): number;
							public getValueClass(): java.lang.Class<any>;
							public handleUnknownProperty(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any, param3: string): void;
							public _parseLongPrimitive(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): number;
							public _failDoubleToIntCoercion(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: string): void;
							public isDefaultDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): boolean;
							public _coerceIntegral(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public _parseFloat(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Float;
							public findDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _parseDoublePrimitive(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): number;
							public _parseString(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): string;
							public getValueType(): com.fasterxml.jackson.databind.JavaType;
							public _parseDouble(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Double;
							public findConvertingContentDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class StdKeyDeserializer extends com.fasterxml.jackson.databind.KeyDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer>;
							public static TYPE_BOOLEAN: number;
							public static TYPE_BYTE: number;
							public static TYPE_SHORT: number;
							public static TYPE_CHAR: number;
							public static TYPE_INT: number;
							public static TYPE_LONG: number;
							public static TYPE_FLOAT: number;
							public static TYPE_DOUBLE: number;
							public static TYPE_LOCALE: number;
							public static TYPE_DATE: number;
							public static TYPE_CALENDAR: number;
							public static TYPE_UUID: number;
							public static TYPE_URI: number;
							public static TYPE_URL: number;
							public static TYPE_CLASS: number;
							public static TYPE_CURRENCY: number;
							public _kind: number;
							public _keyClass: java.lang.Class<any>;
							public _deser: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>;
							public constructor();
							public getKeyClass(): java.lang.Class<any>;
							public _parseDouble(param0: string): number;
							public constructor(param0: number, param1: java.lang.Class<any>);
							public _parseInt(param0: string): number;
							public static forType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
							public constructor(param0: number, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>);
							public _parse(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeKey(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _parseLong(param0: string): number;
						}
						export namespace StdKeyDeserializer {
							export class DelegatingKD extends com.fasterxml.jackson.databind.KeyDeserializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.DelegatingKD>;
								public _keyClass: java.lang.Class<any>;
								public _delegate: com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public deserializeKey(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>);
								public getKeyClass(): java.lang.Class<any>;
							}
							export class EnumKD extends com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.EnumKD>;
								public _resolver: com.fasterxml.jackson.databind.util.EnumResolver;
								public _factory: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
								public constructor(param0: number, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>);
								public constructor(param0: com.fasterxml.jackson.databind.util.EnumResolver, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod);
								public constructor(param0: number, param1: java.lang.Class<any>);
								public _parse(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
							}
							export class StringCtorKeyDeserializer extends com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.StringCtorKeyDeserializer>;
								public _ctor: java.lang.reflect.Constructor<any>;
								public constructor(param0: number, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>);
								public constructor(param0: number, param1: java.lang.Class<any>);
								public _parse(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public constructor(param0: java.lang.reflect.Constructor<any>);
							}
							export class StringFactoryKeyDeserializer extends com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.StringFactoryKeyDeserializer>;
								public constructor(param0: number, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>);
								public constructor(param0: number, param1: java.lang.Class<any>);
								public _parse(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(param0: java.lang.reflect.Method);
								public constructor();
							}
							export class StringKD extends com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.StringKD>;
								public static forType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.StringKD;
								public static forType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
								public deserializeKey(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class StdKeyDeserializers extends com.fasterxml.jackson.databind.deser.KeyDeserializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers>;
							public constructor();
							public static constructDelegatingKeyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.KeyDeserializer;
							public static constructEnumKeyDeserializer(param0: com.fasterxml.jackson.databind.util.EnumResolver, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.KeyDeserializer;
							public static findStringBasedKeyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
							public findKeyDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
							public static constructEnumKeyDeserializer(param0: com.fasterxml.jackson.databind.util.EnumResolver): com.fasterxml.jackson.databind.KeyDeserializer;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export abstract class StdNodeBasedDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> implements com.fasterxml.jackson.databind.deser.ResolvableDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdNodeBasedDeserializer<any>>;
							public _treeDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public convert(param0: com.fasterxml.jackson.databind.JsonNode, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdNodeBasedDeserializer<any>);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export abstract class StdScalarDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class StdValueInstantiator extends com.fasterxml.jackson.databind.deser.ValueInstantiator {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator>;
							public _valueTypeDesc: string;
							public _defaultCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _withArgsCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _constructorArguments: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public _delegateType: com.fasterxml.jackson.databind.JavaType;
							public _delegateCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _delegateArguments: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public _arrayDelegateType: com.fasterxml.jackson.databind.JavaType;
							public _arrayDelegateCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _arrayDelegateArguments: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public _fromStringCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromIntCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromLongCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromDoubleCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromBooleanCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _incompleteParameter: com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
							public getArrayDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public canCreateFromBoolean(): boolean;
							public getFromObjectArguments(param0: com.fasterxml.jackson.databind.DeserializationConfig): native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public configureFromStringCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public getValueTypeDesc(): string;
							public configureFromObjectSettings(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>, param4: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param5: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): void;
							public getIncompleteParameter(): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
							public createFromString(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string): any;
							public createFromInt(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: number): any;
							public createUsingArrayDelegate(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): any;
							public canCreateFromInt(): boolean;
							public canCreateFromLong(): boolean;
							public configureFromLongCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public canCreateFromDouble(): boolean;
							public getDefaultCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public rewrapCtorProblem(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
							public configureFromDoubleCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public constructor();
							public createFromObjectWith(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: native.Array<any>): any;
							public canCreateFromString(): boolean;
							public createUsingDelegate(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: any): any;
							public getDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public unwrapAndWrapException(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
							public configureFromArraySettings(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: com.fasterxml.jackson.databind.JavaType, param2: native.Array<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): void;
							public createFromBoolean(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: boolean): any;
							public constructor(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType);
							public configureFromIntCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public canCreateFromObjectWith(): boolean;
							public canCreateUsingDefault(): boolean;
							public getDelegateType(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
							public getWithArgsCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdValueInstantiator);
							public configureFromBooleanCreator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public wrapException(param0: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
							public canCreateUsingDelegate(): boolean;
							public canCreateUsingArrayDelegate(): boolean;
							public getArrayDelegateType(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
							public createUsingDefault(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public wrapAsJsonMappingException(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
							public configureIncompleteParameter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): void;
							public createFromLong(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: number): any;
							public constructor(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: java.lang.Class<any>);
							public createFromDouble(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: number): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class StringArrayDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<native.Array<string>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer>;
							public static instance: com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer;
							public _elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<string>;
							public _unwrapSingle: java.lang.Boolean;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: java.lang.Boolean);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<string>;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _deserializeCustom(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<string>;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class StringCollectionDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.Collection<string>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer>;
							public _collectionType: com.fasterxml.jackson.databind.JavaType;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<string>;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _unwrapSingle: java.lang.Boolean;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.deser.ValueInstantiator);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.Collection<string>;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public withResolved(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.util.Collection<string>): java.util.Collection<string>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.deser.ValueInstantiator, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: java.lang.Boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class StringDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<string> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StringDeserializer>;
							public static instance: com.fasterxml.jackson.databind.deser.std.StringDeserializer;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): string;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class ThrowableDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer>;
							public static PROP_NAME_MESSAGE: string;
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, param3: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, param4: java.util.HashSet<string>, param5: boolean, param6: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: boolean);
							public constructor(param0: java.lang.Class<any>);
							public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializer);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializer, param1: com.fasterxml.jackson.databind.util.NameTransformer);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: java.util.HashSet<string>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class TokenBufferDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<com.fasterxml.jackson.databind.util.TokenBuffer> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.util.TokenBuffer;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public createBufferInstance(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.util.TokenBuffer;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class UUIDDeserializer extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<java.util.UUID> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.UUIDDeserializer>;
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeEmbedded(param0: any, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.UUID;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public _deserializeEmbedded(param0: any, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): java.util.UUID;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace deser {
					export namespace std {
						export class UntypedObjectDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer>;
							public static NO_OBJECTS: native.Array<any>;
							public static instance: com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
							public _mapDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _listDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _stringDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _numberDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _listType: com.fasterxml.jackson.databind.JavaType;
							public _mapType: com.fasterxml.jackson.databind.JavaType;
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(param0: java.lang.Class<any>);
							public _clearIfStdImpl(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public mapArrayToArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public _withResolved(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JavaType);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public isCachable(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public _findCustomDeser(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public mapArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>, param2: com.fasterxml.jackson.databind.JsonDeserializer<any>, param3: com.fasterxml.jackson.databind.JsonDeserializer<any>, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public mapObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
						export namespace UntypedObjectDeserializer {
							export class Vanilla extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla>;
								public static std: com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public mapArrayToArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): native.Array<any>;
								public mapArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
								public deserializeWithType(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public mapObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace exc {
					export class IgnoredPropertyException extends com.fasterxml.jackson.databind.exc.PropertyBindingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.IgnoredPropertyException>;
						public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: any, param2: string, param3: java.util.Collection<any>): com.fasterxml.jackson.databind.exc.IgnoredPropertyException;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation);
						public static from(param0: com.fasterxml.jackson.core.JsonGenerator, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.core.JsonGenerator, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(param0: java.io.Closeable, param1: string, param2: com.fasterxml.jackson.core.JsonLocation);
						public static from(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Class<any>, param3: string, param4: java.util.Collection<any>);
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Throwable);
						public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(param0: java.lang.Throwable);
						public constructor(param0: java.io.Closeable, param1: string);
						public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: com.fasterxml.jackson.core.JsonLocation, param3: java.lang.Class<any>, param4: string, param5: java.util.Collection<any>);
						public constructor(param0: string, param1: java.lang.Throwable);
						public constructor(param0: string);
						public constructor(param0: java.io.Closeable, param1: string, param2: java.lang.Throwable);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace exc {
					export class InvalidFormatException extends com.fasterxml.jackson.databind.JsonMappingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.InvalidFormatException>;
						public _value: any;
						public _targetType: java.lang.Class<any>;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation);
						public constructor(param0: string, param1: any, param2: java.lang.Class<any>);
						public static from(param0: com.fasterxml.jackson.core.JsonGenerator, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.core.JsonGenerator, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(param0: java.io.Closeable, param1: string, param2: com.fasterxml.jackson.core.JsonLocation);
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: any, param3: java.lang.Class<any>);
						public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: any, param3: java.lang.Class<any>);
						public getValue(): any;
						public static from(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Throwable);
						public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(param0: java.lang.Throwable);
						public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: any, param3: java.lang.Class<any>): com.fasterxml.jackson.databind.exc.InvalidFormatException;
						public constructor(param0: java.io.Closeable, param1: string);
						public constructor(param0: string, param1: java.lang.Throwable);
						public constructor(param0: string);
						public constructor(param0: java.io.Closeable, param1: string, param2: java.lang.Throwable);
						public getTargetType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace exc {
					export abstract class PropertyBindingException extends com.fasterxml.jackson.databind.JsonMappingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.PropertyBindingException>;
						public _referringClass: java.lang.Class<any>;
						public _propertyName: string;
						public _propertyIds: java.util.Collection<any>;
						public _propertiesAsString: string;
						public getReferringClass(): java.lang.Class<any>;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation);
						public constructor(param0: java.io.Closeable, param1: string, param2: com.fasterxml.jackson.core.JsonLocation);
						public getMessageSuffix(): string;
						public getPropertyName(): string;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Throwable);
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Class<any>, param3: string, param4: java.util.Collection<any>);
						public constructor(param0: java.lang.Throwable);
						public constructor(param0: java.io.Closeable, param1: string);
						public getKnownPropertyIds(): java.util.Collection<any>;
						public constructor(param0: string, param1: java.lang.Throwable);
						public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: com.fasterxml.jackson.core.JsonLocation, param3: java.lang.Class<any>, param4: string, param5: java.util.Collection<any>);
						public constructor(param0: string);
						public constructor(param0: java.io.Closeable, param1: string, param2: java.lang.Throwable);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace exc {
					export class UnrecognizedPropertyException extends com.fasterxml.jackson.databind.exc.PropertyBindingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException>;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation);
						public static from(param0: com.fasterxml.jackson.core.JsonGenerator, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.core.JsonGenerator, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(param0: java.io.Closeable, param1: string, param2: com.fasterxml.jackson.core.JsonLocation);
						public static from(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Class<any>, param3: string, param4: java.util.Collection<any>);
						public constructor(param0: string, param1: com.fasterxml.jackson.core.JsonLocation, param2: java.lang.Throwable);
						public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(param0: java.lang.Throwable);
						public static from(param0: com.fasterxml.jackson.core.JsonParser, param1: any, param2: string, param3: java.util.Collection<any>): com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
						public constructor(param0: java.io.Closeable, param1: string);
						public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: string, param2: com.fasterxml.jackson.core.JsonLocation, param3: java.lang.Class<any>, param4: string, param5: java.util.Collection<any>);
						public constructor(param0: string, param1: java.lang.Throwable);
						public constructor(param0: string);
						public constructor(param0: java.io.Closeable, param1: string, param2: java.lang.Throwable);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ext {
					export class CoreXMLDeserializers extends com.fasterxml.jackson.databind.deser.Deserializers.Base {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.CoreXMLDeserializers>;
						public static TYPE_DURATION: number;
						public static TYPE_G_CALENDAR: number;
						public static TYPE_QNAME: number;
						public findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor();
						public findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
					export namespace CoreXMLDeserializers {
						export class Std extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.CoreXMLDeserializers.Std>;
							public _kind: number;
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: java.lang.Class<any>, param1: number);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ext {
					export class CoreXMLSerializers extends com.fasterxml.jackson.databind.ser.Serializers.Base {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.CoreXMLSerializers>;
						public constructor();
						public findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
					export namespace CoreXMLSerializers {
						export class XMLGregorianCalendarSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<javax.xml.datatype.XMLGregorianCalendar> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.CoreXMLSerializers.XMLGregorianCalendarSerializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public _convert(param0: javax.xml.datatype.XMLGregorianCalendar): java.util.Calendar;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getDelegatee(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public serializeWithType(param0: javax.xml.datatype.XMLGregorianCalendar, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: javax.xml.datatype.XMLGregorianCalendar): boolean;
							public serialize(param0: javax.xml.datatype.XMLGregorianCalendar, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ext {
					export abstract class DOMDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.DOMDeserializer<any>>;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public constructor();
						public constructor(param0: java.lang.Class<any>);
						public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
						public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						public parse(param0: string): org.w3c.dom.Document;
					}
					export namespace DOMDeserializer {
						export class DocumentDeserializer extends com.fasterxml.jackson.databind.ext.DOMDeserializer<org.w3c.dom.Document> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.DOMDeserializer.DocumentDeserializer>;
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): org.w3c.dom.Document;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
						export class NodeDeserializer extends com.fasterxml.jackson.databind.ext.DOMDeserializer<org.w3c.dom.Node> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.DOMDeserializer.NodeDeserializer>;
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): org.w3c.dom.Node;
							public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ext {
					export class DOMSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<org.w3c.dom.Node> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.DOMSerializer>;
						public _domImpl: org.w3c.dom.ls.DOMImplementationLS;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public constructor(param0: java.lang.Class<any>, param1: boolean);
						public constructor();
						public serialize(param0: org.w3c.dom.Node, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: java.lang.Class<any>);
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ext {
					export class OptionalHandlerFactory {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.OptionalHandlerFactory>;
						public static instance: com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;
						public constructor();
						public findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ext {
					export class PathDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.nio.file.Path> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.PathDeserializer>;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public constructor();
						public constructor(param0: java.lang.Class<any>);
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
						public constructor(param0: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): java.nio.file.Path;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export abstract class Annotated {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.Annotated>;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public isPublic(): boolean;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public getAllAnnotations(): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public hasAnnotation(param0: java.lang.Class<any>): boolean;
						public constructor();
						public withFallBackAnnotationsFrom(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.introspect.Annotated;
						public getRawType(): java.lang.Class<any>;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public getGenericType(): java.lang.reflect.Type;
						public getName(): string;
						public toString(): string;
						public getModifiers(): number;
						public annotations(): java.lang.Iterable<java.lang.annotation.Annotation>;
						public hasOneOf(param0: native.Array<java.lang.Class<any>>): boolean;
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getType(param0: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class AnnotatedClass extends com.fasterxml.jackson.databind.introspect.Annotated implements com.fasterxml.jackson.databind.introspect.TypeResolutionContext {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedClass>;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _class: java.lang.Class<any>;
						public _bindings: com.fasterxml.jackson.databind.type.TypeBindings;
						public _superTypes: java.util.List<com.fasterxml.jackson.databind.JavaType>;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _typeFactory: com.fasterxml.jackson.databind.type.TypeFactory;
						public _mixInResolver: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public _primaryMixIn: java.lang.Class<any>;
						public _classAnnotations: com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public _creatorsResolved: boolean;
						public _defaultConstructor: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public _constructors: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
						public _creatorMethods: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _memberMethods: com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap;
						public _fields: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public getAllAnnotations(): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public hasAnnotation(param0: java.lang.Class<any>): boolean;
						public _constructDefaultConstructor(param0: com.fasterxml.jackson.databind.util.ClassUtil.Ctor, param1: com.fasterxml.jackson.databind.introspect.TypeResolutionContext): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public static constructWithoutSuperTypes(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public equals(param0: any): boolean;
						public getConstructors(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
						public _constructCreatorMethod(param0: java.lang.reflect.Method, param1: com.fasterxml.jackson.databind.introspect.TypeResolutionContext): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public _addClassMixIns(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap, param1: com.fasterxml.jackson.databind.JavaType): void;
						public _addFactoryMixIns(param0: java.lang.Class<any>): void;
						public getStaticMethods(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public static construct(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public _collectRelevantAnnotations(param0: native.Array<native.Array<java.lang.annotation.Annotation>>): native.Array<com.fasterxml.jackson.databind.introspect.AnnotationMap>;
						public _constructNonDefaultConstructor(param0: com.fasterxml.jackson.databind.util.ClassUtil.Ctor, param1: com.fasterxml.jackson.databind.introspect.TypeResolutionContext): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public memberMethods(): java.lang.Iterable<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _addMixOvers(param0: java.lang.reflect.Constructor<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor, param2: boolean): void;
						public _collectRelevantAnnotations(param0: native.Array<java.lang.annotation.Annotation>): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public _addMixOvers(param0: java.lang.reflect.Method, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: boolean): void;
						public _findClassMethods(param0: java.lang.Class<any>): native.Array<java.lang.reflect.Method>;
						public toString(): string;
						public _addMixUnders(param0: java.lang.reflect.Method, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): void;
						public annotations(): java.lang.Iterable<java.lang.annotation.Annotation>;
						public _isIncludableMemberMethod(param0: java.lang.reflect.Method): boolean;
						public static constructWithoutSuperTypes(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public hasAnnotations(): boolean;
						public getMemberMethodCount(): number;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public _addFieldMixIns(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: java.util.Map<string,com.fasterxml.jackson.databind.introspect.AnnotatedField>): void;
						public fields(): java.lang.Iterable<com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public getRawType(): java.lang.Class<any>;
						public _addMethodMixIns(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap, param2: java.lang.Class<any>, param3: com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap): void;
						public hashCode(): number;
						public getFieldCount(): number;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public getName(): string;
						public static construct(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public getDefaultConstructor(): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public getAnnotated(): java.lang.Class<any>;
						public getAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
						public _addMemberMethods(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap, param3: java.lang.Class<any>, param4: com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap): void;
						public getType(param0: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public _addClassMixIns(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap, param1: java.lang.Class<any>, param2: java.lang.Class<any>): void;
						public _constructMethod(param0: java.lang.reflect.Method, param1: com.fasterxml.jackson.databind.introspect.TypeResolutionContext): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public _addClassMixIns(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap, param1: java.lang.Class<any>): void;
						public _findFields(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param2: java.util.Map<string,com.fasterxml.jackson.databind.introspect.AnnotatedField>): java.util.Map<string,com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public _constructField(param0: java.lang.reflect.Field, param1: com.fasterxml.jackson.databind.introspect.TypeResolutionContext): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public getModifiers(): number;
						public _addConstructorMixIns(param0: java.lang.Class<any>): void;
						public hasOneOf(param0: native.Array<java.lang.Class<any>>): boolean;
						public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						public findMethod(param0: string, param1: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class AnnotatedConstructor extends com.fasterxml.jackson.databind.introspect.AnnotatedWithParams {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
						public _constructor: java.lang.reflect.Constructor<any>;
						public _serialization: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.Serialization;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap, param2: native.Array<com.fasterxml.jackson.databind.introspect.AnnotationMap>);
						public setValue(param0: any, param1: any): void;
						public call1(param0: any): any;
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getDeclaringClass(): java.lang.Class<any>;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.Serialization);
						public getName(): string;
						public getRawParameterType(param0: number): java.lang.Class<any>;
						public call(): any;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: java.lang.reflect.Constructor<any>, param2: com.fasterxml.jackson.databind.introspect.AnnotationMap, param3: native.Array<com.fasterxml.jackson.databind.introspect.AnnotationMap>);
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getMember(): java.lang.reflect.Member;
						public getType(param0: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public constructor();
						public call(param0: native.Array<any>): any;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public getParameterType(param0: number): com.fasterxml.jackson.databind.JavaType;
						public getAnnotated(): java.lang.reflect.Constructor<any>;
						public getParameterCount(): number;
						public toString(): string;
						public getModifiers(): number;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getValue(param0: any): any;
					}
					export namespace AnnotatedConstructor {
						export class Serialization {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.Serialization>;
							public clazz: java.lang.Class<any>;
							public args: native.Array<java.lang.Class<any>>;
							public constructor(param0: java.lang.reflect.Constructor<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class AnnotatedField extends com.fasterxml.jackson.databind.introspect.AnnotatedMember {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public _field: java.lang.reflect.Field;
						public _serialization: com.fasterxml.jackson.databind.introspect.AnnotatedField.Serialization;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public getAnnotated(): java.lang.reflect.Field;
						public getFullName(): string;
						public setValue(param0: any, param1: any): void;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public isTransient(): boolean;
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField.Serialization);
						public getDeclaringClass(): java.lang.Class<any>;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: java.lang.reflect.Field, param2: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public getName(): string;
						public toString(): string;
						public getModifiers(): number;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getMember(): java.lang.reflect.Member;
						public getValue(param0: any): any;
						public getAnnotationCount(): number;
						public getType(param0: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
					}
					export namespace AnnotatedField {
						export class Serialization {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedField.Serialization>;
							public clazz: java.lang.Class<any>;
							public name: string;
							public constructor(param0: java.lang.reflect.Field);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export abstract class AnnotatedMember extends com.fasterxml.jackson.databind.introspect.Annotated {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public _typeContext: com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
						public _annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public getAllAnnotations(): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public hasAnnotation(param0: java.lang.Class<any>): boolean;
						public constructor();
						public getTypeContext(): com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
						public setValue(param0: any, param1: any): void;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public addOrOverride(param0: java.lang.annotation.Annotation): boolean;
						public addIfNotPresent(param0: java.lang.annotation.Annotation): boolean;
						public getDeclaringClass(): java.lang.Class<any>;
						public annotations(): java.lang.Iterable<java.lang.annotation.Annotation>;
						public hasOneOf(param0: native.Array<java.lang.Class<any>>): boolean;
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public fixAccess(param0: boolean): void;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getMember(): java.lang.reflect.Member;
						public getValue(param0: any): any;
						public fixAccess(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class AnnotatedMethod extends com.fasterxml.jackson.databind.introspect.AnnotatedWithParams {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _method: java.lang.reflect.Method;
						public _paramClasses: native.Array<java.lang.Class<any>>;
						public _serialization: com.fasterxml.jackson.databind.introspect.AnnotatedMethod.Serialization;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public getFullName(): string;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap, param2: native.Array<com.fasterxml.jackson.databind.introspect.AnnotationMap>);
						public setValue(param0: any, param1: any): void;
						public call1(param0: any): any;
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getDeclaringClass(): java.lang.Class<any>;
						public hasReturnType(): boolean;
						public getName(): string;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod.Serialization);
						public getRawParameterTypes(): native.Array<java.lang.Class<any>>;
						public getMember(): java.lang.reflect.Method;
						public getRawParameterType(param0: number): java.lang.Class<any>;
						public call(): any;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getMember(): java.lang.reflect.Member;
						public withMethod(param0: java.lang.reflect.Method): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getType(param0: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public constructor();
						public call(param0: native.Array<any>): any;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: java.lang.reflect.Method, param2: com.fasterxml.jackson.databind.introspect.AnnotationMap, param3: native.Array<com.fasterxml.jackson.databind.introspect.AnnotationMap>);
						public getParameterType(param0: number): com.fasterxml.jackson.databind.JavaType;
						public getAnnotated(): java.lang.reflect.Method;
						public getParameterCount(): number;
						public toString(): string;
						public getModifiers(): number;
						public getGenericParameterTypes(): native.Array<java.lang.reflect.Type>;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getRawReturnType(): java.lang.Class<any>;
						public getValue(param0: any): any;
					}
					export namespace AnnotatedMethod {
						export class Serialization {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMethod.Serialization>;
							public clazz: java.lang.Class<any>;
							public name: string;
							public args: native.Array<java.lang.Class<any>>;
							public constructor(param0: java.lang.reflect.Method);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class AnnotatedMethodMap extends java.lang.Iterable<com.fasterxml.jackson.databind.introspect.AnnotatedMethod> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap>;
						public _methods: java.util.LinkedHashMap<com.fasterxml.jackson.databind.introspect.MemberKey,com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public constructor();
						public add(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): void;
						public isEmpty(): boolean;
						public remove(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public find(param0: java.lang.reflect.Method): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public find(param0: string, param1: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public size(): number;
						public remove(param0: java.lang.reflect.Method): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class AnnotatedParameter extends com.fasterxml.jackson.databind.introspect.AnnotatedMember {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public _owner: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _index: number;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public setValue(param0: any, param1: any): void;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getDeclaringClass(): java.lang.Class<any>;
						public getOwner(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public getIndex(): number;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public getName(): string;
						public toString(): string;
						public getModifiers(): number;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getParameterType(): java.lang.reflect.Type;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getMember(): java.lang.reflect.Member;
						public getValue(param0: any): any;
						public getType(param0: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.AnnotationMap, param3: number);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export abstract class AnnotatedWithParams extends com.fasterxml.jackson.databind.introspect.AnnotatedMember {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams>;
						public _paramAnnotations: native.Array<com.fasterxml.jackson.databind.introspect.AnnotationMap>;
						public constructor();
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap, param2: native.Array<com.fasterxml.jackson.databind.introspect.AnnotationMap>);
						public call(param0: native.Array<any>): any;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public call1(param0: any): any;
						public getParameter(param0: number): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public getParameterType(param0: number): com.fasterxml.jackson.databind.JavaType;
						public getParameterCount(): number;
						public replaceParameterAnnotations(param0: number, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public getParameterAnnotations(param0: number): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public getRawParameterType(param0: number): java.lang.Class<any>;
						public call(): any;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getAnnotationCount(): number;
						public getGenericParameterType(param0: number): java.lang.reflect.Type;
						public addOrOverrideParam(param0: number, param1: java.lang.annotation.Annotation): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class AnnotationIntrospectorPair extends com.fasterxml.jackson.databind.AnnotationIntrospector {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair>;
						public _primary: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _secondary: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public findCreatorBinding(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public findObjectIdInfo(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findNameForDeserialization(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public findReferenceType(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public findInjectableValueId(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public findPropertiesToIgnore(param0: com.fasterxml.jackson.databind.introspect.Annotated): native.Array<string>;
						public allIntrospectors(param0: java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>): java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>;
						public findClassDescription(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
						public findKeySerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findPropertyDefaultValue(param0: com.fasterxml.jackson.databind.introspect.Annotated): string;
						public findTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public isAnnotationBundle(param0: java.lang.annotation.Annotation): boolean;
						public findKeyDeserializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findPropertyTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public findContentSerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findWrapperName(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public findNullSerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findNamingStrategy(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
						public findPOJOBuilder(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Class<any>;
						public hasAsValueAnnotation(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public findDeserializationKeyType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findObjectReferenceInfo(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findEnumValues(param0: java.lang.Class<any>, param1: native.Array<java.lang.Enum<any>>, param2: native.Array<string>): native.Array<string>;
						public findContentDeserializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public hasAnyGetterAnnotation(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public constructor();
						public findPropertyAccess(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public findImplicitPropertyName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): string;
						public allIntrospectors(): java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>;
						public findSerializationTyping(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
						public findEnumValue(param0: java.lang.Enum<any>): string;
						public resolveSetterConflict(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public findPropertiesToIgnore(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: boolean): native.Array<string>;
						public refineDeserializationType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public findDeserializationConverter(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findNameForSerialization(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public _isExplicitClassOrOb(param0: any, param1: java.lang.Class<any>): boolean;
						public findSerializationPropertyOrder(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): native.Array<string>;
						public findSerializationSortAlphabetically(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findDeserializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findSerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findSerializationType(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>;
						public findTypeName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
						public hasIgnoreMarker(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
						public findSerializationContentType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findUnwrappingNameTransformer(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.NameTransformer;
						public isTypeId(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public findPOJOBuilderConfig(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public findRootName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.PropertyName;
						public constructor(param0: com.fasterxml.jackson.databind.AnnotationIntrospector, param1: com.fasterxml.jackson.databind.AnnotationIntrospector);
						public findFormat(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findAutoDetectVisibility(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param1: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public findSerializationInclusion(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
						public findDeserializationContentType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findViews(param0: com.fasterxml.jackson.databind.introspect.Annotated): native.Array<java.lang.Class<any>>;
						public findDeserializationContentConverter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public hasRequiredMarker(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public findIgnoreUnknownProperties(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
						public hasAnySetterAnnotation(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public version(): com.fasterxml.jackson.core.Version;
						public static create(param0: com.fasterxml.jackson.databind.AnnotationIntrospector, param1: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.AnnotationIntrospector;
						public findSerializationContentConverter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public findFilterId(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findAndAddVirtualProperties(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): void;
						public findSerializationConverter(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findSerializationKeyType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findPropertyDescription(param0: com.fasterxml.jackson.databind.introspect.Annotated): string;
						public findDeserializationType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findSubtypes(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public findPropertyIndex(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Integer;
						public hasCreatorAnnotation(param0: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
						public findSerializationInclusionForContent(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
						public refineSerializationType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
						public isIgnorableType(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
						public findPropertyContentTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class AnnotationMap extends com.fasterxml.jackson.databind.util.Annotations {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationMap>;
						public _annotations: java.util.HashMap<java.lang.Class<any>,java.lang.annotation.Annotation>;
						public has(param0: java.lang.Class<any>): boolean;
						public annotations(): java.lang.Iterable<java.lang.annotation.Annotation>;
						public static merge(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public constructor();
						public hasOneOf(param0: native.Array<java.lang.Class<any>>): boolean;
						public get(param0: java.lang.Class): java.lang.annotation.Annotation;
						public addIfNotPresent(param0: java.lang.annotation.Annotation): boolean;
						public add(param0: java.lang.annotation.Annotation): boolean;
						public size(): number;
						public _add(param0: java.lang.annotation.Annotation): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class BasicBeanDescription extends com.fasterxml.jackson.databind.BeanDescription {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.BasicBeanDescription>;
						public _propCollector: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						public _config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _classInfo: com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public _bindings: com.fasterxml.jackson.databind.type.TypeBindings;
						public _objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public getClassAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
						public findProperty(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param3: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>);
						public getFactoryMethods(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _properties(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public hasProperty(param0: com.fasterxml.jackson.databind.PropertyName): boolean;
						public findClassDescription(): string;
						public findInjectables(): java.util.Map<any,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public findSerializationConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public getConstructors(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public static forSerialization(param0: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector);
						public findPOJOBuilderConfig(): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public removeProperty(param0: string): boolean;
						public addProperty(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition): boolean;
						public hasKnownClassAnnotations(): boolean;
						public findDeserializationConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public findPropertyInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public _findPropertyFields(param0: java.util.Collection<string>, param1: boolean): java.util.LinkedHashMap<string,com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public findJsonValueMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public findAnySetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public findCreatorParameterNames(): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public findProperties(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public getClassInfo(): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public bindingsForBeanType(): com.fasterxml.jackson.databind.type.TypeBindings;
						public findDefaultConstructor(): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public findPOJOBuilder(): java.lang.Class<any>;
						public instantiateBean(param0: boolean): any;
						public _createConverter(param0: any): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public static forDeserialization(param0: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public findCreatorPropertyNames(): java.util.List<string>;
						public getObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findFactoryMethod(param0: native.Array<java.lang.Class<any>>): java.lang.reflect.Method;
						public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						public findBackReferenceProperties(): java.util.Map<string,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public findExpectedFormat(param0: com.fasterxml.jackson.annotation.JsonFormat.Value): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findAnyGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public static forOtherUse(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public findMethod(param0: string, param1: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getIgnoredPropertyNames(): java.util.Set<string>;
						public findSingleArgConstructor(param0: native.Array<java.lang.Class<any>>): java.lang.reflect.Constructor<any>;
						public isFactoryMethod(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public _findCreatorPropertyName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): com.fasterxml.jackson.databind.PropertyName;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.AnnotatedClass);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class BasicClassIntrospector extends com.fasterxml.jackson.databind.introspect.ClassIntrospector {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector>;
						public static STRING_DESC: com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public static BOOLEAN_DESC: com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public static INT_DESC: com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public static LONG_DESC: com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public static instance: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
						public _cachedFCA: com.fasterxml.jackson.databind.util.LRUMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.BasicBeanDescription>;
						public forCreation(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public constructor();
						public collectPropertiesWithBuilder(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, param3: boolean): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						public collectProperties(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, param3: boolean, param4: string): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						public constructPropertyCollector(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.JavaType, param3: boolean, param4: string): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						public forCreation(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public _isStdJDKCollection(param0: com.fasterxml.jackson.databind.JavaType): boolean;
						public _findStdJdkCollectionDesc(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forDeserializationWithBuilder(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forDeserialization(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forDirectClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public _findStdTypeDesc(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forSerialization(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forDeserializationWithBuilder(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forSerialization(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forDeserialization(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forDirectClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export abstract class BeanPropertyDefinition extends com.fasterxml.jackson.databind.util.Named {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public static EMPTY_INCLUDE: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public isRequired(): boolean;
						public findReferenceType(): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public getConstructorParameters(): java.util.Iterator<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public withSimpleName(param0: string): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public getInternalName(): string;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public getName(): string;
						public couldSerialize(): boolean;
						public isExplicitlyIncluded(): boolean;
						public hasField(): boolean;
						public getNonConstructorMutator(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public isExplicitlyNamed(): boolean;
						public getSetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public hasConstructorParameter(): boolean;
						public getPrimaryMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public couldDeserialize(): boolean;
						public getAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor();
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public hasGetter(): boolean;
						public isTypeId(): boolean;
						public getConstructorParameter(): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public findObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public hasName(param0: com.fasterxml.jackson.databind.PropertyName): boolean;
						public findViews(): native.Array<java.lang.Class<any>>;
						public findInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getField(): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public hasSetter(): boolean;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public getGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getMutator(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export abstract class ClassIntrospector {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.ClassIntrospector>;
						public forCreation(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public constructor();
						public forDeserialization(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forSerialization(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forDeserializationWithBuilder(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forDirectClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
					}
					export namespace ClassIntrospector {
						export class MixInResolver {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
								copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
							});
							public constructor();
							public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
							public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export abstract class ConcreteBeanPropertyBase extends com.fasterxml.jackson.databind.BeanProperty {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase>;
						public _metadata: com.fasterxml.jackson.databind.PropertyMetadata;
						public _format: com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public isRequired(): boolean;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class JacksonAnnotationIntrospector extends com.fasterxml.jackson.databind.AnnotationIntrospector {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector>;
						public _annotationsInside: com.fasterxml.jackson.databind.util.LRUMap<java.lang.Class<any>,java.lang.Boolean>;
						public findCreatorBinding(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public findObjectIdInfo(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findNameForDeserialization(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public findReferenceType(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public findInjectableValueId(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public findPropertiesToIgnore(param0: com.fasterxml.jackson.databind.introspect.Annotated): native.Array<string>;
						public _findTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public _constructStdTypeResolverBuilder(): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public findClassDescription(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
						public findPropertyDefaultValue(param0: com.fasterxml.jackson.databind.introspect.Annotated): string;
						public findKeySerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public isAnnotationBundle(param0: java.lang.annotation.Annotation): boolean;
						public findKeyDeserializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findPropertyTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public findContentSerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findNullSerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findNamingStrategy(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
						public findPOJOBuilder(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Class<any>;
						public hasAsValueAnnotation(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public findDeserializationKeyType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findObjectReferenceInfo(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findEnumValues(param0: java.lang.Class<any>, param1: native.Array<java.lang.Enum<any>>, param2: native.Array<string>): native.Array<string>;
						public findContentDeserializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public _propertyName(param0: string, param1: string): com.fasterxml.jackson.databind.PropertyName;
						public hasAnyGetterAnnotation(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public constructor();
						public findPropertyAccess(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public findImplicitPropertyName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): string;
						public _classIfExplicit(param0: java.lang.Class<any>): java.lang.Class<any>;
						public findSerializationTyping(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
						public _isIgnorable(param0: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
						public findEnumValue(param0: java.lang.Enum<any>): string;
						public resolveSetterConflict(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public findPropertiesToIgnore(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: boolean): native.Array<string>;
						public findDeserializationConverter(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findNameForSerialization(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public _findConstructorName(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public findSerializationPropertyOrder(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): native.Array<string>;
						public findSerializationSortAlphabetically(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findDeserializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findSerializer(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findSerializationType(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>;
						public findTypeName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
						public hasIgnoreMarker(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
						public _constructVirtualProperty(param0: com.fasterxml.jackson.databind.annotation.JsonAppend.Prop, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param2: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public findSerializationContentType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findUnwrappingNameTransformer(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.NameTransformer;
						public isTypeId(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public findPOJOBuilderConfig(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public readResolve(): any;
						public findRootName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.PropertyName;
						public findFormat(param0: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findAutoDetectVisibility(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param1: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public findSerializationInclusion(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
						public _classIfExplicit(param0: java.lang.Class<any>, param1: java.lang.Class<any>): java.lang.Class<any>;
						public findDeserializationContentType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findViews(param0: com.fasterxml.jackson.databind.introspect.Annotated): native.Array<java.lang.Class<any>>;
						public findDeserializationContentConverter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public _constructNoTypeResolverBuilder(): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public hasRequiredMarker(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public findIgnoreUnknownProperties(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
						public hasAnySetterAnnotation(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public version(): com.fasterxml.jackson.core.Version;
						public findSerializationContentConverter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public findFilterId(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findAndAddVirtualProperties(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): void;
						public findSerializationConverter(param0: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public _constructVirtualProperty(param0: com.fasterxml.jackson.databind.annotation.JsonAppend.Attr, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param2: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param3: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public findSerializationKeyType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findPropertyDescription(param0: com.fasterxml.jackson.databind.introspect.Annotated): string;
						public findDeserializationType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findPropertyIndex(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Integer;
						public findSubtypes(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public hasCreatorAnnotation(param0: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
						public findSerializationInclusionForContent(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
						public isIgnorableType(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
						public findPropertyContentTypeResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
					}
					export namespace JacksonAnnotationIntrospector {
						export class Java7Support {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.Java7Support>;
							public constructor();
							public hasCreatorAnnotation(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
							public findConstructorName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): com.fasterxml.jackson.databind.PropertyName;
							public findTransient(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class MemberKey {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.MemberKey>;
						public constructor(param0: java.lang.reflect.Constructor<any>);
						public constructor(param0: string, param1: native.Array<java.lang.Class<any>>);
						public hashCode(): number;
						public equals(param0: any): boolean;
						public constructor(param0: java.lang.reflect.Method);
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export abstract class NopAnnotationIntrospector extends com.fasterxml.jackson.databind.AnnotationIntrospector {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector>;
						public static instance: com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;
						public constructor();
						public version(): com.fasterxml.jackson.core.Version;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class ObjectIdInfo {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.ObjectIdInfo>;
						public _propertyName: com.fasterxml.jackson.databind.PropertyName;
						public _generator: java.lang.Class<any>;
						public _resolver: java.lang.Class<any>;
						public _scope: java.lang.Class<any>;
						public _alwaysAsId: boolean;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: java.lang.Class<any>, param2: java.lang.Class<any>, param3: boolean);
						public getGeneratorType(): java.lang.Class<any>;
						public constructor(param0: string, param1: java.lang.Class<any>, param2: java.lang.Class<any>);
						public withAlwaysAsId(param0: boolean): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public getScope(): java.lang.Class<any>;
						public getAlwaysAsId(): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: java.lang.Class<any>, param2: java.lang.Class<any>);
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: java.lang.Class<any>, param2: java.lang.Class<any>, param3: boolean, param4: java.lang.Class<any>);
						public constructor(param0: com.fasterxml.jackson.databind.PropertyName, param1: java.lang.Class<any>, param2: java.lang.Class<any>, param3: java.lang.Class<any>);
						public getResolverType(): java.lang.Class<any>;
						public getPropertyName(): com.fasterxml.jackson.databind.PropertyName;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class POJOPropertiesCollector {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector>;
						public _config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
						public _forSerialization: boolean;
						public _stdBeanNaming: boolean;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _classDef: com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public _visibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _mutatorPrefix: string;
						public _collected: boolean;
						public _properties: java.util.LinkedHashMap<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public _creatorProperties: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public _anyGetters: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public _anySetters: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _jsonValueGetters: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _ignoredPropertyNames: java.util.HashSet<string>;
						public _injectables: java.util.LinkedHashMap<any,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public _property(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, param1: string): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
						public getPropertyMap(): java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public getProperties(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: boolean, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param4: string);
						public _doAddInjectable(param0: any, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember): void;
						public _renameWithWrappers(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public getInjectables(): java.util.Map<any,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public getClassDef(): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public getConfig(): com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
						public _addFields(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _addCreators(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _removeUnwantedAccessor(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _renameProperties(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public getAnySetterMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public _addCreatorParam(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): void;
						public _addMethods(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public getJsonValueMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public _removeUnwantedProperties(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public collectAll(): void;
						public _sortProperties(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _addInjectables(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _renameUsing(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, param1: com.fasterxml.jackson.databind.PropertyNamingStrategy): void;
						public _updateCreatorProperty(param0: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder, param1: java.util.List<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public collect(): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						public reportProblem(param0: string): void;
						public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _addSetterMethod(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
						public getObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public getAnyGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public findPOJOBuilderClass(): java.lang.Class<any>;
						public getIgnoredPropertyNames(): java.util.Set<string>;
						public _addGetterMethod(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param2: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
						public _property(param0: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, param1: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class POJOPropertyBuilder extends com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition implements java.lang.Comparable<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>  {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public _forSerialization: boolean;
						public _config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _name: com.fasterxml.jackson.databind.PropertyName;
						public _internalName: com.fasterxml.jackson.databind.PropertyName;
						public _fields: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public _ctorParameters: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public _getters: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _setters: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public anyVisible(): boolean;
						public findReferenceType(): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public getConstructorParameters(): java.util.Iterator<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public getInternalName(): string;
						public addCtor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, param1: com.fasterxml.jackson.databind.PropertyName, param2: boolean, param3: boolean, param4: boolean): void;
						public couldSerialize(): boolean;
						public fromMemberAnnotations(param0: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.WithMember<any>): any;
						public hasField(): boolean;
						public getNonConstructorMutator(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public addGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: com.fasterxml.jackson.databind.PropertyName, param2: boolean, param3: boolean, param4: boolean): void;
						public isExplicitlyNamed(): boolean;
						public hasConstructorParameter(): boolean;
						public getPrimaryMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _findIndex(): java.lang.Integer;
						public getAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor();
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public fromMemberAnnotationsExcept(param0: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.WithMember<any>, param1: any): any;
						public _findRequired(): java.lang.Boolean;
						public hasGetter(): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder, param1: com.fasterxml.jackson.databind.PropertyName);
						public explode(param0: java.util.Collection<com.fasterxml.jackson.databind.PropertyName>): java.util.Collection<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public removeIgnored(): void;
						public addAll(param0: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder): void;
						public toString(): string;
						public findObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public _setterPriority(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): number;
						public findViews(): native.Array<java.lang.Class<any>>;
						public findInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findAccess(): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public removeNonVisible(param0: boolean): void;
						public getField(): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public getGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getMutator(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.AnnotationIntrospector, param2: boolean, param3: com.fasterxml.jackson.databind.PropertyName);
						public compareTo(param0: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder): number;
						public withSimpleName(param0: string): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public withSimpleName(param0: string): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public getName(): string;
						public trimByVisibility(): void;
						public isExplicitlyIncluded(): boolean;
						public getSetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public removeConstructors(): void;
						public findExplicitNames(): java.util.Set<com.fasterxml.jackson.databind.PropertyName>;
						public couldDeserialize(): boolean;
						public _findDescription(): string;
						public mergeAnnotations(param0: boolean): void;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.AnnotationIntrospector, param2: boolean, param3: com.fasterxml.jackson.databind.PropertyName, param4: com.fasterxml.jackson.databind.PropertyName);
						public isTypeId(): boolean;
						public getConstructorParameter(): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public addSetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: com.fasterxml.jackson.databind.PropertyName, param2: boolean, param3: boolean, param4: boolean): void;
						public _findDefaultValue(): string;
						public hasName(param0: com.fasterxml.jackson.databind.PropertyName): boolean;
						public anyIgnorals(): boolean;
						public addField(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField, param1: com.fasterxml.jackson.databind.PropertyName, param2: boolean, param3: boolean, param4: boolean): void;
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
						public hasSetter(): boolean;
						public _getterPriority(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): number;
					}
					export namespace POJOPropertyBuilder {
						export class Linked<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<any>>;
							public value: T;
							public next: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public name: com.fasterxml.jackson.databind.PropertyName;
							public isNameExplicit: boolean;
							public isVisible: boolean;
							public isMarkedIgnored: boolean;
							public constructor(param0: T, param1: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>, param2: com.fasterxml.jackson.databind.PropertyName, param3: boolean, param4: boolean, param5: boolean);
							public append(param0: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public withoutIgnored(): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public withoutNonVisible(): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public withValue(param0: T): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public toString(): string;
							public withoutNext(): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public trimByVisibility(): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public withNext(param0: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
						}
						export class MemberIterator<T>  extends java.util.Iterator<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.MemberIterator<any>>;
							public hasNext(): boolean;
							public remove(): void;
							public next(): any;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<any>);
						}
						export class WithMember<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.WithMember<any>>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$WithMember interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								withMember(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): T;
							});
							public constructor();
							public withMember(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): T;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class SimpleMixInResolver extends com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver>;
						public _overrides: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public _localMixIns: java.util.Map<com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class<any>>;
						public setLocalDefinitions(param0: java.util.Map<java.lang.Class<any>,java.lang.Class<any>>): void;
						public addLocalDefinition(param0: java.lang.Class<any>, param1: java.lang.Class<any>): void;
						public withOverrides(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
						public localSize(): number;
						public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public copy(): com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver);
						public constructor(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, param1: java.util.Map<com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class<any>>);
						public withoutLocalDefinitions(): com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
						public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class TypeResolutionContext {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.TypeResolutionContext>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.TypeResolutionContext interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						});
						public constructor();
						public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					}
					export namespace TypeResolutionContext {
						export class Basic extends com.fasterxml.jackson.databind.introspect.TypeResolutionContext {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.TypeResolutionContext.Basic>;
							public constructor(param0: com.fasterxml.jackson.databind.type.TypeFactory, param1: com.fasterxml.jackson.databind.type.TypeBindings);
							public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class VirtualAnnotatedMember extends com.fasterxml.jackson.databind.introspect.AnnotatedMember {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember>;
						public _declaringClass: java.lang.Class<any>;
						public _rawType: java.lang.Class<any>;
						public _name: string;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public getAnnotated(): java.lang.reflect.Field;
						public getFullName(): string;
						public setValue(param0: any, param1: any): void;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getDeclaringClass(): java.lang.Class<any>;
						public getName(): string;
						public toString(): string;
						public getModifiers(): number;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, param1: java.lang.Class<any>, param2: string, param3: java.lang.Class<any>);
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getMember(): java.lang.reflect.Member;
						public getValue(param0: any): any;
						public getAnnotationCount(): number;
						public getType(param0: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class VisibilityChecker<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.VisibilityChecker<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect): T;
							with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withIsGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withSetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withCreatorVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withFieldVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							isGetterVisible(param0: java.lang.reflect.Method): boolean;
							isGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							isIsGetterVisible(param0: java.lang.reflect.Method): boolean;
							isIsGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							isSetterVisible(param0: java.lang.reflect.Method): boolean;
							isSetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							isCreatorVisible(param0: java.lang.reflect.Member): boolean;
							isCreatorVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
							isFieldVisible(param0: java.lang.reflect.Field): boolean;
							isFieldVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField): boolean;
						});
						public constructor();
						public isCreatorVisible(param0: java.lang.reflect.Member): boolean;
						public isCreatorVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
						public isFieldVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField): boolean;
						public isGetterVisible(param0: java.lang.reflect.Method): boolean;
						public withSetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public isSetterVisible(param0: java.lang.reflect.Method): boolean;
						public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public isFieldVisible(param0: java.lang.reflect.Field): boolean;
						public withFieldVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public withCreatorVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public isIsGetterVisible(param0: java.lang.reflect.Method): boolean;
						public isIsGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public withIsGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public isGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public isSetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect): T;
						public withGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
					}
					export namespace VisibilityChecker {
						export class Std extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std>;
							public static DEFAULT: com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public _getterMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public _isGetterMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public _setterMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public _creatorMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public _fieldMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public withIsGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public withFieldVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public constructor(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, param2: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, param3: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, param4: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility);
							public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isSetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect): any;
							public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public toString(): string;
							public isIsGetterVisible(param0: java.lang.reflect.Method): boolean;
							public withFieldVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public constructor(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility);
							public isFieldVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField): boolean;
							public withSetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public withCreatorVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public constructor(param0: com.fasterxml.jackson.annotation.JsonAutoDetect);
							public isFieldVisible(param0: java.lang.reflect.Field): boolean;
							public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public withGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public static defaultInstance(): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isCreatorVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
							public isCreatorVisible(param0: java.lang.reflect.Member): boolean;
							public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isIsGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							public withIsGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							public isGetterVisible(param0: java.lang.reflect.Method): boolean;
							public withCreatorVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public withSetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public isSetterVisible(param0: java.lang.reflect.Method): boolean;
							public withGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace introspect {
					export class WithMember<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.WithMember<any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.WithMember<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							withMember(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): T;
						});
						public constructor();
						public withMember(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): T;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonAnyFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
					export namespace JsonAnyFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor.Base>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonArrayFormatVisitor extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes): void;
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes): void;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
					export namespace JsonArrayFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor.Base>;
							public _provider: com.fasterxml.jackson.databind.SerializerProvider;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider);
							public itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes): void;
							public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							public itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonBooleanFormatVisitor extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
					}
					export namespace JsonBooleanFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonFormatTypes {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes>;
						public static STRING: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static NUMBER: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static INTEGER: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static BOOLEAN: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static OBJECT: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static ARRAY: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static NULL: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static ANY: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public value(): string;
						public static valueOf(param0: string): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static forValue(param0: string): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static values(): native.Array<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonFormatVisitable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						});
						public constructor();
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonFormatVisitorWithSerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonFormatVisitorWrapper extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							expectObjectFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
							expectArrayFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
							expectStringFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;
							expectNumberFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;
							expectIntegerFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;
							expectBooleanFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor;
							expectNullFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor;
							expectAnyFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor;
							expectMapFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public expectArrayFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
						public expectStringFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;
						public expectObjectFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
						public expectIntegerFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public expectAnyFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor;
						public expectNumberFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;
						public expectNullFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor;
						public expectBooleanFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor;
						public expectMapFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
					export namespace JsonFormatVisitorWrapper {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper.Base>;
							public _provider: com.fasterxml.jackson.databind.SerializerProvider;
							public constructor();
							public expectMapFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;
							public expectNullFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor;
							public expectObjectFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
							public expectAnyFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor;
							public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider);
							public expectNumberFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;
							public expectIntegerFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;
							public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							public expectArrayFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
							public expectBooleanFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor;
							public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
							public expectStringFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonIntegerFormatVisitor extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						public numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
					}
					export namespace JsonIntegerFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonMapFormatVisitor extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							keyFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							valueFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public keyFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public valueFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
					export namespace JsonMapFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor.Base>;
							public _provider: com.fasterxml.jackson.databind.SerializerProvider;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider);
							public valueFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							public keyFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonNullFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
					export namespace JsonNullFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor.Base>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonNumberFormatVisitor extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						public numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
					}
					export namespace JsonNumberFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonObjectFormatVisitor extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							property(param0: com.fasterxml.jackson.databind.BeanProperty): void;
							property(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
							optionalProperty(param0: com.fasterxml.jackson.databind.BeanProperty): void;
							optionalProperty(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public property(param0: com.fasterxml.jackson.databind.BeanProperty): void;
						public optionalProperty(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
						public optionalProperty(param0: com.fasterxml.jackson.databind.BeanProperty): void;
						public property(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
					export namespace JsonObjectFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor.Base>;
							public _provider: com.fasterxml.jackson.databind.SerializerProvider;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider);
							public optionalProperty(param0: com.fasterxml.jackson.databind.BeanProperty): void;
							public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							public property(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
							public property(param0: com.fasterxml.jackson.databind.BeanProperty): void;
							public optionalProperty(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
							public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonStringFormatVisitor extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
					}
					export namespace JsonStringFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonValueFormat {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat>;
						public static COLOR: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static DATE: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static DATE_TIME: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static EMAIL: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static HOST_NAME: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static IP_ADDRESS: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static IPV6: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static PHONE: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static REGEX: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static STYLE: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static TIME: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static URI: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static UTC_MILLISEC: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static valueOf(param0: string): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static values(): native.Array<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat>;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonFormatVisitors {
					export class JsonValueFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
					}
					export namespace JsonValueFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonschema {
					export class JsonSchema {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonschema.JsonSchema>;
						public constructor(param0: com.fasterxml.jackson.databind.node.ObjectNode);
						public getSchemaNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public static getDefaultSchemaNode(): com.fasterxml.jackson.databind.JsonNode;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonschema {
					export class JsonSerializableSchema {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							id(): string;
							schemaType(): string;
							schemaObjectPropertiesDefinition(): string;
							schemaItemDefinition(): string;
						});
						public constructor();
						public static NO_VALUE: string;
						public schemaItemDefinition(): string;
						public schemaType(): string;
						public schemaObjectPropertiesDefinition(): string;
						public id(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsonschema {
					export class SchemaAware {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonschema.SchemaAware>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonschema.SchemaAware interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						});
						public constructor();
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export class NamedType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public _class: java.lang.Class<any>;
						public _hashCode: number;
						public _name: string;
						public constructor(param0: java.lang.Class<any>, param1: string);
						public constructor(param0: java.lang.Class<any>);
						public setName(param0: string): void;
						public getType(): java.lang.Class<any>;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public getName(): string;
						public hasName(): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export abstract class SubtypeResolver {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.SubtypeResolver>;
						public collectAndResolveSubtypes(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param2: com.fasterxml.jackson.databind.AnnotationIntrospector): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public constructor();
						public registerSubtypes(param0: native.Array<java.lang.Class<any>>): void;
						public registerSubtypes(param0: native.Array<com.fasterxml.jackson.databind.jsontype.NamedType>): void;
						public collectAndResolveSubtypesByTypeId(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public collectAndResolveSubtypes(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param2: com.fasterxml.jackson.databind.AnnotationIntrospector, param3: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public collectAndResolveSubtypesByClass(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public collectAndResolveSubtypesByClass(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public collectAndResolveSubtypesByTypeId(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export abstract class TypeDeserializer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.TypeDeserializer>;
						public constructor();
						public static deserializeIfNatural(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.JavaType): any;
						public deserializeTypedFromScalar(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeTypedFromArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						public getTypeIdResolver(): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
						public getPropertyName(): string;
						public static deserializeIfNatural(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: java.lang.Class<any>): any;
						public deserializeTypedFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeTypedFromAny(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public getDefaultImpl(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export class TypeIdResolver {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.TypeIdResolver>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsontype.TypeIdResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							init(param0: com.fasterxml.jackson.databind.JavaType): void;
							idFromValue(param0: any): string;
							idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							idFromBaseType(): string;
							typeFromId(param0: string): com.fasterxml.jackson.databind.JavaType;
							typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							getDescForKnownTypeIds(): string;
							getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						});
						public constructor();
						public init(param0: com.fasterxml.jackson.databind.JavaType): void;
						public getDescForKnownTypeIds(): string;
						public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
						public idFromValue(param0: any): string;
						public idFromBaseType(): string;
						public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
						public typeFromId(param0: string): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export class TypeResolverBuilder<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getDefaultImpl(): java.lang.Class<any>;
							buildTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							buildTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): T;
							inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): T;
							typeProperty(param0: string): T;
							defaultImpl(param0: java.lang.Class<any>): T;
							typeIdVisibility(param0: boolean): T;
						});
						public constructor();
						public defaultImpl(param0: java.lang.Class<any>): T;
						public buildTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public buildTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): T;
						public init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): T;
						public typeProperty(param0: string): T;
						public typeIdVisibility(param0: boolean): T;
						public getDefaultImpl(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export abstract class TypeSerializer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.TypeSerializer>;
						public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public constructor();
						public writeTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeTypeSuffixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
						public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						public writeCustomTypeSuffixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						public getPropertyName(): string;
						public writeCustomTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						public writeCustomTypeSuffixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeCustomTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						public writeCustomTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						public writeTypeSuffixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
						public writeCustomTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
						public getTypeIdResolver(): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
						public writeTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class AsArrayTypeDeserializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer>;
							public constructor();
							public deserializeTypedFromArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer, param1: com.fasterxml.jackson.databind.BeanProperty);
							public deserializeTypedFromAny(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, param1: com.fasterxml.jackson.databind.BeanProperty);
							public _deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param2: string, param3: boolean, param4: java.lang.Class<any>);
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public deserializeTypedFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _locateTypeId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): string;
							public _usesExternalId(): boolean;
							public deserializeTypedFromScalar(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class AsArrayTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer>;
							public constructor();
							public writeTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public writeCustomTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public writeTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeCustomTypeSuffixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public writeTypeSuffixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public writeCustomTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param1: com.fasterxml.jackson.databind.BeanProperty);
							public writeCustomTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
							public writeTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypeSuffixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeCustomTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public writeTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeCustomTypeSuffixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class AsExistingPropertyTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer>;
							public constructor();
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param1: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param1: com.fasterxml.jackson.databind.BeanProperty, param2: string);
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public writeCustomTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class AsExternalTypeDeserializer extends com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer>;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param2: string, param3: boolean, param4: java.lang.Class<any>);
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _usesExternalId(): boolean;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer, param1: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer, param1: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, param1: com.fasterxml.jackson.databind.BeanProperty);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class AsExternalTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer>;
							public _typePropertyName: string;
							public _writeArrayPrefix(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public writeTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public _writeObjectSuffix(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param1: com.fasterxml.jackson.databind.BeanProperty);
							public _writeObjectPrefix(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public _writeArraySuffix(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
							public writeTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeCustomTypeSuffixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public constructor();
							public writeCustomTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public writeCustomTypeSuffixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public writeTypeSuffixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public getPropertyName(): string;
							public writeTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public writeCustomTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param1: com.fasterxml.jackson.databind.BeanProperty, param2: string);
							public writeCustomTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public _writeScalarSuffix(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public _writeScalarPrefix(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypeSuffixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeCustomTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class AsPropertyTypeDeserializer extends com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer>;
							public _inclusion: com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public constructor();
							public _deserializeTypedForId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.util.TokenBuffer): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param2: string, param3: boolean, param4: java.lang.Class<any>);
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public deserializeTypedFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param2: string, param3: boolean, param4: java.lang.Class<any>, param5: com.fasterxml.jackson.annotation.JsonTypeInfo.As);
							public _deserializeTypedUsingDefaultImpl(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.util.TokenBuffer): any;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer, param1: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer, param1: com.fasterxml.jackson.databind.BeanProperty);
							public deserializeTypedFromAny(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, param1: com.fasterxml.jackson.databind.BeanProperty);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class AsPropertyTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer>;
							public _typePropertyName: string;
							public constructor();
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public getPropertyName(): string;
							public writeCustomTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param1: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param1: com.fasterxml.jackson.databind.BeanProperty, param2: string);
							public writeCustomTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
							public writeTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class AsWrapperTypeDeserializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer>;
							public constructor();
							public _deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param2: string, param3: boolean, param4: java.lang.Class<any>);
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public deserializeTypedFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromScalar(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer, param1: com.fasterxml.jackson.databind.BeanProperty);
							public deserializeTypedFromAny(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, param1: com.fasterxml.jackson.databind.BeanProperty);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class AsWrapperTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer>;
							public constructor();
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
							public writeTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public writeCustomTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public writeTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeCustomTypeSuffixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public writeTypeSuffixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypePrefixForArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: java.lang.Class<any>): void;
							public writeCustomTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param1: com.fasterxml.jackson.databind.BeanProperty);
							public writeCustomTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public writeTypeSuffixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeTypePrefixForObject(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public _validTypeId(param0: string): string;
							public writeTypeSuffixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeCustomTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
							public writeTypePrefixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator): void;
							public writeCustomTypeSuffixForScalar(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: string): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class ClassNameIdResolver extends com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver>;
							public constructor();
							public idFromValue(param0: any): string;
							public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							public getDescForKnownTypeIds(): string;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.type.TypeFactory);
							public init(param0: com.fasterxml.jackson.databind.JavaType): void;
							public typeFromId(param0: string): com.fasterxml.jackson.databind.JavaType;
							public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							public _idFrom(param0: any, param1: java.lang.Class<any>): string;
							public registerSubtype(param0: java.lang.Class<any>, param1: string): void;
							public _typeFromId(param0: string, param1: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
							public idFromBaseType(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class MinimalClassNameIdResolver extends com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver>;
							public _basePackageName: string;
							public _basePackagePrefix: string;
							public constructor();
							public getDescForKnownTypeIds(): string;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.type.TypeFactory);
							public init(param0: com.fasterxml.jackson.databind.JavaType): void;
							public typeFromId(param0: string): com.fasterxml.jackson.databind.JavaType;
							public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							public idFromValue(param0: any): string;
							public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							public _typeFromId(param0: string, param1: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
							public idFromBaseType(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class StdSubtypeResolver extends com.fasterxml.jackson.databind.jsontype.SubtypeResolver {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver>;
							public _registeredSubtypes: java.util.LinkedHashSet<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public constructor();
							public registerSubtypes(param0: native.Array<java.lang.Class<any>>): void;
							public collectAndResolveSubtypesByTypeId(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public collectAndResolveSubtypes(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param2: com.fasterxml.jackson.databind.AnnotationIntrospector, param3: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public collectAndResolveSubtypes(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param2: com.fasterxml.jackson.databind.AnnotationIntrospector): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public _combineNamedAndUnnamed(param0: java.util.Set<java.lang.Class<any>>, param1: java.util.Map<string,com.fasterxml.jackson.databind.jsontype.NamedType>): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public _collectAndResolve(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param1: com.fasterxml.jackson.databind.jsontype.NamedType, param2: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param3: com.fasterxml.jackson.databind.AnnotationIntrospector, param4: java.util.HashMap<com.fasterxml.jackson.databind.jsontype.NamedType,com.fasterxml.jackson.databind.jsontype.NamedType>): void;
							public _collectAndResolveByTypeId(param0: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param1: com.fasterxml.jackson.databind.jsontype.NamedType, param2: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param3: java.util.Set<java.lang.Class<any>>, param4: java.util.Map<string,com.fasterxml.jackson.databind.jsontype.NamedType>): void;
							public collectAndResolveSubtypesByClass(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public collectAndResolveSubtypesByTypeId(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public registerSubtypes(param0: native.Array<com.fasterxml.jackson.databind.jsontype.NamedType>): void;
							public collectAndResolveSubtypesByClass(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class StdTypeResolverBuilder extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder>;
							public _idType: com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public _includeAs: com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public _typeProperty: string;
							public _typeIdVisible: boolean;
							public _defaultImpl: java.lang.Class<any>;
							public _customIdResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public constructor();
							public isTypeIdVisible(): boolean;
							public typeIdVisibility(param0: boolean): any;
							public buildTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public idResolver(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>, param3: boolean, param4: boolean): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public typeProperty(param0: string): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public typeIdVisibility(param0: boolean): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public static noTypeInfoBuilder(): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public getTypeProperty(): string;
							public init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public getDefaultImpl(): java.lang.Class<any>;
							public inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): any;
							public buildTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public defaultImpl(param0: java.lang.Class<any>): any;
							public init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): any;
							public defaultImpl(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public typeProperty(param0: string): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export abstract class TypeDeserializerBase extends com.fasterxml.jackson.databind.jsontype.TypeDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase>;
							public _idResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public _baseType: com.fasterxml.jackson.databind.JavaType;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _defaultImpl: com.fasterxml.jackson.databind.JavaType;
							public _typePropertyName: string;
							public _typeIdVisible: boolean;
							public _deserializers: java.util.Map<string,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
							public _defaultImplDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor();
							public _findDefaultImplDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _deserializeWithNativeTypeId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeWithNativeTypeId(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public toString(): string;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public getPropertyName(): string;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, param1: com.fasterxml.jackson.databind.BeanProperty);
							public _findDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public baseTypeName(): string;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param2: string, param3: boolean, param4: java.lang.Class<any>);
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public getTypeIdResolver(): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public getDefaultImpl(): java.lang.Class<any>;
							public _handleUnknownTypeId(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: string, param2: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param3: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export abstract class TypeIdResolverBase extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase>;
							public _typeFactory: com.fasterxml.jackson.databind.type.TypeFactory;
							public _baseType: com.fasterxml.jackson.databind.JavaType;
							public constructor();
							public getDescForKnownTypeIds(): string;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.type.TypeFactory);
							public init(param0: com.fasterxml.jackson.databind.JavaType): void;
							public typeFromId(param0: string): com.fasterxml.jackson.databind.JavaType;
							public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							public idFromValue(param0: any): string;
							public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							public idFromBaseType(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export class TypeNameIdResolver extends com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver>;
							public _config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
							public _typeToId: java.util.HashMap<string,string>;
							public _idToType: java.util.HashMap<string,com.fasterxml.jackson.databind.JavaType>;
							public constructor();
							public idFromClass(param0: java.lang.Class<any>): string;
							public constructor(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.HashMap<string,string>, param3: java.util.HashMap<string,com.fasterxml.jackson.databind.JavaType>);
							public idFromValue(param0: any): string;
							public toString(): string;
							public static construct(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>, param3: boolean, param4: boolean): com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
							public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							public getDescForKnownTypeIds(): string;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.type.TypeFactory);
							public init(param0: com.fasterxml.jackson.databind.JavaType): void;
							public typeFromId(param0: string): com.fasterxml.jackson.databind.JavaType;
							public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							public _typeFromId(param0: string): com.fasterxml.jackson.databind.JavaType;
							public static _defaultTypeId(param0: java.lang.Class<any>): string;
							public idFromBaseType(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace jsontype {
					export namespace impl {
						export abstract class TypeSerializerBase extends com.fasterxml.jackson.databind.jsontype.TypeSerializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase>;
							public _idResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, param1: com.fasterxml.jackson.databind.BeanProperty);
							public handleMissingId(param0: any): void;
							public getTypeIdResolver(): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							public idFromValue(param0: any): string;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public getPropertyName(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace namespace {
					export class SimpleAbstractTypeResolver extends com.fasterxml.jackson.databind.AbstractTypeResolver {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.namespace.SimpleAbstractTypeResolver>;
						public _mappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class<any>>;
						public constructor();
						public resolveAbstractType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JavaType;
						public findTypeMapping(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public resolveAbstractType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public addMapping(param0: java.lang.Class, param1: java.lang.Class): com.fasterxml.jackson.databind.namespace.SimpleAbstractTypeResolver;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace namespace {
					export class SimpleDeserializers extends com.fasterxml.jackson.databind.deser.Deserializers {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.namespace.SimpleDeserializers>;
						public _classMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
						public _hasEnumDeserializer: boolean;
						public findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor();
						public findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public addDeserializer(param0: java.lang.Class, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>): void;
						public findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(param0: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.JsonDeserializer<any>>);
						public findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public addDeserializers(param0: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.JsonDeserializer<any>>): void;
						public findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace namespace {
					export class SimpleKeyDeserializers extends com.fasterxml.jackson.databind.deser.KeyDeserializers {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.namespace.SimpleKeyDeserializers>;
						public _classMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.KeyDeserializer>;
						public constructor();
						public findKeyDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
						public addDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.KeyDeserializer): com.fasterxml.jackson.databind.namespace.SimpleKeyDeserializers;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace namespace {
					export class Simplenamespace extends com.fasterxml.jackson.databind.namespace {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.namespace.Simplenamespace>;
						public _name: string;
						public _version: com.fasterxml.jackson.core.Version;
						public _serializers: com.fasterxml.jackson.databind.namespace.SimpleSerializers;
						public _deserializers: com.fasterxml.jackson.databind.namespace.SimpleDeserializers;
						public _keySerializers: com.fasterxml.jackson.databind.namespace.SimpleSerializers;
						public _keyDeserializers: com.fasterxml.jackson.databind.namespace.SimpleKeyDeserializers;
						public _abstractTypes: com.fasterxml.jackson.databind.namespace.SimpleAbstractTypeResolver;
						public _valueInstantiators: com.fasterxml.jackson.databind.namespace.SimpleValueInstantiators;
						public _deserializerModifier: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
						public _serializerModifier: com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
						public _mixins: java.util.HashMap<java.lang.Class<any>,java.lang.Class<any>>;
						public _subtypes: java.util.LinkedHashSet<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public _namingStrategy: com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public setSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public setDeserializers(param0: com.fasterxml.jackson.databind.namespace.SimpleDeserializers): void;
						public addDeserializer(param0: java.lang.Class, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.Version, param2: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.JsonDeserializer<any>>, param3: java.util.List<com.fasterxml.jackson.databind.JsonSerializer<any>>);
						public getTypeId(): any;
						public setSerializers(param0: com.fasterxml.jackson.databind.namespace.SimpleSerializers): void;
						public setNamingStrategy(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public registerSubtypes(param0: native.Array<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public setAbstractTypes(param0: com.fasterxml.jackson.databind.namespace.SimpleAbstractTypeResolver): void;
						public addAbstractTypeMapping(param0: java.lang.Class, param1: java.lang.Class): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public setMixInAnnotation(param0: java.lang.Class<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.Version, param2: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.JsonDeserializer<any>>);
						public setDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public setKeySerializers(param0: com.fasterxml.jackson.databind.namespace.SimpleSerializers): void;
						public registerSubtypes(param0: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public constructor();
						public addKeySerializer(param0: java.lang.Class, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.Version);
						public getnamespaceName(): string;
						public version(): com.fasterxml.jackson.core.Version;
						public setKeyDeserializers(param0: com.fasterxml.jackson.databind.namespace.SimpleKeyDeserializers): void;
						public addSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public addKeyDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.KeyDeserializer): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public constructor(param0: com.fasterxml.jackson.core.Version);
						public setValueInstantiators(param0: com.fasterxml.jackson.databind.namespace.SimpleValueInstantiators): void;
						public addValueInstantiator(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public constructor(param0: string, param1: com.fasterxml.jackson.core.Version, param2: java.util.List<com.fasterxml.jackson.databind.JsonSerializer<any>>);
						public setupnamespace(param0: com.fasterxml.jackson.databind.namespace.SetupContext): void;
						public addSerializer(param0: java.lang.Class, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.namespace.Simplenamespace;
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace namespace {
					export class SimpleSerializers extends com.fasterxml.jackson.databind.ser.Serializers.Base {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.namespace.SimpleSerializers>;
						public _classMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.JsonSerializer<any>>;
						public _interfaceMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.JsonSerializer<any>>;
						public _hasEnumSerializer: boolean;
						public constructor();
						public findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public addSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _findInterfaceMapping(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.ClassKey): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor(param0: java.util.List<com.fasterxml.jackson.databind.JsonSerializer<any>>);
						public addSerializer(param0: java.lang.Class, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public addSerializers(param0: java.util.List<com.fasterxml.jackson.databind.JsonSerializer<any>>): void;
						public _addSerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace namespace {
					export class SimpleValueInstantiators extends com.fasterxml.jackson.databind.deser.ValueInstantiators.Base {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.namespace.SimpleValueInstantiators>;
						public _classMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.deser.ValueInstantiator>;
						public constructor();
						public addValueInstantiator(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.namespace.SimpleValueInstantiators;
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class ArrayNode extends com.fasterxml.jackson.databind.node.ContainerNode<com.fasterxml.jackson.databind.node.ArrayNode> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ArrayNode>;
						public addAll(param0: java.util.Collection<any>): com.fasterxml.jackson.databind.node.ArrayNode;
						public constructor(param0: com.fasterxml.jackson.databind.node.JsonNodeFactory);
						public set(param0: number, param1: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.JsonNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public nullNode(): com.fasterxml.jackson.databind.node.NullNode;
						public insertNull(param0: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public _childrenEqual(param0: com.fasterxml.jackson.databind.node.ArrayNode): boolean;
						public add(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(param0: number, param1: java.lang.Float): com.fasterxml.jackson.databind.node.ArrayNode;
						public isContainerNode(): boolean;
						public size(): number;
						public constructor();
						public toString(): string;
						public findValues(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public findValuesAsText(param0: string): java.util.List<string>;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public insert(param0: number, param1: java.lang.Integer): com.fasterxml.jackson.databind.node.ArrayNode;
						public removeAll(): any;
						public binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.BinaryNode;
						public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider): boolean;
						public removeAll(): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.TextNode;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public addArray(): com.fasterxml.jackson.databind.node.ArrayNode;
						public _at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public deepCopy(): com.fasterxml.jackson.databind.node.ArrayNode;
						public findParent(param0: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public add(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ArrayNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public add(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ArrayNode;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public add(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(param0: number, param1: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public isValueNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public add(param0: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(param0: number, param1: java.lang.Boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public insert(param0: number, param1: boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.NumericNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.NumericNode;
						public remove(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
						public add(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ArrayNode;
						public isObject(): boolean;
						public insert(param0: number, param1: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ArrayNode;
						public binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public elements(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public equals(param0: any): boolean;
						public findValuesAsText(param0: string, param1: java.util.List<string>): java.util.List<string>;
						public binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.ValueNode;
						public insertArray(param0: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public findParents(param0: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public insertObject(param0: number): com.fasterxml.jackson.databind.node.ObjectNode;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public findValues(param0: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public _add(param0: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public insert(param0: number, param1: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public add(param0: native.Array<number>): com.fasterxml.jackson.databind.node.ArrayNode;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public add(param0: boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(param0: number, param1: java.lang.Double): com.fasterxml.jackson.databind.node.ArrayNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public insert(param0: number, param1: native.Array<number>): com.fasterxml.jackson.databind.node.ArrayNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public findValue(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public addAll(param0: com.fasterxml.jackson.databind.node.ArrayNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public add(param0: string): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(param0: number, param1: java.lang.Long): com.fasterxml.jackson.databind.node.ArrayNode;
						public isArray(): boolean;
						public insert(param0: number, param1: string): com.fasterxml.jackson.databind.node.ArrayNode;
						public hashCode(): number;
						public binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public _insert(param0: number, param1: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public insertPOJO(param0: number, param1: any): com.fasterxml.jackson.databind.node.ArrayNode;
						public findParent(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public add(param0: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public add(param0: java.lang.Boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public findParents(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public addPOJO(param0: any): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public addRawValue(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ArrayNode;
						public addObject(): com.fasterxml.jackson.databind.node.ObjectNode;
						public isMissingNode(): boolean;
						public fieldNames(): java.util.Iterator<string>;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.NumericNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
						public addNull(): com.fasterxml.jackson.databind.node.ArrayNode;
						public constructor(param0: com.fasterxml.jackson.databind.node.JsonNodeFactory, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export abstract class BaseJsonNode extends com.fasterxml.jackson.databind.JsonNode implements com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.BaseJsonNode>;
						public isArray(): boolean;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public hashCode(): number;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public size(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findPath(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public fieldNames(): java.util.Iterator<string>;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class BigIntegerNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.BigIntegerNode>;
						public _value: java.math.BigInteger;
						public isArray(): boolean;
						public decimalValue(): java.math.BigDecimal;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public isBigInteger(): boolean;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public doubleValue(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(): boolean;
						public size(): number;
						public longValue(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public static valueOf(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.BigIntegerNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public isIntegralNumber(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(param0: boolean): boolean;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public fieldNames(): java.util.Iterator<string>;
						public constructor(param0: java.math.BigInteger);
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class BinaryNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.BinaryNode>;
						public _data: native.Array<number>;
						public constructor(param0: native.Array<number>);
						public isArray(): boolean;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public binaryValue(): native.Array<number>;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public static valueOf(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public size(): number;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public static valueOf(param0: native.Array<number>): com.fasterxml.jackson.databind.node.BinaryNode;
						public toString(): string;
						public constructor(param0: native.Array<number>, param1: number, param2: number);
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public fieldNames(): java.util.Iterator<string>;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class BooleanNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.BooleanNode>;
						public static TRUE: com.fasterxml.jackson.databind.node.BooleanNode;
						public static FALSE: com.fasterxml.jackson.databind.node.BooleanNode;
						public asInt(param0: number): number;
						public isArray(): boolean;
						public asText(param0: string): string;
						public static getTrue(): com.fasterxml.jackson.databind.node.BooleanNode;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public static valueOf(param0: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public asText(): string;
						public asLong(param0: number): number;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public booleanValue(): boolean;
						public static getFalse(): com.fasterxml.jackson.databind.node.BooleanNode;
						public asInt(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(): boolean;
						public size(): number;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asDouble(param0: number): number;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(param0: boolean): boolean;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public asDouble(): number;
						public fieldNames(): java.util.Iterator<string>;
						public asLong(): number;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export abstract class ContainerNode<T>  extends com.fasterxml.jackson.databind.node.BaseJsonNode implements com.fasterxml.jackson.databind.node.JsonNodeCreator  {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ContainerNode<any>>;
						public _nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory;
						public binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public constructor(param0: com.fasterxml.jackson.databind.node.JsonNodeFactory);
						public asText(param0: string): string;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public nullNode(): com.fasterxml.jackson.databind.node.NullNode;
						public binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.ValueNode;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public isContainerNode(): boolean;
						public size(): number;
						public constructor();
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public removeAll(): any;
						public binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.BinaryNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.TextNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public isArray(): boolean;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public asText(): string;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public isValueNode(): boolean;
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.NumericNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.NumericNode;
						public isMissingNode(): boolean;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.NumericNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public fieldNames(): java.util.Iterator<string>;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class DecimalNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.DecimalNode>;
						public static ZERO: com.fasterxml.jackson.databind.node.DecimalNode;
						public _value: java.math.BigDecimal;
						public isArray(): boolean;
						public decimalValue(): java.math.BigDecimal;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public isFloatingPointNumber(): boolean;
						public canConvertToInt(): boolean;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public canConvertToLong(): boolean;
						public constructor(param0: java.math.BigDecimal);
						public shortValue(): number;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public static valueOf(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.DecimalNode;
						public doubleValue(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isBigDecimal(): boolean;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public size(): number;
						public longValue(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public fieldNames(): java.util.Iterator<string>;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class DoubleNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.DoubleNode>;
						public _value: number;
						public isArray(): boolean;
						public decimalValue(): java.math.BigDecimal;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public isFloatingPointNumber(): boolean;
						public canConvertToInt(): boolean;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public doubleValue(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public size(): number;
						public longValue(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public constructor(param0: number);
						public fieldNames(): java.util.Iterator<string>;
						public isObject(): boolean;
						public static valueOf(param0: number): com.fasterxml.jackson.databind.node.DoubleNode;
						public isDouble(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class FloatNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.FloatNode>;
						public _value: number;
						public isFloat(): boolean;
						public isArray(): boolean;
						public decimalValue(): java.math.BigDecimal;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public isFloatingPointNumber(): boolean;
						public canConvertToInt(): boolean;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public doubleValue(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public size(): number;
						public longValue(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public static valueOf(param0: number): com.fasterxml.jackson.databind.node.FloatNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public constructor(param0: number);
						public fieldNames(): java.util.Iterator<string>;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class IntNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.IntNode>;
						public _value: number;
						public isArray(): boolean;
						public decimalValue(): java.math.BigDecimal;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public static valueOf(param0: number): com.fasterxml.jackson.databind.node.IntNode;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public doubleValue(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public isInt(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(): boolean;
						public size(): number;
						public longValue(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public isIntegralNumber(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(param0: boolean): boolean;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public constructor(param0: number);
						public fieldNames(): java.util.Iterator<string>;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class JsonNodeCreator {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.JsonNodeCreator>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.node.JsonNodeCreator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
							nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
							textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
							binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.ValueNode;
							binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
							pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
							rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
							arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
							objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						});
						public constructor();
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class JsonNodeFactory extends com.fasterxml.jackson.databind.node.JsonNodeCreator {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.JsonNodeFactory>;
						public static instance: com.fasterxml.jackson.databind.node.JsonNodeFactory;
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.TextNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public nullNode(): com.fasterxml.jackson.databind.node.NullNode;
						public binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public constructor(param0: boolean);
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public _inIntRange(param0: number): boolean;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
						public constructor();
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public static withExactBigDecimals(param0: boolean): com.fasterxml.jackson.databind.node.JsonNodeFactory;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.NumericNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.NumericNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.NumericNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.BinaryNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class JsonNodeType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.JsonNodeType>;
						public static ARRAY: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static BINARY: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static BOOLEAN: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static MISSING: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static NULL: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static NUMBER: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static OBJECT: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static POJO: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static STRING: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static valueOf(param0: string): com.fasterxml.jackson.databind.node.JsonNodeType;
						public static values(): native.Array<com.fasterxml.jackson.databind.node.JsonNodeType>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class LongNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.LongNode>;
						public _value: number;
						public isArray(): boolean;
						public decimalValue(): java.math.BigDecimal;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public doubleValue(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(): boolean;
						public size(): number;
						public longValue(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public isIntegralNumber(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(param0: boolean): boolean;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public isLong(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public constructor(param0: number);
						public fieldNames(): java.util.Iterator<string>;
						public static valueOf(param0: number): com.fasterxml.jackson.databind.node.LongNode;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class MissingNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.MissingNode>;
						public isArray(): boolean;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public size(): number;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public toString(): string;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public fieldNames(): java.util.Iterator<string>;
						public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
						public static getInstance(): com.fasterxml.jackson.databind.node.MissingNode;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export abstract class NodeCursor extends com.fasterxml.jackson.core.JsonStreamContext {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NodeCursor>;
						public _parent: com.fasterxml.jackson.databind.node.NodeCursor;
						public _currentName: string;
						public _currentValue: any;
						public constructor();
						public iterateChildren(): com.fasterxml.jackson.databind.node.NodeCursor;
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public endToken(): com.fasterxml.jackson.core.JsonToken;
						public constructor(param0: number, param1: com.fasterxml.jackson.databind.node.NodeCursor);
						public overrideCurrentName(param0: string): void;
						public getParent(): com.fasterxml.jackson.core.JsonStreamContext;
						public getParent(): com.fasterxml.jackson.databind.node.NodeCursor;
						public getCurrentValue(): any;
						public currentHasChildren(): boolean;
						public currentNode(): com.fasterxml.jackson.databind.JsonNode;
						public nextValue(): com.fasterxml.jackson.core.JsonToken;
						public getCurrentName(): string;
						public setCurrentValue(param0: any): void;
					}
					export namespace NodeCursor {
						export class ArrayCursor extends com.fasterxml.jackson.databind.node.NodeCursor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NodeCursor.ArrayCursor>;
							public _contents: java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
							public _currentNode: com.fasterxml.jackson.databind.JsonNode;
							public constructor();
							public endToken(): com.fasterxml.jackson.core.JsonToken;
							public nextToken(): com.fasterxml.jackson.core.JsonToken;
							public currentHasChildren(): boolean;
							public nextValue(): com.fasterxml.jackson.core.JsonToken;
							public currentNode(): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: number, param1: com.fasterxml.jackson.databind.node.NodeCursor);
							public constructor(param0: com.fasterxml.jackson.databind.JsonNode, param1: com.fasterxml.jackson.databind.node.NodeCursor);
						}
						export class ObjectCursor extends com.fasterxml.jackson.databind.node.NodeCursor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NodeCursor.ObjectCursor>;
							public _contents: java.util.Iterator<java.util.Map.Entry<string,com.fasterxml.jackson.databind.JsonNode>>;
							public _current: java.util.Map.Entry<string,com.fasterxml.jackson.databind.JsonNode>;
							public _needEntry: boolean;
							public constructor();
							public endToken(): com.fasterxml.jackson.core.JsonToken;
							public nextToken(): com.fasterxml.jackson.core.JsonToken;
							public currentHasChildren(): boolean;
							public nextValue(): com.fasterxml.jackson.core.JsonToken;
							public currentNode(): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: number, param1: com.fasterxml.jackson.databind.node.NodeCursor);
							public constructor(param0: com.fasterxml.jackson.databind.JsonNode, param1: com.fasterxml.jackson.databind.node.NodeCursor);
						}
						export class RootCursor extends com.fasterxml.jackson.databind.node.NodeCursor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NodeCursor.RootCursor>;
							public _node: com.fasterxml.jackson.databind.JsonNode;
							public _done: boolean;
							public constructor();
							public endToken(): com.fasterxml.jackson.core.JsonToken;
							public nextToken(): com.fasterxml.jackson.core.JsonToken;
							public overrideCurrentName(param0: string): void;
							public currentHasChildren(): boolean;
							public nextValue(): com.fasterxml.jackson.core.JsonToken;
							public currentNode(): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: number, param1: com.fasterxml.jackson.databind.node.NodeCursor);
							public constructor(param0: com.fasterxml.jackson.databind.JsonNode, param1: com.fasterxml.jackson.databind.node.NodeCursor);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class NullNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NullNode>;
						public static instance: com.fasterxml.jackson.databind.node.NullNode;
						public isArray(): boolean;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public size(): number;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public static getInstance(): com.fasterxml.jackson.databind.node.NullNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public fieldNames(): java.util.Iterator<string>;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export abstract class NumericNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NumericNode>;
						public asInt(param0: number): number;
						public isArray(): boolean;
						public decimalValue(): java.math.BigDecimal;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public asLong(param0: number): number;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public canConvertToLong(): boolean;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public doubleValue(): number;
						public asInt(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public size(): number;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public longValue(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public constructor();
						public asDouble(param0: number): number;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public asDouble(): number;
						public fieldNames(): java.util.Iterator<string>;
						public asLong(): number;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class ObjectNode extends com.fasterxml.jackson.databind.node.ContainerNode<com.fasterxml.jackson.databind.node.ObjectNode> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ObjectNode>;
						public _children: java.util.Map<string,com.fasterxml.jackson.databind.JsonNode>;
						public putObject(param0: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public constructor(param0: com.fasterxml.jackson.databind.node.JsonNodeFactory);
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public nullNode(): com.fasterxml.jackson.databind.node.NullNode;
						public put(param0: string, param1: number): com.fasterxml.jackson.databind.node.ObjectNode;
						public isContainerNode(): boolean;
						public size(): number;
						public fields(): java.util.Iterator<java.util.Map.Entry<string,com.fasterxml.jackson.databind.JsonNode>>;
						public withArray(param0: string): com.fasterxml.jackson.databind.node.ArrayNode;
						public constructor();
						public without(param0: java.util.Collection<string>): com.fasterxml.jackson.databind.node.ObjectNode;
						public setAll(param0: com.fasterxml.jackson.databind.node.ObjectNode): com.fasterxml.jackson.databind.JsonNode;
						public withArray(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public putNull(param0: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public constructor(param0: com.fasterxml.jackson.databind.node.JsonNodeFactory, param1: java.util.Map<string,com.fasterxml.jackson.databind.JsonNode>);
						public with(param0: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public toString(): string;
						public findValues(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public findValuesAsText(param0: string): java.util.List<string>;
						public putAll(param0: java.util.Map<string,any>): com.fasterxml.jackson.databind.JsonNode;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public removeAll(): any;
						public binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.BinaryNode;
						public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider): boolean;
						public put(param0: string, param1: boolean): com.fasterxml.jackson.databind.node.ObjectNode;
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.TextNode;
						public without(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public remove(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public _at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public put(param0: string, param1: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public findParent(param0: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public putArray(param0: string): com.fasterxml.jackson.databind.node.ArrayNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public retain(param0: java.util.Collection<string>): com.fasterxml.jackson.databind.node.ObjectNode;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public with(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isValueNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public put(param0: string, param1: java.lang.Double): com.fasterxml.jackson.databind.node.ObjectNode;
						public put(param0: string, param1: java.lang.Long): com.fasterxml.jackson.databind.node.ObjectNode;
						public put(param0: string, param1: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.JsonNode;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public remove(param0: java.util.Collection<string>): com.fasterxml.jackson.databind.node.ObjectNode;
						public putAll(param0: com.fasterxml.jackson.databind.node.ObjectNode): com.fasterxml.jackson.databind.JsonNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public setAll(param0: java.util.Map<string,any>): com.fasterxml.jackson.databind.JsonNode;
						public put(param0: string, param1: java.lang.Float): com.fasterxml.jackson.databind.node.ObjectNode;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.NumericNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.NumericNode;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
						public isObject(): boolean;
						public removeAll(): com.fasterxml.jackson.databind.node.ObjectNode;
						public binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public deepCopy(): com.fasterxml.jackson.databind.node.ObjectNode;
						public elements(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public equals(param0: any): boolean;
						public findValuesAsText(param0: string, param1: java.util.List<string>): java.util.List<string>;
						public binaryNode(param0: native.Array<number>): com.fasterxml.jackson.databind.node.ValueNode;
						public put(param0: string, param1: java.lang.Short): com.fasterxml.jackson.databind.node.ObjectNode;
						public put(param0: string, param1: native.Array<number>): com.fasterxml.jackson.databind.node.ObjectNode;
						public findParents(param0: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public put(param0: string, param1: java.lang.Boolean): com.fasterxml.jackson.databind.node.ObjectNode;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public findValues(param0: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public _put(param0: string, param1: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ObjectNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public put(param0: string, param1: java.lang.Integer): com.fasterxml.jackson.databind.node.ObjectNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public findValue(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public _childrenEqual(param0: com.fasterxml.jackson.databind.node.ObjectNode): boolean;
						public replace(param0: string, param1: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.JsonNode;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public put(param0: string, param1: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ObjectNode;
						public set(param0: string, param1: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.JsonNode;
						public isArray(): boolean;
						public hashCode(): number;
						public binaryNode(param0: native.Array<number>, param1: number, param2: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public putRawValue(param0: string, param1: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ObjectNode;
						public findParent(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public putPOJO(param0: string, param1: any): com.fasterxml.jackson.databind.node.ObjectNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public findParents(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
						public retain(param0: native.Array<string>): com.fasterxml.jackson.databind.node.ObjectNode;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public isMissingNode(): boolean;
						public fieldNames(): java.util.Iterator<string>;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.NumericNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class POJONode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.POJONode>;
						public _value: any;
						public asInt(param0: number): number;
						public isArray(): boolean;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public constructor(param0: any);
						public asLong(param0: number): number;
						public binaryValue(): native.Array<number>;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public asInt(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(): boolean;
						public size(): number;
						public _pojoEquals(param0: com.fasterxml.jackson.databind.node.POJONode): boolean;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public getPojo(): any;
						public constructor();
						public asDouble(param0: number): number;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public toString(): string;
						public asBoolean(param0: boolean): boolean;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public asDouble(): number;
						public fieldNames(): java.util.Iterator<string>;
						public asLong(): number;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class ShortNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ShortNode>;
						public _value: number;
						public isArray(): boolean;
						public decimalValue(): java.math.BigDecimal;
						public asText(param0: string): string;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public doubleValue(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public isShort(): boolean;
						public asBoolean(): boolean;
						public size(): number;
						public longValue(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public isIntegralNumber(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(param0: boolean): boolean;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public constructor(param0: number);
						public fieldNames(): java.util.Iterator<string>;
						public isObject(): boolean;
						public static valueOf(param0: number): com.fasterxml.jackson.databind.node.ShortNode;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class TextNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.TextNode>;
						public _value: string;
						public asInt(param0: number): number;
						public asText(param0: string): string;
						public equals(param0: any): boolean;
						public asLong(param0: number): number;
						public binaryValue(): native.Array<number>;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public asInt(): number;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public equals(param0: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, param1: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isContainerNode(): boolean;
						public size(): number;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public constructor();
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public toString(): string;
						public static appendQuoted(param0: java.lang.StringBuilder, param1: string): void;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public asDouble(): number;
						public _reportInvalidBase64(param0: com.fasterxml.jackson.core.Base64Variant, param1: string, param2: number): void;
						public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public constructor(param0: string);
						public isArray(): boolean;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public _reportBase64EOF(): void;
						public hashCode(): number;
						public asText(): string;
						public _reportInvalidBase64(param0: com.fasterxml.jackson.core.Base64Variant, param1: string, param2: number, param3: string): void;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public textValue(): string;
						public static valueOf(param0: string): com.fasterxml.jackson.databind.node.TextNode;
						public isValueNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(): boolean;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asDouble(param0: number): number;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public asBoolean(param0: boolean): boolean;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public fieldNames(): java.util.Iterator<string>;
						public asLong(): number;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export class TreeTraversingParser extends com.fasterxml.jackson.core.base.ParserMinimalBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.TreeTraversingParser>;
						public _objectCodec: com.fasterxml.jackson.core.ObjectCodec;
						public _nodeCursor: com.fasterxml.jackson.databind.node.NodeCursor;
						public _nextToken: com.fasterxml.jackson.core.JsonToken;
						public _startContainer: boolean;
						public _closed: boolean;
						public getBigIntegerValue(): java.math.BigInteger;
						public getNumberValue(): java.lang.Number;
						public currentNumericNode(): com.fasterxml.jackson.databind.JsonNode;
						public close(): void;
						public getTextLength(): number;
						public overrideCurrentName(param0: string): void;
						public getText(): string;
						public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getBinaryValue(): native.Array<number>;
						public getTextOffset(): number;
						public getDoubleValue(): number;
						public isClosed(): boolean;
						public currentNode(): com.fasterxml.jackson.databind.JsonNode;
						public _handleEOF(): void;
						public getCurrentName(): string;
						public getEmbeddedObject(): any;
						public constructor();
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public version(): com.fasterxml.jackson.core.Version;
						public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): void;
						public hasTextCharacters(): boolean;
						public readBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.OutputStream): number;
						public getFloatValue(): number;
						public getIntValue(): number;
						public getNumberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public getLongValue(): number;
						public getTextCharacters(): native.Array<string>;
						public skipChildren(): com.fasterxml.jackson.core.JsonParser;
						public getParsingContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public readBinaryValue(param0: java.io.OutputStream): number;
						public constructor(param0: com.fasterxml.jackson.databind.JsonNode);
						public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
						public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
						public constructor(param0: number);
						public getDecimalValue(): java.math.BigDecimal;
						public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
						public constructor(param0: com.fasterxml.jackson.databind.JsonNode, param1: com.fasterxml.jackson.core.ObjectCodec);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace node {
					export abstract class ValueNode extends com.fasterxml.jackson.databind.node.BaseJsonNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ValueNode>;
						public isArray(): boolean;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public _at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public findValuesAsText(param0: string, param1: java.util.List<string>): java.util.List<string>;
						public findParent(param0: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public path(param0: number): com.fasterxml.jackson.core.TreeNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public findParent(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public get(param0: number): com.fasterxml.jackson.core.TreeNode;
						public at(param0: string): com.fasterxml.jackson.core.TreeNode;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public findParents(param0: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public has(param0: number): boolean;
						public findParents(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public path(param0: string): com.fasterxml.jackson.core.TreeNode;
						public isValueNode(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public findValues(param0: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public isContainerNode(): boolean;
						public size(): number;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public constructor();
						public hasNonNull(param0: string): boolean;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.core.TreeNode;
						public traverse(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public at(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public has(param0: string): boolean;
						public toString(): string;
						public findValues(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isMissingNode(): boolean;
						public findValuesAsText(param0: string): java.util.List<string>;
						public get(param0: string): com.fasterxml.jackson.core.TreeNode;
						public fieldNames(): java.util.Iterator<string>;
						public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
						public hasNonNull(param0: number): boolean;
						public findValue(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public isObject(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class AnyGetterWriter {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.AnyGetterWriter>;
						public _property: com.fasterxml.jackson.databind.BeanProperty;
						public _accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _mapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer;
						public getAndFilter(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyFilter): void;
						public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JsonSerializer<any>);
						public getAndSerialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export abstract class BasicSerializerFactory extends com.fasterxml.jackson.databind.ser.SerializerFactory {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BasicSerializerFactory>;
						public static _concrete: java.util.HashMap<string,com.fasterxml.jackson.databind.JsonSerializer<any>>;
						public static _concreteLazy: java.util.HashMap<string,java.lang.Class<any>>;
						public _factoryConfig: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public buildIterableSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildMapSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean, param4: com.fasterxml.jackson.databind.JsonSerializer<any>, param5: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param6: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildEnumSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildIteratorSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildMapEntrySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean, param4: com.fasterxml.jackson.databind.JavaType, param5: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public findSerializerByAnnotations(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public isIndexedList(param0: java.lang.Class<any>): boolean;
						public buildIteratorSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean, param4: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withAdditionalSerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public findFilterId(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription): any;
						public _verifyAsClass(param0: any, param1: string, param2: java.lang.Class<any>): java.lang.Class<any>;
						public _findKeySerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializerByPrimaryType(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findOptionalStdSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildIndexedListSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
						public buildCollectionSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
						public findSerializerFromAnnotation(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findConverter(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public constructor();
						public findConvertingSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public createTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public buildEnumSetSerializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public customSerializers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>;
						public buildCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSuppressableContentValue(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): any;
						public usesStaticTyping(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): boolean;
						public findSerializerByLookup(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializerByAddonType(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig);
						public withAdditionalKeySerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public buildIterableSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean, param4: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public getFactoryConfig(): com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public createSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildArraySerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public createKeySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildContainerSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _findContentSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig): com.fasterxml.jackson.databind.ser.SerializerFactory;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class BeanPropertyFilter {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanPropertyFilter>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.BeanPropertyFilter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
							depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class BeanPropertyWriter extends com.fasterxml.jackson.databind.ser.PropertyWriter {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public static MARKER_FOR_EMPTY: any;
						public _name: com.fasterxml.jackson.core.io.SerializedString;
						public _wrapperName: com.fasterxml.jackson.databind.PropertyName;
						public _declaredType: com.fasterxml.jackson.databind.JavaType;
						public _cfgSerializationType: com.fasterxml.jackson.databind.JavaType;
						public _nonTrivialBaseType: com.fasterxml.jackson.databind.JavaType;
						public _contextAnnotations: com.fasterxml.jackson.databind.util.Annotations;
						public _member: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _accessorMethod: java.lang.reflect.Method;
						public _field: java.lang.reflect.Field;
						public _serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _nullSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _typeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
						public _suppressNulls: boolean;
						public _suppressableValue: any;
						public _includeInViews: native.Array<java.lang.Class<any>>;
						public _internalSettings: java.util.HashMap<any,any>;
						public isRequired(): boolean;
						public willSuppressNulls(): boolean;
						public getTypeSerializer(): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public getSerializedName(): com.fasterxml.jackson.core.SerializableString;
						public rename(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.core.io.SerializedString);
						public getGenericPropertyType(): java.lang.reflect.Type;
						public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getSerializationType(): com.fasterxml.jackson.databind.JavaType;
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public setInternalSetting(param0: any, param1: any): any;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public constructor();
						public getInternalSetting(param0: any): any;
						public isUnwrapping(): boolean;
						public assignNullSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public toString(): string;
						public wouldConflictWithName(param0: com.fasterxml.jackson.databind.PropertyName): boolean;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.JavaType, param4: com.fasterxml.jackson.databind.JsonSerializer<any>, param5: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param6: com.fasterxml.jackson.databind.JavaType, param7: boolean, param8: any);
						public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
						public removeInternalSetting(param0: any): any;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public unwrappingWriter(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public serializeAsOmittedField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getRawSerializationType(): java.lang.Class<any>;
						public setNonTrivialBaseType(param0: com.fasterxml.jackson.databind.JavaType): void;
						public serializeAsPlaceholder(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getPropertyType(): java.lang.Class<any>;
						public _new(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public getSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public assignTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public hasSerializer(): boolean;
						public _handleSelfReference(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.PropertyName);
						public constructor(param0: com.fasterxml.jackson.databind.ser.PropertyWriter);
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public hasNullSerializer(): boolean;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public get(param0: any): any;
						public isVirtual(): boolean;
						public assignSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public _depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.JsonNode): void;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
						public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
						public getViews(): native.Array<java.lang.Class<any>>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class BeanSerializer extends com.fasterxml.jackson.databind.ser.std.BeanSerializerBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanSerializer>;
						public withFilterId(param0: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public static createDummy(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.BeanSerializer;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, param2: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>, param3: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>);
						public unwrappingSerializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
						public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						public withIgnorals(param0: native.Array<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>, param2: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>);
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor(param0: java.lang.Class<any>);
						public withFilterId(param0: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor();
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase);
						public toString(): string;
						public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: native.Array<string>);
						public constructor(param0: java.lang.Class<any>, param1: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
						public asArraySerializer(): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public withObjectIdWriter(param0: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, param2: any);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class BeanSerializerBuilder {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder>;
						public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
						public _config: com.fasterxml.jackson.databind.SerializationConfig;
						public _properties: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public _filteredProperties: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public _anyGetter: com.fasterxml.jackson.databind.ser.AnyGetterWriter;
						public _filterId: any;
						public _typeId: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
						public getClassInfo(): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public setFilterId(param0: any): void;
						public getAnyGetter(): com.fasterxml.jackson.databind.ser.AnyGetterWriter;
						public setTypeId(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): void;
						public createDummy(): com.fasterxml.jackson.databind.ser.BeanSerializer;
						public build(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public getTypeId(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public getProperties(): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public getBeanDescription(): com.fasterxml.jackson.databind.BeanDescription;
						public setObjectIdWriter(param0: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): void;
						public setConfig(param0: com.fasterxml.jackson.databind.SerializationConfig): void;
						public setAnyGetter(param0: com.fasterxml.jackson.databind.ser.AnyGetterWriter): void;
						public getFilteredProperties(): native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public constructor(param0: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder);
						public setProperties(param0: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): void;
						public getObjectIdWriter(): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
						public constructor(param0: com.fasterxml.jackson.databind.BeanDescription);
						public setFilteredProperties(param0: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): void;
						public getFilterId(): any;
						public hasProperties(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class BeanSerializerFactory extends com.fasterxml.jackson.databind.ser.BasicSerializerFactory {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanSerializerFactory>;
						public static instance: com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
						public constructor();
						public processViews(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder): void;
						public removeSetterlessGetters(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>): void;
						public findPropertyTypeSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public customSerializers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>;
						public constructBeanSerializerBuilder(param0: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
						public removeOverlappingTypeIds(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, param3: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public constructor(param0: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig);
						public findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findPropertyContentTypeSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public constructFilteredBeanWriter(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public constructBeanSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructObjectIdHandler(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanDescription, param2: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
						public _createSerializer2(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public isPotentialBeanType(param0: java.lang.Class<any>): boolean;
						public createSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _constructWriter(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param2: com.fasterxml.jackson.databind.ser.PropertyBuilder, param3: boolean, param4: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public removeIgnorableTypes(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>): void;
						public findBeanProperties(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public findBeanSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructPropertyBuilder(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.ser.PropertyBuilder;
						public filterBeanProperties(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig): com.fasterxml.jackson.databind.ser.SerializerFactory;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export abstract class BeanSerializerModifier {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanSerializerModifier>;
						public modifyCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor();
						public orderProperties(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public modifyKeySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public changeProperties(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public updateBuilder(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder): com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
						public modifyMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public modifyCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public modifyMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public modifyEnumSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public modifySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public modifyArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export abstract class ContainerSerializer<T>  extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.ContainerSerializer<any>>;
						public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
						public constructor();
						public hasSingleElement(param0: any): boolean;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public hasContentTypeAnnotation(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public constructor(param0: java.lang.Class<any>, param1: boolean);
						public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor(param0: java.lang.Class<any>);
						public isEmpty(param0: any): boolean;
						public withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
						public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class ContextualSerializer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.ContextualSerializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.ContextualSerializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
						});
						public constructor();
						public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export abstract class DefaultSerializerProvider extends com.fasterxml.jackson.databind.SerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider>;
						public _seenObjectIds: java.util.Map<any,com.fasterxml.jackson.databind.ser.impl.WritableObjectId>;
						public _objectIdGenerators: java.util.ArrayList<com.fasterxml.jackson.annotation.ObjectIdGenerator<any>>;
						public _createObjectIdMap(): java.util.Map<any,com.fasterxml.jackson.databind.ser.impl.WritableObjectId>;
						public constructor();
						public serializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public hasSerializerFor(param0: java.lang.Class<any>, param1: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
						public createInstance(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.ser.SerializerFactory): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
						public cachedSerializersCount(): number;
						public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider);
						public serializeValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any): void;
						public serializeValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public serializePolymorphic(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
						public constructor(param0: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider);
						public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.databind.ser.SerializerFactory);
						public copy(): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
						public serializeValue(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any, param2: com.fasterxml.jackson.databind.JavaType): void;
						public generateJsonSchema(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.jsonschema.JsonSchema;
						public serializePolymorphic(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public flushCachedSerializers(): void;
						public _serializeNull(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
					}
					export namespace DefaultSerializerProvider {
						export class Impl extends com.fasterxml.jackson.databind.ser.DefaultSerializerProvider {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl>;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider);
							public constructor(param0: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider);
							public copy(): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
							public createInstance(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.ser.SerializerFactory): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
							public constructor(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.databind.ser.SerializerFactory);
							public createInstance(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.ser.SerializerFactory): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl;
							public constructor(param0: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export abstract class FilterProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.FilterProvider>;
						public constructor();
						public findFilter(param0: any): com.fasterxml.jackson.databind.ser.BeanPropertyFilter;
						public findPropertyFilter(param0: any, param1: any): com.fasterxml.jackson.databind.ser.PropertyFilter;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class PropertyBuilder {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.PropertyBuilder>;
						public _config: com.fasterxml.jackson.databind.SerializationConfig;
						public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
						public _defaultInclusion: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _defaultBean: any;
						public getDefaultBean(): any;
						public getClassAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
						public findSerializationType(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: boolean, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription);
						public _throwWrapped(param0: java.lang.Exception, param1: string, param2: any): any;
						public getDefaultValue(param0: com.fasterxml.jackson.databind.JavaType): any;
						public buildWriter(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param6: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param7: boolean): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public getPropertyDefaultValue(param0: string, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.JavaType): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class PropertyFilter {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.PropertyFilter>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.PropertyFilter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export abstract class PropertyWriter extends com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.PropertyWriter>;
						public serializeAsOmittedField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public isRequired(): boolean;
						public serializeAsPlaceholder(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public constructor(param0: com.fasterxml.jackson.databind.ser.PropertyWriter);
						public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
						public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class ResolvableSerializer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.ResolvableSerializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.ResolvableSerializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class SerializerCache {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.SerializerCache>;
						public addAndResolveNonTypedSerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor();
						public untypedValueSerializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public addAndResolveNonTypedSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public addTypedSerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public flush(): void;
						public untypedValueSerializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public typedValueSerializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public getReadOnlyLookupMap(): com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
						public addAndResolveNonTypedSerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public addTypedSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public typedValueSerializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public size(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export abstract class SerializerFactory {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.SerializerFactory>;
						public constructor();
						public withAdditionalKeySerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public createTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public withSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public createSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withAdditionalSerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public createKeySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export class Serializers {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.Serializers>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.Serializers interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						});
						public constructor();
						public findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
					export namespace Serializers {
						export class Base extends com.fasterxml.jackson.databind.ser.Serializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.Serializers.Base>;
							public constructor();
							public findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export abstract class VirtualBeanPropertyWriter extends com.fasterxml.jackson.databind.ser.BeanPropertyWriter {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter>;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public isRequired(): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.util.Annotations, param2: com.fasterxml.jackson.databind.JavaType);
						public static _suppressableValue(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): any;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.util.Annotations, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JavaType, param6: com.fasterxml.jackson.annotation.JsonInclude.Value);
						public constructor(param0: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter, param1: com.fasterxml.jackson.databind.PropertyName);
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.core.io.SerializedString);
						public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.PropertyName);
						public constructor(param0: com.fasterxml.jackson.databind.ser.PropertyWriter);
						public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param3: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
						public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static _suppressNulls(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): boolean;
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public constructor();
						public constructor(param0: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter);
						public isVirtual(): boolean;
						public value(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): any;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.JavaType, param4: com.fasterxml.jackson.databind.JsonSerializer<any>, param5: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param6: com.fasterxml.jackson.databind.JavaType, param7: boolean, param8: any);
						public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
						public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
						public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class AttributePropertyWriter extends com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter>;
							public _attrName: string;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.util.Annotations, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JavaType, param6: com.fasterxml.jackson.annotation.JsonInclude.Value);
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.JavaType);
							public isVirtual(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.JavaType, param4: com.fasterxml.jackson.databind.JsonSerializer<any>, param5: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param6: com.fasterxml.jackson.databind.JavaType, param7: boolean, param8: any);
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.core.io.SerializedString);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public withConfig(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param3: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(param0: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter, param1: com.fasterxml.jackson.databind.PropertyName);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.util.Annotations, param2: com.fasterxml.jackson.databind.JavaType);
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
							public static construct(param0: string, param1: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter;
							public isRequired(): boolean;
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter);
							public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.PropertyName);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public value(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): any;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter);
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.ser.PropertyWriter);
							public constructor(param0: string, param1: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.JavaType, param4: com.fasterxml.jackson.annotation.JsonInclude.Value);
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class BeanAsArraySerializer extends com.fasterxml.jackson.databind.ser.std.BeanSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer>;
							public _defaultSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
							public withFilterId(param0: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withFilterId(param0: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public toString(): string;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>, param2: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, param2: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>, param3: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: native.Array<string>);
							public isUnwrappingSerializer(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, param2: any);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withIgnorals(param0: native.Array<string>): com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer;
							public asArraySerializer(): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public unwrappingSerializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public withIgnorals(param0: native.Array<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public withObjectIdWriter(param0: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public serializeAsArray(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class FailingSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.FailingSerializer>;
							public _msg: string;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: string);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export abstract class FilteredBeanPropertyWriter {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter>;
							public constructor();
							public static constructViewBased(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						}
						export namespace FilteredBeanPropertyWriter {
							export class MultiView extends com.fasterxml.jackson.databind.ser.BeanPropertyWriter {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter.MultiView>;
								public _delegate: com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
								public _views: native.Array<java.lang.Class<any>>;
								public isRequired(): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.core.io.SerializedString);
								public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
								public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
								public getType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: native.Array<java.lang.Class<any>>);
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public rename(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter.MultiView;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public assignNullSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
								public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.JavaType, param4: com.fasterxml.jackson.databind.JsonSerializer<any>, param5: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param6: com.fasterxml.jackson.databind.JavaType, param7: boolean, param8: any);
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
								public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
								public assignSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
								public isVirtual(): boolean;
								public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
								public getName(): string;
								public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
								public getFullName(): com.fasterxml.jackson.databind.PropertyName;
								public constructor();
								public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
								public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
								public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
								public rename(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
								public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
								public constructor(param0: com.fasterxml.jackson.databind.ser.PropertyWriter);
								public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.PropertyName);
								public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
								public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
								public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							}
							export class SingleView extends com.fasterxml.jackson.databind.ser.BeanPropertyWriter {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter.SingleView>;
								public _delegate: com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
								public _view: java.lang.Class<any>;
								public isRequired(): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.core.io.SerializedString);
								public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
								public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
								public getType(): com.fasterxml.jackson.databind.JavaType;
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: java.lang.Class<any>);
								public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public assignNullSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
								public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.JavaType, param4: com.fasterxml.jackson.databind.JsonSerializer<any>, param5: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param6: com.fasterxml.jackson.databind.JavaType, param7: boolean, param8: any);
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
								public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
								public assignSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
								public isVirtual(): boolean;
								public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
								public getName(): string;
								public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
								public getFullName(): com.fasterxml.jackson.databind.PropertyName;
								public constructor();
								public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
								public rename(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter.SingleView;
								public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
								public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
								public rename(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
								public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
								public constructor(param0: com.fasterxml.jackson.databind.ser.PropertyWriter);
								public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.PropertyName);
								public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
								public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
								public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class IndexedListSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.util.List<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer>;
							public serialize(param0: java.util.List<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(param0: any): boolean;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public serializeTypedContents(param0: java.util.List<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer;
							public serializeContents(param0: java.util.List<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.util.List<any>): boolean;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.BeanProperty, param5: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public serializeContentsUsing(param0: java.util.List<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public hasSingleElement(param0: any): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public hasSingleElement(param0: java.util.List<any>): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class IndexedStringListSerializer extends com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<java.util.List<string>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer;
							public constructor();
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: java.lang.Class<any>);
							public contentSchema(): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(param0: java.util.List<string>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: java.lang.Boolean);
							public serialize(param0: java.util.List<string>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: java.lang.Boolean);
							public acceptContentVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class IteratorSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.util.Iterator<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer);
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.impl.IteratorSerializer;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(param0: any): boolean;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.IteratorSerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.BeanProperty, param5: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: java.util.Iterator<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeContents(param0: java.util.Iterator<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.util.Iterator<any>): boolean;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public hasSingleElement(param0: any): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public hasSingleElement(param0: java.util.Iterator<any>): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class MapEntrySerializer extends com.fasterxml.jackson.databind.ser.ContainerSerializer<java.util.Map.Entry<any,any>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer>;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _valueTypeIsStatic: boolean;
							public _entryType: com.fasterxml.jackson.databind.JavaType;
							public _keyType: com.fasterxml.jackson.databind.JavaType;
							public _valueType: com.fasterxml.jackson.databind.JavaType;
							public _keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _dynamicValueSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public hasSingleElement(param0: java.util.Map.Entry<any,any>): boolean;
							public isEmpty(param0: any): boolean;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.util.Map.Entry<any,any>): boolean;
							public constructor(param0: java.lang.Class<any>);
							public serialize(param0: java.util.Map.Entry<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeDynamic(param0: java.util.Map.Entry<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeUsing(param0: java.util.Map.Entry<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public hasSingleElement(param0: any): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType, param3: boolean, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.BeanProperty);
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public serializeWithType(param0: java.util.Map.Entry<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class ObjectIdWriter {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter>;
							public idType: com.fasterxml.jackson.databind.JavaType;
							public propertyName: com.fasterxml.jackson.core.SerializableString;
							public generator: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public alwaysAsId: boolean;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.core.SerializableString, param2: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: boolean);
							public withAlwaysAsId(param0: boolean): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
							public static construct(param0: com.fasterxml.jackson.databind.JavaType, param1: string, param2: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param3: boolean): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
							public static construct(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.PropertyName, param2: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param3: boolean): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
							public withSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class PropertyBasedObjectIdGenerator extends com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator>;
							public _property: com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public generateId(param0: any): any;
							public key(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
							public forScope(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public newForSerialization(param0: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
							public canUseFor(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ObjectIdInfo, param1: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export abstract class PropertySerializerMap {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap>;
							public _resetWhenFull: boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
							public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public findAndAddKeySerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public addSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public static emptyForRootValues(): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public findAndAddSecondarySerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public findAndAddPrimarySerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public static emptyMap(): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public findAndAddSecondarySerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public findAndAddRootValueSerializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public findAndAddRootValueSerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public constructor(param0: boolean);
							public static emptyForProperties(): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public findAndAddPrimarySerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public addSerializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
						export namespace PropertySerializerMap {
							export class Double extends com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Double>;
								public constructor(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
								public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Class<any>, param4: com.fasterxml.jackson.databind.JsonSerializer<any>);
								public constructor(param0: boolean);
							}
							export class Empty extends com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Empty>;
								public static FOR_PROPERTIES: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Empty;
								public static FOR_ROOT_VALUES: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Empty;
								public constructor(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
								public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(param0: boolean);
							}
							export class Multi extends com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Multi>;
								public constructor(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: native.Array<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.TypeAndSerializer>);
								public constructor(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
								public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(param0: boolean);
							}
							export class SerializerAndMapResult {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult>;
								public serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
								public map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(param0: com.fasterxml.jackson.databind.JsonSerializer<any>, param1: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
							}
							export class Single extends com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Single>;
								public constructor(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
								public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.JsonSerializer<any>);
								public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(param0: boolean);
							}
							export class TypeAndSerializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.TypeAndSerializer>;
								public type: java.lang.Class<any>;
								public serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class ReadOnlyClassToSerializerMap {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap>;
							public static from(param0: java.util.HashMap<com.fasterxml.jackson.databind.util.TypeKey,com.fasterxml.jackson.databind.JsonSerializer<any>>): com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
							public untypedValueSerializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public size(): number;
							public typedValueSerializer(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public untypedValueSerializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public typedValueSerializer(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: java.util.Map<com.fasterxml.jackson.databind.util.TypeKey,com.fasterxml.jackson.databind.JsonSerializer<any>>);
						}
						export namespace ReadOnlyClassToSerializerMap {
							export class Bucket {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap.Bucket>;
								public value: com.fasterxml.jackson.databind.JsonSerializer<any>;
								public next: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap.Bucket;
								public _class: java.lang.Class<any>;
								public _type: com.fasterxml.jackson.databind.JavaType;
								public _isTyped: boolean;
								public matchesUntyped(param0: com.fasterxml.jackson.databind.JavaType): boolean;
								public matchesTyped(param0: java.lang.Class<any>): boolean;
								public matchesUntyped(param0: java.lang.Class<any>): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap.Bucket, param1: com.fasterxml.jackson.databind.util.TypeKey, param2: com.fasterxml.jackson.databind.JsonSerializer<any>);
								public matchesTyped(param0: com.fasterxml.jackson.databind.JavaType): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class SimpleBeanPropertyFilter implements com.fasterxml.jackson.databind.ser.BeanPropertyFilter, com.fasterxml.jackson.databind.ser.PropertyFilter {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter>;
							public constructor();
							public includeElement(param0: any): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public static serializeAll(): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public include(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public static filterOutAllExcept(param0: java.util.Set<string>): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public static serializeAllExcept(param0: native.Array<string>): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public static filterOutAllExcept(param0: native.Array<string>): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public static serializeAll(param0: java.util.Set<string>): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public static serializeAllExcept(param0: java.util.Set<string>): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public static from(param0: com.fasterxml.jackson.databind.ser.BeanPropertyFilter): com.fasterxml.jackson.databind.ser.PropertyFilter;
							public include(param0: com.fasterxml.jackson.databind.ser.PropertyWriter): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
							public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
						}
						export namespace SimpleBeanPropertyFilter {
							export class FilterExceptFilter extends com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.FilterExceptFilter>;
								public _propertiesToInclude: java.util.Set<string>;
								public constructor(param0: java.util.Set<string>);
								public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public include(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): boolean;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public include(param0: com.fasterxml.jackson.databind.ser.PropertyWriter): boolean;
								public constructor();
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							}
							export class SerializeExceptFilter extends com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.SerializeExceptFilter>;
								public _propertiesToExclude: java.util.Set<string>;
								public constructor(param0: java.util.Set<string>);
								public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public include(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): boolean;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public include(param0: com.fasterxml.jackson.databind.ser.PropertyWriter): boolean;
								public constructor();
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class SimpleFilterProvider extends com.fasterxml.jackson.databind.ser.FilterProvider {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider>;
							public _filtersById: java.util.Map<string,com.fasterxml.jackson.databind.ser.PropertyFilter>;
							public _defaultFilter: com.fasterxml.jackson.databind.ser.PropertyFilter;
							public _cfgFailOnUnknownId: boolean;
							public constructor();
							public findFilter(param0: any): com.fasterxml.jackson.databind.ser.BeanPropertyFilter;
							public setFailOnUnknownId(param0: boolean): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public addFilter(param0: string, param1: com.fasterxml.jackson.databind.ser.BeanPropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public addFilter(param0: string, param1: com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public getDefaultFilter(): com.fasterxml.jackson.databind.ser.PropertyFilter;
							public findPropertyFilter(param0: any, param1: any): com.fasterxml.jackson.databind.ser.PropertyFilter;
							public setDefaultFilter(param0: com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public willFailOnUnknownId(): boolean;
							public constructor(param0: java.util.Map<string,any>);
							public setDefaultFilter(param0: com.fasterxml.jackson.databind.ser.BeanPropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public setDefaultFilter(param0: com.fasterxml.jackson.databind.ser.PropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public addFilter(param0: string, param1: com.fasterxml.jackson.databind.ser.PropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public removeFilter(param0: string): com.fasterxml.jackson.databind.ser.PropertyFilter;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class StringArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<native.Array<string>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.impl.StringArraySerializer;
							public _elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public hasSingleElement(param0: native.Array<string>): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
							public isEmpty(param0: any): boolean;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public serializeContents(param0: native.Array<string>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<string>): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.StringArraySerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: native.Array<string>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public hasSingleElement(param0: any): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class StringCollectionSerializer extends com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<java.util.Collection<string>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer;
							public constructor();
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serialize(param0: java.util.Collection<string>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: java.util.Collection<string>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(param0: java.lang.Class<any>);
							public contentSchema(): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: java.lang.Boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: java.lang.Boolean);
							public acceptContentVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class TypeWrappedSerializer extends com.fasterxml.jackson.databind.JsonSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer>;
							public _typeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public handledType(): java.lang.Class<any>;
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param1: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public typeSerializer(): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public valueSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class UnknownSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.UnknownSerializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public failForEmpty(param0: com.fasterxml.jackson.core.JsonGenerator, param1: any): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class UnwrappingBeanPropertyWriter extends com.fasterxml.jackson.databind.ser.BeanPropertyWriter {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter>;
							public _nameTransformer: com.fasterxml.jackson.databind.util.NameTransformer;
							public isVirtual(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.util.Annotations, param3: com.fasterxml.jackson.databind.JavaType, param4: com.fasterxml.jackson.databind.JsonSerializer<any>, param5: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param6: com.fasterxml.jackson.databind.JavaType, param7: boolean, param8: any);
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.core.io.SerializedString);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.util.NameTransformer);
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public assignSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public _new(param0: com.fasterxml.jackson.databind.util.NameTransformer, param1: com.fasterxml.jackson.core.io.SerializedString): com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.JsonNode): void;
							public constructor();
							public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
							public _new(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isRequired(): boolean;
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public rename(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;
							public constructor(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.PropertyName);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public rename(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.ser.PropertyWriter);
							public isUnwrapping(): boolean;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter, param1: com.fasterxml.jackson.databind.util.NameTransformer, param2: com.fasterxml.jackson.core.io.SerializedString);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class UnwrappingBeanSerializer extends com.fasterxml.jackson.databind.ser.std.BeanSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer>;
							public _nameTransformer: com.fasterxml.jackson.databind.util.NameTransformer;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
							public withFilterId(param0: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withFilterId(param0: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public toString(): string;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>, param2: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>);
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, param2: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>, param3: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: native.Array<string>);
							public isUnwrappingSerializer(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, param2: any);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public asArraySerializer(): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public unwrappingSerializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer, param1: native.Array<string>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public withIgnorals(param0: native.Array<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public withObjectIdWriter(param0: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, param2: any);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace impl {
						export class WritableObjectId {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.WritableObjectId>;
							public generator: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public id: any;
							public idWritten: boolean;
							public constructor(param0: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>);
							public generateId(param0: any): any;
							public writeAsId(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): boolean;
							public writeAsField(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export abstract class ArraySerializerBase<T>  extends com.fasterxml.jackson.databind.ser.ContainerSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>>;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _unwrapSingle: java.lang.Boolean;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export abstract class AsArraySerializerBase<T>  extends com.fasterxml.jackson.databind.ser.ContainerSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>>;
							public _elementType: com.fasterxml.jackson.databind.JavaType;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _staticTyping: boolean;
							public _unwrapSingle: java.lang.Boolean;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.BeanProperty, param5: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class AtomicReferenceSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<java.util.concurrent.atomic.AtomicReference<any>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer>;
							public _referredType: com.fasterxml.jackson.databind.JavaType;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _unwrapper: com.fasterxml.jackson.databind.util.NameTransformer;
							public _contentInclusion: com.fasterxml.jackson.annotation.JsonInclude.Include;
							public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: boolean, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.util.NameTransformer, param5: com.fasterxml.jackson.annotation.JsonInclude.Include);
							public serialize(param0: java.util.concurrent.atomic.AtomicReference<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public _useStatic(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JavaType): boolean;
							public isUnwrappingSerializer(): boolean;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public unwrappingSerializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<java.util.concurrent.atomic.AtomicReference<any>>;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: com.fasterxml.jackson.databind.util.NameTransformer, param4: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;
							public unwrappingSerializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.util.concurrent.atomic.AtomicReference<any>): boolean;
							public serializeWithType(param0: java.util.concurrent.atomic.AtomicReference<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export abstract class BeanSerializerBase extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase>;
							public static NAME_FOR_OBJECT_REF: com.fasterxml.jackson.databind.PropertyName;
							public static NO_PROPS: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
							public _props: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
							public _filteredProps: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
							public _anyGetterWriter: com.fasterxml.jackson.databind.ser.AnyGetterWriter;
							public _propertyFilterId: any;
							public _typeId: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public _objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
							public _serializationShape: com.fasterxml.jackson.annotation.JsonFormat.Shape;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
							public withFilterId(param0: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _serializeObjectId(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.ser.impl.WritableObjectId): void;
							public withFilterId(param0: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public serializeFieldsFiltered(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>, param2: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, param2: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>, param3: native.Array<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: native.Array<string>);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, param2: any);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeFields(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public asArraySerializer(): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public _customTypeId(param0: any): string;
							public constructor();
							public findConvertingSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: java.lang.Class<any>);
							public _serializeWithObjectId(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: boolean): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public _serializeWithObjectId(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public withIgnorals(param0: native.Array<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public properties(): java.util.Iterator<com.fasterxml.jackson.databind.ser.PropertyWriter>;
							public withObjectIdWriter(param0: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, param1: com.fasterxml.jackson.databind.util.NameTransformer);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public usesObjectId(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class BooleanSerializer extends com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase<java.lang.Boolean> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.BooleanSerializer>;
							public _forPrimitive: boolean;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: java.lang.Boolean, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: boolean);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class ByteArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<native.Array<number>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ByteArraySerializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public serialize(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<number>): boolean;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public serializeWithType(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class ByteBufferSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.nio.ByteBuffer> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public serialize(param0: java.nio.ByteBuffer, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class CalendarSerializer extends com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<java.util.Calendar> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.CalendarSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public serialize(param0: java.util.Calendar, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>;
							public constructor(param0: java.lang.Boolean, param1: java.text.DateFormat);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: java.lang.Boolean, param2: java.text.DateFormat);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public _timestamp(param0: any): number;
							public _timestamp(param0: java.util.Calendar): number;
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class ClassSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.lang.Class<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ClassSerializer>;
							public constructor();
							public serialize(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class CollectionSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.util.Collection<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.CollectionSerializer>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.BeanProperty, param4: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(param0: any): boolean;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeContents(param0: java.util.Collection<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.CollectionSerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public hasSingleElement(param0: java.util.Collection<any>): boolean;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.BeanProperty, param5: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.util.Collection<any>): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public serializeContentsUsing(param0: java.util.Collection<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public hasSingleElement(param0: any): boolean;
							public serialize(param0: java.util.Collection<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.CollectionSerializer;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class DateSerializer extends com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<java.util.Date> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.DateSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.DateSerializer;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public serialize(param0: java.util.Date, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>;
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateSerializer;
							public constructor(param0: java.lang.Boolean, param1: java.text.DateFormat);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public _timestamp(param0: java.util.Date): number;
							public constructor(param0: java.lang.Class<any>, param1: java.lang.Boolean, param2: java.text.DateFormat);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public _timestamp(param0: any): number;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export abstract class DateTimeSerializerBase<T>  extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>>;
							public _useTimestamp: java.lang.Boolean;
							public _customFormat: java.text.DateFormat;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public _acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: java.lang.Boolean, param2: java.text.DateFormat);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _asTimestamp(param0: com.fasterxml.jackson.databind.SerializerProvider): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public _timestamp(param0: any): number;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class EnumSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.lang.Enum<any>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.EnumSerializer>;
							public _values: com.fasterxml.jackson.databind.util.EnumValues;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.util.EnumValues, param1: java.lang.Boolean);
							public serialize(param0: java.lang.Enum<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.SerializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.annotation.JsonFormat.Value): com.fasterxml.jackson.databind.ser.std.EnumSerializer;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getEnumValues(): com.fasterxml.jackson.databind.util.EnumValues;
							public constructor(param0: com.fasterxml.jackson.databind.util.EnumValues);
							public _serializeAsIndex(param0: com.fasterxml.jackson.databind.SerializerProvider): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public static _isShapeWrittenUsingIndex(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.annotation.JsonFormat.Value, param2: boolean): java.lang.Boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class EnumSetSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.util.EnumSet<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.EnumSetSerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(param0: any): boolean;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.std.EnumSetSerializer;
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.BeanProperty, param5: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.util.EnumSet<any>): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serialize(param0: java.util.EnumSet<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeContents(param0: java.util.EnumSet<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.EnumSetSerializer;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.BeanProperty);
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public hasSingleElement(param0: any): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public hasSingleElement(param0: java.util.EnumSet<any>): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class FileSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.io.File> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.FileSerializer>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serialize(param0: java.io.File, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class InetAddressSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.net.InetAddress> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: java.net.InetAddress, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: java.net.InetAddress, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class InetSocketAddressSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.net.InetSocketAddress> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer>;
							public constructor();
							public serializeWithType(param0: java.net.InetSocketAddress, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(param0: java.net.InetSocketAddress, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class IterableSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.lang.Iterable<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.IterableSerializer>;
							public serialize(param0: java.lang.Iterable<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.IterableSerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public hasSingleElement(param0: java.lang.Iterable<any>): boolean;
							public isEmpty(param0: any): boolean;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public serializeContents(param0: java.lang.Iterable<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.BeanProperty, param5: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.IterableSerializer;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.Iterable<any>): boolean;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public hasSingleElement(param0: any): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class JsonValueSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer>;
							public _accessorMethod: java.lang.reflect.Method;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _forceTypeInformation: boolean;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public _acceptJsonFormatVisitorForEnum(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType, param2: java.lang.Class<any>): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public toString(): string;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: boolean): com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: boolean);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isNaturalTypeWithStdHandling(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): boolean;
							public constructor(param0: java.lang.reflect.Method, param1: com.fasterxml.jackson.databind.JsonSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class MapProperty extends com.fasterxml.jackson.databind.ser.PropertyWriter {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.MapProperty>;
							public _typeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _key: any;
							public _keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isVirtual(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.PropertyMetadata);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public serializeAsOmittedField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
							public serializeAsPlaceholder(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isRequired(): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getName(): string;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(param0: com.fasterxml.jackson.databind.ser.PropertyWriter);
							public constructor(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param1: com.fasterxml.jackson.databind.BeanProperty);
							public reset(param0: any, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class MapSerializer extends com.fasterxml.jackson.databind.ser.ContainerSerializer<java.util.Map<any,any>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.MapSerializer>;
							public static UNSPECIFIED_TYPE: com.fasterxml.jackson.databind.JavaType;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _ignoredEntries: java.util.HashSet<string>;
							public _valueTypeIsStatic: boolean;
							public _keyType: com.fasterxml.jackson.databind.JavaType;
							public _valueType: com.fasterxml.jackson.databind.JavaType;
							public _keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _dynamicValueSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public _filterId: any;
							public _sortKeys: boolean;
							public _suppressableValue: any;
							public withContentInclusion(param0: any): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.MapSerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.util.HashSet<string>);
							public serializeOptionalFields(param0: java.util.Map<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: any): void;
							public withFilterId(param0: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeTypedFields(param0: java.util.Map<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public serializeFields(param0: java.util.Map<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isEmpty(param0: any): boolean;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.MapSerializer, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: any);
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.MapSerializer, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer);
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public _ensureOverride(): void;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public serializeFieldsUsing(param0: java.util.Map<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public serializeFilteredFields(param0: java.util.Map<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyFilter): void;
							public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _orderEntries(param0: java.util.Map<any,any>): java.util.Map<any,any>;
							public getKeySerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public serialize(param0: java.util.Map<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.util.Map<any,any>): boolean;
							public hasSingleElement(param0: java.util.Map<any,any>): boolean;
							public serializeFilteredFields(param0: java.util.Map<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyFilter, param4: any): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public serializeTypedFields(param0: java.util.Map<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: any): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.util.HashSet<string>, param4: boolean): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public constructor(param0: java.util.HashSet<string>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType, param3: boolean, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>, param6: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public withFilterId(param0: any): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public static construct(param0: native.Array<string>, param1: com.fasterxml.jackson.databind.JavaType, param2: boolean, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>, param5: com.fasterxml.jackson.databind.JsonSerializer<any>, param6: any): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public hasSingleElement(param0: any): boolean;
							public serializeWithType(param0: java.util.Map<any,any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.MapSerializer, param1: any, param2: boolean);
							public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export abstract class NonTypedScalarSerializerBase<T>  extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase<any>>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class NullSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NullSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.NullSerializer;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class NumberSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.lang.Number> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.NumberSerializer;
							public _isInt: boolean;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(param0: java.lang.Number, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class NumberSerializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers>;
							public constructor();
							public static addAll(param0: java.util.Map<string,com.fasterxml.jackson.databind.JsonSerializer<any>>): void;
						}
						export namespace NumberSerializers {
							export abstract class Base<T>  extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any>>;
								public _numberType: com.fasterxml.jackson.core.JsonParser.NumberType;
								public _schemaType: string;
								public _isInt: boolean;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.core.JsonParser.NumberType, param2: string);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class DoubleSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.DoubleSerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.core.JsonParser.NumberType, param2: string);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class FloatSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.FloatSerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.core.JsonParser.NumberType, param2: string);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class IntLikeSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.core.JsonParser.NumberType, param2: string);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class IntegerSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.IntegerSerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.core.JsonParser.NumberType, param2: string);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class LongSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.LongSerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.core.JsonParser.NumberType, param2: string);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class ShortSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.core.JsonParser.NumberType, param2: string);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class ObjectArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<native.Array<any>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer>;
							public _staticTyping: boolean;
							public _elementType: com.fasterxml.jackson.databind.JavaType;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public serialize(param0: native.Array<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
							public isEmpty(param0: any): boolean;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public serializeContents(param0: native.Array<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeTypedContents(param0: native.Array<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public serializeContentsUsing(param0: native.Array<any>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<any>): boolean;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public hasSingleElement(param0: native.Array<any>): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: java.lang.Boolean);
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer;
							public hasSingleElement(param0: any): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class RawSerializer<T>  extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.RawSerializer<any>>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class SerializableSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<com.fasterxml.jackson.databind.JsonSerializable> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.SerializableSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.SerializableSerializer;
							public constructor();
							public serialize(param0: com.fasterxml.jackson.databind.JsonSerializable, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: com.fasterxml.jackson.databind.JsonSerializable, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JsonSerializable): boolean;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class SqlDateSerializer extends com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<java.sql.Date> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public _timestamp(param0: java.sql.Date): number;
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
							public constructor(param0: java.lang.Class<any>, param1: java.lang.Boolean, param2: java.text.DateFormat);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: java.lang.Boolean);
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public _timestamp(param0: any): number;
							public serialize(param0: java.sql.Date, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class SqlTimeSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.sql.Time> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serialize(param0: java.sql.Time, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export abstract class StaticListSerializerBase<T>  extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<any>>;
							public _serializer: com.fasterxml.jackson.databind.JsonSerializer<string>;
							public _unwrapSingle: java.lang.Boolean;
							public constructor();
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: java.lang.Class<any>);
							public contentSchema(): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>, param2: java.lang.Boolean);
							public acceptContentVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class StdArraySerializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers>;
							public static _arraySerializers: java.util.HashMap<string,com.fasterxml.jackson.databind.JsonSerializer<any>>;
							public constructor();
							public static findStandardImpl(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
						export namespace StdArraySerializers {
							export class BooleanArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<native.Array<boolean>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.BooleanArraySerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public serializeContents(param0: native.Array<boolean>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public hasSingleElement(param0: native.Array<boolean>): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public serialize(param0: native.Array<boolean>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>);
								public isEmpty(param0: any): boolean;
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<boolean>): boolean;
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.BooleanArraySerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class CharArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<native.Array<string>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.CharArraySerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public isEmpty(param0: any): boolean;
								public constructor();
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<string>): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public serialize(param0: native.Array<string>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serializeWithType(param0: native.Array<string>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
								public constructor(param0: java.lang.Class<any>);
								public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class DoubleArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.DoubleArraySerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<number>): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public serializeContents(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>);
								public hasSingleElement(param0: native.Array<number>): boolean;
								public isEmpty(param0: any): boolean;
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.DoubleArraySerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class FloatArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.FloatArraySerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<number>): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public serializeContents(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>);
								public hasSingleElement(param0: native.Array<number>): boolean;
								public isEmpty(param0: any): boolean;
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.FloatArraySerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: java.lang.Boolean);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class IntArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.IntArraySerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<number>): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.IntArraySerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public serializeContents(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>);
								public hasSingleElement(param0: native.Array<number>): boolean;
								public isEmpty(param0: any): boolean;
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class LongArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.LongArraySerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.LongArraySerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: java.lang.Boolean);
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<number>): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public serializeContents(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>);
								public hasSingleElement(param0: native.Array<number>): boolean;
								public isEmpty(param0: any): boolean;
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class ShortArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<native.Array<number>> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.ShortArraySerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.ShortArraySerializer, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: java.lang.Boolean);
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: native.Array<number>): boolean;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public serializeContents(param0: native.Array<number>, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>);
								public hasSingleElement(param0: native.Array<number>): boolean;
								public isEmpty(param0: any): boolean;
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export abstract class TypedPrimitiveArraySerializer<T>  extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>>;
								public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param3: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Boolean);
								public constructor(param0: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class StdDelegatingSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer>;
							public _converter: com.fasterxml.jackson.databind.util.Converter<any,any>;
							public _delegateType: com.fasterxml.jackson.databind.JavaType;
							public _delegateSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public constructor(param0: com.fasterxml.jackson.databind.util.Converter<any,any>);
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public getConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(param0: com.fasterxml.jackson.databind.util.Converter<any,any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public getDelegatee(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public withDelegate(param0: com.fasterxml.jackson.databind.util.Converter<any,any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _findSerializer(param0: any, param1: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor(param0: java.lang.Class, param1: com.fasterxml.jackson.databind.util.Converter<any,any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
							public convertValue(param0: any): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class StdJdkSerializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers>;
							public constructor();
							public static all(): java.util.Collection<java.util.Map.Entry<java.lang.Class<any>,any>>;
						}
						export namespace StdJdkSerializers {
							export class AtomicBooleanSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.concurrent.atomic.AtomicBoolean> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicBooleanSerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public serialize(param0: java.util.concurrent.atomic.AtomicBoolean, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class AtomicIntegerSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.concurrent.atomic.AtomicInteger> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicIntegerSerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(param0: java.util.concurrent.atomic.AtomicInteger, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class AtomicLongSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.concurrent.atomic.AtomicLong> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicLongSerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public serialize(param0: java.util.concurrent.atomic.AtomicLong, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class StdKeySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializer>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class StdKeySerializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializers>;
							public static DEFAULT_KEY_SERIALIZER: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public static DEFAULT_STRING_SERIALIZER: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public static getFallbackKeySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public static getDefault(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public static getStdKeySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: java.lang.Class<any>, param2: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
						export namespace StdKeySerializers {
							export class Default extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializers.Default>;
								public _typeId: number;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(param0: number, param1: java.lang.Class<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class Dynamic extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializers.Dynamic>;
								public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public _findAndAddDynamic(param0: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
							export class StringKeySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializers.StringKeySerializer>;
								public constructor(param0: com.fasterxml.jackson.databind.JavaType);
								public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(param0: java.lang.Class<any>);
								public constructor(param0: java.lang.Class<any>, param1: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export abstract class StdScalarSerializer<T>  extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export abstract class StdSerializer<T>  extends com.fasterxml.jackson.databind.JsonSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdSerializer<any>>;
							public _handledType: java.lang.Class<any>;
							public handledType(): java.lang.Class<any>;
							public findConvertingContentSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public createSchemaNode(param0: string): com.fasterxml.jackson.databind.node.ObjectNode;
							public visitFloatFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public wrapAndThrow(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.Throwable, param2: any, param3: number): void;
							public findFormatFeature(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Class<any>, param3: com.fasterxml.jackson.annotation.JsonFormat.Feature): java.lang.Boolean;
							public visitArrayFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: com.fasterxml.jackson.databind.JavaType): void;
							public wrapAndThrow(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.Throwable, param2: any, param3: string): void;
							public findPropertyFilter(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any, param2: any): com.fasterxml.jackson.databind.ser.PropertyFilter;
							public visitIntFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.core.JsonParser.NumberType, param3: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public constructor();
							public createObjectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
							public constructor(param0: java.lang.Class<any>);
							public visitArrayFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes): void;
							public visitIntFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createSchemaNode(param0: string, param1: boolean): com.fasterxml.jackson.databind.node.ObjectNode;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty, param2: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public visitStringFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public visitStringFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isDefaultSerializer(param0: com.fasterxml.jackson.databind.JsonSerializer<any>): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class StringSerializer extends com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StringSerializer>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class TimeZoneSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.TimeZone> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public serialize(param0: java.util.TimeZone, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: java.util.TimeZone, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class ToStringSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ToStringSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class TokenBufferSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<com.fasterxml.jackson.databind.util.TokenBuffer> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer>;
							public constructor();
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public serializeWithType(param0: com.fasterxml.jackson.databind.util.TokenBuffer, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public serialize(param0: com.fasterxml.jackson.databind.util.TokenBuffer, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace ser {
					export namespace std {
						export class UUIDSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.UUID> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.UUIDSerializer>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public constructor(param0: com.fasterxml.jackson.databind.JavaType);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(param0: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(param0: java.lang.Class<any>, param1: boolean);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.util.UUID): boolean;
							public serialize(param0: java.util.UUID, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(param0: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public isEmpty(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class ArrayType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ArrayType>;
						public _componentType: com.fasterxml.jackson.databind.JavaType;
						public _emptyArray: any;
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getContentTypeHandler(): any;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.type.ArrayType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.ArrayType;
						public isAbstract(): boolean;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(): string;
						public static construct(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.type.ArrayType;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: number, param5: any, param6: any, param7: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase);
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public isConcrete(): boolean;
						public constructor();
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
						public isArrayType(): boolean;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.ArrayType;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.ArrayType;
						public hasGenericTypes(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static construct(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: any, param3: any): com.fasterxml.jackson.databind.type.ArrayType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public getContentType(): com.fasterxml.jackson.core.type.ResolvedType;
						public getContentValueHandler(): any;
						public getErasedSignature(): string;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: any, param3: any, param4: any, param5: boolean);
						public withStaticTyping(): com.fasterxml.jackson.databind.type.ArrayType;
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class ClassKey extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ClassKey>;
						public constructor();
						public constructor(param0: java.lang.Class<any>);
						public compareTo(param0: com.fasterxml.jackson.databind.type.ClassKey): number;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public reset(param0: java.lang.Class<any>): void;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class ClassStack {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ClassStack>;
						public _parent: com.fasterxml.jackson.databind.type.ClassStack;
						public _current: java.lang.Class<any>;
						public resolveSelfReferences(param0: com.fasterxml.jackson.databind.JavaType): void;
						public child(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.ClassStack;
						public constructor(param0: java.lang.Class<any>);
						public find(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.ClassStack;
						public addSelfReference(param0: com.fasterxml.jackson.databind.type.ResolvedRecursiveType): void;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class CollectionLikeType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.CollectionLikeType>;
						public _elementType: com.fasterxml.jackson.databind.JavaType;
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getContentTypeHandler(): any;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType, param5: any, param6: any, param7: boolean);
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public getGenericSignature(): string;
						public static upgradeFrom(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: number, param5: any, param6: any, param7: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase);
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase, param1: com.fasterxml.jackson.databind.JavaType);
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public getContentType(): com.fasterxml.jackson.core.type.ResolvedType;
						public getContentValueHandler(): any;
						public isTrueCollectionType(): boolean;
						public isCollectionLikeType(): boolean;
						public getErasedSignature(): string;
						public buildCanonicalName(): string;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class CollectionType extends com.fasterxml.jackson.databind.type.CollectionLikeType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.CollectionType>;
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType, param5: any, param6: any, param7: boolean);
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionType;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: number, param5: any, param6: any, param7: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase);
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionType;
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase, param1: com.fasterxml.jackson.databind.JavaType);
						public constructor();
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.CollectionType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.CollectionType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.CollectionLikeType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class MapLikeType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.MapLikeType>;
						public _keyType: com.fasterxml.jackson.databind.JavaType;
						public _valueType: com.fasterxml.jackson.databind.JavaType;
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getContentTypeHandler(): any;
						public getKeyType(): com.fasterxml.jackson.databind.JavaType;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withKeyType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public isMapLikeType(): boolean;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(): string;
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType);
						public static upgradeFrom(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: number, param5: any, param6: any, param7: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase);
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.MapLikeType;
						public constructor();
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType, param5: com.fasterxml.jackson.databind.JavaType, param6: any, param7: any, param8: boolean);
						public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
						public isTrueMapType(): boolean;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withKeyValueHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public getContentType(): com.fasterxml.jackson.core.type.ResolvedType;
						public getContentValueHandler(): any;
						public buildCanonicalName(): string;
						public getErasedSignature(): string;
						public isContainerType(): boolean;
						public getKeyType(): com.fasterxml.jackson.core.type.ResolvedType;
						public withKeyTypeHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class MapType extends com.fasterxml.jackson.databind.type.MapLikeType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.MapType>;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType, param5: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapType;
						public withKeyTypeHandler(param0: any): com.fasterxml.jackson.databind.type.MapType;
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withKeyType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType);
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.MapType;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: number, param5: any, param6: any, param7: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase);
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public withKeyValueHandler(param0: any): com.fasterxml.jackson.databind.type.MapType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.MapType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.MapLikeType;
						public constructor();
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType, param5: com.fasterxml.jackson.databind.JavaType, param6: any, param7: any, param8: boolean);
						public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.MapType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.type.MapType;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withKeyValueHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.MapType;
						public withKeyType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapType;
						public withKeyTypeHandler(param0: any): com.fasterxml.jackson.databind.type.MapLikeType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class ReferenceType extends com.fasterxml.jackson.databind.type.SimpleType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ReferenceType>;
						public _referencedType: com.fasterxml.jackson.databind.JavaType;
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: any, param5: any, param6: boolean);
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType, param5: any, param6: any, param7: boolean);
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(): string;
						public constructor(param0: java.lang.Class<any>);
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.ReferenceType;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>);
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase);
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: number, param5: any, param6: any, param7: boolean);
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase, param1: com.fasterxml.jackson.databind.JavaType);
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.type.ReferenceType;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.ReferenceType;
						public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.ReferenceType;
						public getReferencedType(): com.fasterxml.jackson.databind.JavaType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.SimpleType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.ReferenceType;
						public getContentType(): com.fasterxml.jackson.core.type.ResolvedType;
						public static construct(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.ReferenceType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.SimpleType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.SimpleType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.SimpleType;
						public getReferencedType(): com.fasterxml.jackson.core.type.ResolvedType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.ReferenceType;
						public isReferenceType(): boolean;
						public buildCanonicalName(): string;
						public getErasedSignature(): string;
						public static upgradeFrom(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.ReferenceType;
						public static construct(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.SimpleType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class ResolvedRecursiveType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ResolvedRecursiveType>;
						public _referencedType: com.fasterxml.jackson.databind.JavaType;
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public setReference(param0: com.fasterxml.jackson.databind.JavaType): void;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(): string;
						public getSelfReferencedType(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: number, param5: any, param6: any, param7: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase);
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings);
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public getErasedSignature(): string;
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class SimpleType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.SimpleType>;
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: any, param5: any, param6: boolean);
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(): string;
						public constructor(param0: java.lang.Class<any>);
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>);
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: number, param5: any, param6: any, param7: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase);
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static constructUnsafe(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.SimpleType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.SimpleType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.type.SimpleType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.type.SimpleType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.type.SimpleType;
						public buildCanonicalName(): string;
						public getErasedSignature(): string;
						public static construct(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.SimpleType;
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export abstract class TypeBase extends com.fasterxml.jackson.databind.JavaType implements com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeBase>;
						public _superClass: com.fasterxml.jackson.databind.JavaType;
						public _superInterfaces: native.Array<com.fasterxml.jackson.databind.JavaType>;
						public _bindings: com.fasterxml.jackson.databind.type.TypeBindings;
						public getTypeHandler(): any;
						public static _classSignature(param0: java.lang.Class<any>, param1: java.lang.StringBuilder, param2: boolean): java.lang.StringBuilder;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(): string;
						public containedType(param0: number): com.fasterxml.jackson.core.type.ResolvedType;
						public getValueHandler(): any;
						public containedTypeName(param0: number): string;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>, param4: number, param5: any, param6: any, param7: boolean);
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeBase);
						public containedTypeCount(): number;
						public static _bogusSuperClass(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public getBindings(): com.fasterxml.jackson.databind.type.TypeBindings;
						public getSuperClass(): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: java.lang.Class<any>, param1: number, param2: any, param3: any, param4: boolean);
						public toCanonical(): string;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public getInterfaces(): java.util.List<com.fasterxml.jackson.databind.JavaType>;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public containedType(param0: number): com.fasterxml.jackson.databind.JavaType;
						public findSuperType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public findTypeParameters(param0: java.lang.Class<any>): native.Array<com.fasterxml.jackson.databind.JavaType>;
						public buildCanonicalName(): string;
						public getErasedSignature(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class TypeBindings {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeBindings>;
						public static createIfNeeded(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.TypeBindings;
						public getBoundType(param0: number): com.fasterxml.jackson.databind.JavaType;
						public typeParameterArray(): native.Array<com.fasterxml.jackson.databind.JavaType>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public static create(param0: java.lang.Class<any>, param1: java.util.List<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.type.TypeBindings;
						public readResolve(): any;
						public toString(): string;
						public withUnboundVariable(param0: string): com.fasterxml.jackson.databind.type.TypeBindings;
						public static emptyBindings(): com.fasterxml.jackson.databind.type.TypeBindings;
						public static create(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.TypeBindings;
						public getTypeParameters(): java.util.List<com.fasterxml.jackson.databind.JavaType>;
						public static createIfNeeded(param0: java.lang.Class<any>, param1: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.type.TypeBindings;
						public static create(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.TypeBindings;
						public findBoundType(param0: string): com.fasterxml.jackson.databind.JavaType;
						public isEmpty(): boolean;
						public hasUnbound(param0: string): boolean;
						public size(): number;
						public getBoundName(param0: number): string;
						public static create(param0: java.lang.Class<any>, param1: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.type.TypeBindings;
					}
					export namespace TypeBindings {
						export class TypeParamStash {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash>;
							public static paramsFor1(param0: java.lang.Class<any>): native.Array<java.lang.reflect.TypeVariable<any>>;
							public static paramsFor2(param0: java.lang.Class<any>): native.Array<java.lang.reflect.TypeVariable<any>>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class TypeFactory {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeFactory>;
						public static instance: com.fasterxml.jackson.databind.type.TypeFactory;
						public static EMPTY_BINDINGS: com.fasterxml.jackson.databind.type.TypeBindings;
						public static CORE_TYPE_BOOL: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_INT: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_LONG: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_STRING: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_OBJECT: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_COMPARABLE: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_ENUM: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_CLASS: com.fasterxml.jackson.databind.type.SimpleType;
						public _typeCache: com.fasterxml.jackson.databind.util.LRUMap<java.lang.Class<any>,com.fasterxml.jackson.databind.JavaType>;
						public _modifiers: native.Array<com.fasterxml.jackson.databind.type.TypeModifier>;
						public _parser: com.fasterxml.jackson.databind.type.TypeParser;
						public _classLoader: java.lang.ClassLoader;
						public findTypeParameters(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.Class<any>): native.Array<com.fasterxml.jackson.databind.JavaType>;
						public constructRawMapLikeType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.MapLikeType;
						public _fromAny(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.reflect.Type, param2: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public _newSimpleType(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public _constructSimple(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructSimpleType(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructRawCollectionLikeType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public constructReferenceType(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public _fromWellKnownClass(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.type.TypeBindings, param3: com.fasterxml.jackson.databind.JavaType, param4: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructMapType(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapType;
						public findTypeParameters(param0: java.lang.Class<any>, param1: java.lang.Class<any>): native.Array<com.fasterxml.jackson.databind.JavaType>;
						public _fromWellKnownInterface(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.type.TypeBindings, param3: com.fasterxml.jackson.databind.JavaType, param4: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructParametricType(param0: java.lang.Class<any>, param1: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public _resolveSuperInterfaces(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.type.TypeBindings): native.Array<com.fasterxml.jackson.databind.JavaType>;
						public constructType(param0: java.lang.reflect.Type, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public _fromWildcard(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.reflect.WildcardType, param2: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public withModifier(param0: com.fasterxml.jackson.databind.type.TypeModifier): com.fasterxml.jackson.databind.type.TypeFactory;
						public static unknownType(): com.fasterxml.jackson.databind.JavaType;
						public constructGeneralizedType(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public constructParametricType(param0: java.lang.Class<any>, param1: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.JavaType;
						public constructType(param0: java.lang.reflect.Type, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public _fromVariable(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.reflect.TypeVariable<any>, param2: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public _resolveSuperClass(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public constructSpecializedType(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public constructCollectionLikeType(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public _fromParamType(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.reflect.ParameterizedType, param2: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public constructCollectionType(param0: java.lang.Class<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.type.CollectionType;
						public _findPrimitive(param0: string): java.lang.Class<any>;
						public constructParametrizedType(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.JavaType;
						public static rawClass(param0: java.lang.reflect.Type): java.lang.Class<any>;
						public constructCollectionType(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionType;
						public _fromClass(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public moreSpecificType(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public uncheckedSimpleType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public constructType(param0: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.JavaType;
						public constructMapLikeType(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.type.MapLikeType;
						public constructRawMapType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.MapType;
						public constructCollectionLikeType(param0: java.lang.Class<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public constructFromCanonical(param0: string): com.fasterxml.jackson.databind.JavaType;
						public constructSimpleType(param0: java.lang.Class<any>, param1: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructMapType(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.type.MapType;
						public findTypeParameters(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: com.fasterxml.jackson.databind.type.TypeBindings): native.Array<com.fasterxml.jackson.databind.JavaType>;
						public _unknownType(): com.fasterxml.jackson.databind.JavaType;
						public constructRawCollectionType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.CollectionType;
						public _findWellKnownSimple(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getClassLoader(): java.lang.ClassLoader;
						public constructParametrizedType(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: native.Array<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.JavaType;
						public constructMapLikeType(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public withClassLoader(param0: java.lang.ClassLoader): com.fasterxml.jackson.databind.type.TypeFactory;
						public constructType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						public findClass(param0: string): java.lang.Class<any>;
						public constructArrayType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.ArrayType;
						public _fromArrayType(param0: com.fasterxml.jackson.databind.type.ClassStack, param1: java.lang.reflect.GenericArrayType, param2: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeParser, param1: native.Array<com.fasterxml.jackson.databind.type.TypeModifier>);
						public classForName(param0: string): java.lang.Class<any>;
						public constructType(param0: java.lang.reflect.Type, param1: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public static defaultInstance(): com.fasterxml.jackson.databind.type.TypeFactory;
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeParser, param1: native.Array<com.fasterxml.jackson.databind.type.TypeModifier>, param2: java.lang.ClassLoader);
						public constructArrayType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.type.ArrayType;
						public clearCache(): void;
						public classForName(param0: string, param1: boolean, param2: java.lang.ClassLoader): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export abstract class TypeModifier {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeModifier>;
						public constructor();
						public modifyType(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.reflect.Type, param2: com.fasterxml.jackson.databind.type.TypeBindings, param3: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace type {
					export class TypeParser {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeParser>;
						public _factory: com.fasterxml.jackson.databind.type.TypeFactory;
						public parseType(param0: com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer): com.fasterxml.jackson.databind.JavaType;
						public _problem(param0: com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer, param1: string): java.lang.IllegalArgumentException;
						public constructor(param0: com.fasterxml.jackson.databind.type.TypeFactory);
						public parseTypes(param0: com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer): java.util.List<com.fasterxml.jackson.databind.JavaType>;
						public withFactory(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.type.TypeParser;
						public parse(param0: string): com.fasterxml.jackson.databind.JavaType;
						public findClass(param0: string, param1: com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer): java.lang.Class<any>;
					}
					export namespace TypeParser {
						export class MyTokenizer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer>;
							public _input: string;
							public _index: number;
							public _pushbackToken: string;
							public constructor(param0: string);
							public getUsedInput(): string;
							public hasMoreTokens(): boolean;
							public getAllInput(): string;
							public nextToken(): string;
							public pushBack(param0: string): void;
							public getRemainingInput(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class Annotations {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.Annotations>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.util.Annotations interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							get(param0: java.lang.Class): java.lang.annotation.Annotation;
							size(): number;
						});
						public constructor();
						public get(param0: java.lang.Class): java.lang.annotation.Annotation;
						public size(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ArrayBuilders {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders>;
						public static getArrayComparator(param0: any): any;
						public static arrayToList(param0: native.Array<any>): java.util.ArrayList;
						public constructor();
						public static insertInListNoDup(param0: native.Array<any>, param1: any): native.Array<any>;
						public getLongBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.LongBuilder;
						public getFloatBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.FloatBuilder;
						public static addToList(param0: java.util.List, param1: any): java.util.List;
						public static insertInList(param0: native.Array<any>, param1: any): native.Array<any>;
						public getByteBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.ByteBuilder;
						public static arrayToSet(param0: native.Array<any>): java.util.HashSet;
						public getDoubleBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.DoubleBuilder;
						public getShortBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.ShortBuilder;
						public getIntBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.IntBuilder;
						public static setAndArray(param0: java.util.Set, param1: native.Array<any>): java.util.HashSet;
						public getBooleanBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.BooleanBuilder;
					}
					export namespace ArrayBuilders {
						export class BooleanBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<native.Array<boolean>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.BooleanBuilder>;
							public constructor();
							public _constructArray(param0: number): any;
							public _constructArray(param0: number): native.Array<boolean>;
						}
						export class ByteBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<native.Array<number>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.ByteBuilder>;
							public constructor();
							public _constructArray(param0: number): any;
							public _constructArray(param0: number): native.Array<number>;
						}
						export class DoubleBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<native.Array<number>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.DoubleBuilder>;
							public constructor();
							public _constructArray(param0: number): any;
							public _constructArray(param0: number): native.Array<number>;
						}
						export class FloatBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<native.Array<number>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.FloatBuilder>;
							public constructor();
							public _constructArray(param0: number): any;
							public _constructArray(param0: number): native.Array<number>;
						}
						export class IntBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<native.Array<number>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.IntBuilder>;
							public constructor();
							public _constructArray(param0: number): any;
							public _constructArray(param0: number): native.Array<number>;
						}
						export class LongBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<native.Array<number>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.LongBuilder>;
							public constructor();
							public _constructArray(param0: number): any;
							public _constructArray(param0: number): native.Array<number>;
						}
						export class ShortBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<native.Array<number>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.ShortBuilder>;
							public constructor();
							public _constructArray(param0: number): any;
							public _constructArray(param0: number): native.Array<number>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ArrayIterator<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayIterator<any>>;
						public constructor(param0: native.Array<T>);
						public iterator(): java.util.Iterator<T>;
						public hasNext(): boolean;
						public next(): T;
						public remove(): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class BeanUtil {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.BeanUtil>;
						public constructor();
						public static okNameForSetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: boolean): string;
						public static isGroovyMetaClassSetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public static okNameForRegularGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string, param2: boolean): string;
						public static okNameForRegularGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
						public static okNameForGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): string;
						public static okNameForSetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): string;
						public static okNameForGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: boolean): string;
						public static isCglibGetCallbacks(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public static okNameForMutator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string, param2: boolean): string;
						public static okNameForIsGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
						public static okNameForIsGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string, param2: boolean): string;
						public static stdManglePropertyName(param0: string, param1: number): string;
						public static legacyManglePropertyName(param0: string, param1: number): string;
						public static okNameForMutator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
						public static isGroovyMetaClassGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ByteBufferBackedInputStream {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream>;
						public _b: java.nio.ByteBuffer;
						public read(): number;
						public constructor(param0: java.nio.ByteBuffer);
						public read(param0: native.Array<number>, param1: number, param2: number): number;
						public available(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ByteBufferBackedOutputStream {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ByteBufferBackedOutputStream>;
						public _b: java.nio.ByteBuffer;
						public write(param0: number): void;
						public write(param0: native.Array<number>, param1: number, param2: number): void;
						public constructor(param0: java.nio.ByteBuffer);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ClassUtil {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ClassUtil>;
						public static getDeclaringClass(param0: java.lang.Class<any>): java.lang.Class<any>;
						public static findEnumType(param0: java.lang.Enum<any>): java.lang.Class<any>;
						public static findClass(param0: string): java.lang.Class<any>;
						public static findClassAnnotations(param0: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
						public static getGenericInterfaces(param0: java.lang.Class<any>): native.Array<java.lang.reflect.Type>;
						public static unwrapAndThrowAsIAE(param0: java.lang.Throwable, param1: string): void;
						public static canBeABeanType(param0: java.lang.Class<any>): string;
						public static findEnumType(param0: java.lang.Class<any>): java.lang.Class<any>;
						public static getEnclosingClass(param0: java.lang.Class<any>): java.lang.Class<any>;
						public static checkAndFixAccess(param0: java.lang.reflect.Member): void;
						public static findRawSuperTypes(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: boolean): java.util.List<java.lang.Class<any>>;
						public static checkAndFixAccess(param0: java.lang.reflect.Member, param1: boolean): void;
						public static isCollectionMapOrArray(param0: java.lang.Class<any>): boolean;
						public static isObjectOrPrimitive(param0: java.lang.Class<any>): boolean;
						public static isProxyType(param0: java.lang.Class<any>): boolean;
						public static isConcrete(param0: java.lang.Class<any>): boolean;
						public static createInstance(param0: java.lang.Class, param1: boolean): any;
						public constructor();
						public static getOuterClass(param0: java.lang.Class<any>): java.lang.Class<any>;
						public static isBogusClass(param0: java.lang.Class<any>): boolean;
						public static isNonStaticInnerClass(param0: java.lang.Class<any>): boolean;
						public static findSuperTypes(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.Class<any>, param2: boolean): java.util.List<com.fasterxml.jackson.databind.JavaType>;
						public static isConcrete(param0: java.lang.reflect.Member): boolean;
						public static findSuperTypes(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: java.util.List<java.lang.Class<any>>): java.util.List<java.lang.Class<any>>;
						public static findSuperClasses(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: boolean): java.util.List<java.lang.Class<any>>;
						public static getDeclaredFields(param0: java.lang.Class<any>): native.Array<java.lang.reflect.Field>;
						public static hasGetterSignature(param0: java.lang.reflect.Method): boolean;
						public static isJacksonStdImpl(param0: any): boolean;
						public static defaultValue(param0: java.lang.Class<any>): any;
						public static getClassDescription(param0: any): string;
						public static findEnumType(param0: java.util.EnumSet<any>): java.lang.Class<any>;
						public static findEnumType(param0: java.util.EnumMap<any,any>): java.lang.Class<any>;
						public static getDeclaredMethods(param0: java.lang.Class<any>): native.Array<java.lang.reflect.Method>;
						public static getGenericSuperclass(param0: java.lang.Class<any>): java.lang.reflect.Type;
						public static isLocalType(param0: java.lang.Class<any>, param1: boolean): string;
						public static getRootCause(param0: java.lang.Throwable): java.lang.Throwable;
						public static getPackageName(param0: java.lang.Class<any>): string;
						public static throwAsIAE(param0: java.lang.Throwable, param1: string): void;
						public static emptyIterator(): java.util.Iterator;
						public static wrapperType(param0: java.lang.Class<any>): java.lang.Class<any>;
						public static primitiveType(param0: java.lang.Class<any>): java.lang.Class<any>;
						public static getConstructors(param0: java.lang.Class<any>): native.Array<com.fasterxml.jackson.databind.util.ClassUtil.Ctor>;
						public static throwRootCause(param0: java.lang.Throwable): void;
						public static findConstructor(param0: java.lang.Class, param1: boolean): java.lang.reflect.Constructor;
						public static findSuperTypes(param0: java.lang.Class<any>, param1: java.lang.Class<any>): java.util.List<java.lang.Class<any>>;
						public static hasEnclosingMethod(param0: java.lang.Class<any>): boolean;
						public static unwrapAndThrowAsIAE(param0: java.lang.Throwable): void;
						public static throwAsIAE(param0: java.lang.Throwable): void;
						public static isJacksonStdImpl(param0: java.lang.Class<any>): boolean;
					}
					export namespace ClassUtil {
						export class ClassMetadata {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ClassUtil.ClassMetadata>;
							public getDeclaredFields(): native.Array<java.lang.reflect.Field>;
							public getDeclaredMethods(): native.Array<java.lang.reflect.Method>;
							public constructor(param0: java.lang.Class<any>);
							public getPackageName(): string;
							public getDeclaredAnnotations(): native.Array<java.lang.annotation.Annotation>;
							public getGenericInterfaces(): native.Array<java.lang.reflect.Type>;
							public getInterfaces(): native.Array<java.lang.Class<any>>;
							public getConstructors(): native.Array<com.fasterxml.jackson.databind.util.ClassUtil.Ctor>;
							public hasEnclosingMethod(): boolean;
						}
						export class Ctor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ClassUtil.Ctor>;
							public _ctor: java.lang.reflect.Constructor<any>;
							public getConstructor(): java.lang.reflect.Constructor<any>;
							public getParameterAnnotations(): native.Array<native.Array<java.lang.annotation.Annotation>>;
							public getDeclaredAnnotations(): native.Array<java.lang.annotation.Annotation>;
							public getParamCount(): number;
							public constructor(param0: java.lang.reflect.Constructor<any>);
							public getDeclaringClass(): java.lang.Class<any>;
						}
						export class EmptyIterator<T>  extends java.util.Iterator<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ClassUtil.EmptyIterator<any>>;
							public hasNext(): boolean;
							public remove(): void;
							public next(): any;
						}
						export class EnumTypeLocator {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ClassUtil.EnumTypeLocator>;
							public enumTypeFor(param0: java.util.EnumMap<any,any>): java.lang.Class<any>;
							public enumTypeFor(param0: java.util.EnumSet<any>): java.lang.Class<any>;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class CompactStringObjectMap {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.CompactStringObjectMap>;
						public static construct(param0: java.util.Map): com.fasterxml.jackson.databind.util.CompactStringObjectMap;
						public find(param0: string): any;
						public keys(): java.util.List<string>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class Converter<IN, OUT>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.Converter<any,any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.util.Converter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							convert(param0: IN): OUT;
							getInputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
							getOutputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						});
						public constructor();
						public getInputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public getOutputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public convert(param0: IN): OUT;
					}
					export namespace Converter {
						export abstract class None extends com.fasterxml.jackson.databind.util.Converter<any,any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.Converter.None>;
							public constructor();
							public getOutputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
							public getInputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
							public convert(param0: any): any;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class EnumResolver {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.EnumResolver>;
						public _enumClass: java.lang.Class<java.lang.Enum<any>>;
						public _enums: native.Array<java.lang.Enum<any>>;
						public _enumsById: java.util.HashMap<string,java.lang.Enum<any>>;
						public static constructUnsafeUsingToString(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.util.EnumResolver;
						public getRawEnums(): native.Array<java.lang.Enum<any>>;
						public constructLookup(): com.fasterxml.jackson.databind.util.CompactStringObjectMap;
						public static constructFor(param0: java.lang.Class<java.lang.Enum<any>>, param1: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.util.EnumResolver;
						public static constructUsingMethod(param0: java.lang.Class<java.lang.Enum<any>>, param1: java.lang.reflect.Method): com.fasterxml.jackson.databind.util.EnumResolver;
						public constructor(param0: java.lang.Class<java.lang.Enum<any>>, param1: native.Array<java.lang.Enum<any>>, param2: java.util.HashMap<string,java.lang.Enum<any>>);
						public getEnumClass(): java.lang.Class<java.lang.Enum<any>>;
						public lastValidIndex(): number;
						public getEnums(): java.util.List<java.lang.Enum<any>>;
						public findEnum(param0: string): java.lang.Enum<any>;
						public static constructUnsafeUsingMethod(param0: java.lang.Class<any>, param1: java.lang.reflect.Method): com.fasterxml.jackson.databind.util.EnumResolver;
						public getEnum(param0: number): java.lang.Enum<any>;
						public static constructUsingToString(param0: java.lang.Class<java.lang.Enum<any>>): com.fasterxml.jackson.databind.util.EnumResolver;
						public static constructUnsafe(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.util.EnumResolver;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class EnumValues {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.EnumValues>;
						public serializedValueFor(param0: java.lang.Enum<any>): com.fasterxml.jackson.core.SerializableString;
						public enums(): java.util.List<java.lang.Enum<any>>;
						public static constructFromName(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<java.lang.Enum<any>>): com.fasterxml.jackson.databind.util.EnumValues;
						public static construct(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: java.lang.Class<java.lang.Enum<any>>): com.fasterxml.jackson.databind.util.EnumValues;
						public values(): java.util.Collection<com.fasterxml.jackson.core.SerializableString>;
						public internalMap(): java.util.EnumMap<any,com.fasterxml.jackson.core.SerializableString>;
						public static constructFromToString(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<java.lang.Enum<any>>): com.fasterxml.jackson.databind.util.EnumValues;
						public getEnumClass(): java.lang.Class<java.lang.Enum<any>>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ISO8601DateFormat {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ISO8601DateFormat>;
						public parse(param0: string, param1: java.text.ParsePosition): java.util.Date;
						public parse(param0: string): java.util.Date;
						public format(param0: java.util.Date, param1: java.lang.StringBuffer, param2: java.text.FieldPosition): java.lang.StringBuffer;
						public constructor();
						public clone(): any;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ISO8601Utils {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ISO8601Utils>;
						public constructor();
						public static format(param0: java.util.Date): string;
						public static format(param0: java.util.Date, param1: boolean, param2: java.util.TimeZone): string;
						public static timeZoneGMT(): java.util.TimeZone;
						public static parse(param0: string, param1: java.text.ParsePosition): java.util.Date;
						public static format(param0: java.util.Date, param1: boolean): string;
						public static main(param0: native.Array<string>): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class JSONPObject extends com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.JSONPObject>;
						public _function: string;
						public _value: any;
						public _serializationType: com.fasterxml.jackson.databind.JavaType;
						public constructor(param0: string, param1: any);
						public constructor(param0: string, param1: any, param2: com.fasterxml.jackson.databind.JavaType);
						public getValue(): any;
						public getSerializationType(): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getFunction(): string;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class JSONWrappedObject extends com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.JSONWrappedObject>;
						public _prefix: string;
						public _suffix: string;
						public _value: any;
						public _serializationType: com.fasterxml.jackson.databind.JavaType;
						public getSuffix(): string;
						public getValue(): any;
						public constructor(param0: string, param1: string, param2: any, param3: com.fasterxml.jackson.databind.JavaType);
						public getSerializationType(): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getPrefix(): string;
						public constructor(param0: string, param1: string, param2: any);
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class LRUMap<K, V>  extends java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.LRUMap<any,any>>;
						public _maxEntries: number;
						public _map: java.util.concurrent.ConcurrentHashMap<any,any>;
						public _jdkSerializeMaxEntries: number;
						public put(param0: any, param1: any): any;
						public get(param0: any): any;
						public clear(): void;
						public size(): number;
						public constructor(param0: number, param1: number);
						public putIfAbsent(param0: any, param1: any): any;
						public readResolve(): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class LinkedNode<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.LinkedNode<any>>;
						public constructor(param0: T, param1: com.fasterxml.jackson.databind.util.LinkedNode<T>);
						public linkNext(param0: com.fasterxml.jackson.databind.util.LinkedNode<T>): void;
						public value(): T;
						public next(): com.fasterxml.jackson.databind.util.LinkedNode<T>;
						public static contains(param0: com.fasterxml.jackson.databind.util.LinkedNode<any>, param1: any): boolean;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export abstract class NameTransformer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.NameTransformer>;
						public static NOP: com.fasterxml.jackson.databind.util.NameTransformer;
						public constructor();
						public reverse(param0: string): string;
						public transform(param0: string): string;
						public static chainedTransformer(param0: com.fasterxml.jackson.databind.util.NameTransformer, param1: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.util.NameTransformer;
						public static simpleTransformer(param0: string, param1: string): com.fasterxml.jackson.databind.util.NameTransformer;
					}
					export namespace NameTransformer {
						export class Chained extends com.fasterxml.jackson.databind.util.NameTransformer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.NameTransformer.Chained>;
							public _t1: com.fasterxml.jackson.databind.util.NameTransformer;
							public _t2: com.fasterxml.jackson.databind.util.NameTransformer;
							public constructor();
							public reverse(param0: string): string;
							public toString(): string;
							public constructor(param0: com.fasterxml.jackson.databind.util.NameTransformer, param1: com.fasterxml.jackson.databind.util.NameTransformer);
							public transform(param0: string): string;
						}
						export class NopTransformer extends com.fasterxml.jackson.databind.util.NameTransformer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.NameTransformer.NopTransformer>;
							public constructor();
							public reverse(param0: string): string;
							public transform(param0: string): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class Named {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.Named>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.util.Named interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getName(): string;
						});
						public constructor();
						public getName(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ObjectBuffer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ObjectBuffer>;
						public completeAndClearBuffer(param0: native.Array<any>, param1: number, param2: java.util.List<any>): void;
						public constructor();
						public resetAndStart(): native.Array<any>;
						public bufferedSize(): number;
						public appendCompletedChunk(param0: native.Array<any>): native.Array<any>;
						public _copyTo(param0: any, param1: number, param2: native.Array<any>, param3: number): void;
						public completeAndClearBuffer(param0: native.Array<any>, param1: number): native.Array<any>;
						public _reset(): void;
						public completeAndClearBuffer(param0: native.Array<any>, param1: number, param2: java.lang.Class): native.Array<any>;
						public initialCapacity(): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ObjectIdMap extends java.util.IdentityHashMap<any,any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ObjectIdMap>;
						public insertId(param0: any, param1: any): void;
						public constructor();
						public findId(param0: any): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export abstract class PrimitiveArrayBuilder<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<any>>;
						public _freeBuffer: T;
						public _bufferHead: com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<T>;
						public _bufferTail: com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<T>;
						public _bufferedEntryCount: number;
						public constructor();
						public appendCompletedChunk(param0: T, param1: number): T;
						public bufferedSize(): number;
						public resetAndStart(): T;
						public completeAndClearBuffer(param0: T, param1: number): T;
						public _reset(): void;
						public _constructArray(param0: number): T;
					}
					export namespace PrimitiveArrayBuilder {
						export class Node<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<any>>;
							public copyData(param0: T, param1: number): number;
							public linkNext(param0: com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<T>): void;
							public next(): com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<T>;
							public constructor(param0: T, param1: number);
							public getData(): T;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class RawValue extends com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.RawValue>;
						public _value: any;
						public constructor(param0: any, param1: boolean);
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor(param0: com.fasterxml.jackson.databind.JsonSerializable);
						public equals(param0: any): boolean;
						public hashCode(): number;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public rawValue(): any;
						public _serialize(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor(param0: com.fasterxml.jackson.core.SerializableString);
						public toString(): string;
						public constructor(param0: string);
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class RootNameLookup {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.RootNameLookup>;
						public _rootNames: com.fasterxml.jackson.databind.util.LRUMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.PropertyName>;
						public constructor();
						public findRootName(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.PropertyName;
						public findRootName(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.PropertyName;
						public readResolve(): any;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class SimpleBeanPropertyDefinition extends com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition>;
						public _introspector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _member: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _metadata: com.fasterxml.jackson.databind.PropertyMetadata;
						public _fullName: com.fasterxml.jackson.databind.PropertyName;
						public _inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public _name: string;
						public getConstructorParameters(): java.util.Iterator<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public withSimpleName(param0: string): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public getInternalName(): string;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public static construct(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.PropertyMetadata, param4: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
						public getName(): string;
						public isExplicitlyIncluded(): boolean;
						public hasField(): boolean;
						public getNonConstructorMutator(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param1: com.fasterxml.jackson.databind.PropertyName, param2: com.fasterxml.jackson.databind.AnnotationIntrospector, param3: com.fasterxml.jackson.databind.PropertyMetadata, param4: com.fasterxml.jackson.annotation.JsonInclude.Include);
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param1: com.fasterxml.jackson.databind.PropertyName, param2: com.fasterxml.jackson.databind.AnnotationIntrospector, param3: com.fasterxml.jackson.databind.PropertyMetadata, param4: com.fasterxml.jackson.annotation.JsonInclude.Value);
						public isExplicitlyNamed(): boolean;
						public getSetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public withMetadata(param0: com.fasterxml.jackson.databind.PropertyMetadata): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public hasConstructorParameter(): boolean;
						public getPrimaryMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param1: string, param2: com.fasterxml.jackson.databind.AnnotationIntrospector);
						public getAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor();
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public static construct(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
						public hasGetter(): boolean;
						public getConstructorParameter(): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public static construct(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
						public static construct(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: com.fasterxml.jackson.databind.PropertyName, param3: com.fasterxml.jackson.databind.PropertyMetadata, param4: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public withName(param0: string): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public hasName(param0: com.fasterxml.jackson.databind.PropertyName): boolean;
						public findInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public withInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public getField(): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public static construct(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedMember, param2: string): com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
						public hasSetter(): boolean;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public getGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getMutator(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export abstract class StdConverter<IN, OUT>  extends com.fasterxml.jackson.databind.util.Converter<any,any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.StdConverter<any,any>>;
						public convert(param0: any): any;
						public constructor();
						public getInputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public getOutputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public _findConverterType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class StdDateFormat {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.StdDateFormat>;
						public static DATE_FORMAT_STR_ISO8601: string;
						public static DATE_FORMAT_STR_ISO8601_Z: string;
						public static DATE_FORMAT_STR_PLAIN: string;
						public static DATE_FORMAT_STR_RFC1123: string;
						public static ALL_FORMATS: native.Array<string>;
						public static DATE_FORMAT_RFC1123: java.text.DateFormat;
						public static DATE_FORMAT_ISO8601: java.text.DateFormat;
						public static DATE_FORMAT_ISO8601_Z: java.text.DateFormat;
						public static DATE_FORMAT_PLAIN: java.text.DateFormat;
						public static instance: com.fasterxml.jackson.databind.util.StdDateFormat;
						public _timezone: java.util.TimeZone;
						public _locale: java.util.Locale;
						public _lenient: java.lang.Boolean;
						public _formatRFC1123: java.text.DateFormat;
						public _formatISO8601: java.text.DateFormat;
						public _formatISO8601_z: java.text.DateFormat;
						public _formatPlain: java.text.DateFormat;
						public isLenient(): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public looksLikeISO8601(param0: string): boolean;
						public static getRFC1123Format(param0: java.util.TimeZone): java.text.DateFormat;
						public constructor(param0: java.util.TimeZone, param1: java.util.Locale);
						public withLocale(param0: java.util.Locale): com.fasterxml.jackson.databind.util.StdDateFormat;
						public constructor(param0: java.util.TimeZone, param1: java.util.Locale, param2: java.lang.Boolean);
						public parseAsISO8601(param0: string, param1: java.text.ParsePosition, param2: boolean): java.util.Date;
						public parseAsRFC1123(param0: string, param1: java.text.ParsePosition): java.util.Date;
						public setLenient(param0: boolean): void;
						public format(param0: java.util.Date, param1: java.lang.StringBuffer, param2: java.text.FieldPosition): java.lang.StringBuffer;
						public static getRFC1123Format(param0: java.util.TimeZone, param1: java.util.Locale): java.text.DateFormat;
						public static getISO8601Format(param0: java.util.TimeZone, param1: java.util.Locale): java.text.DateFormat;
						public constructor();
						public withTimeZone(param0: java.util.TimeZone): com.fasterxml.jackson.databind.util.StdDateFormat;
						public _clearFormats(): void;
						public static getDefaultTimeZone(): java.util.TimeZone;
						public setTimeZone(param0: java.util.TimeZone): void;
						public toString(): string;
						public parse(param0: string): java.util.Date;
						public parse(param0: string, param1: java.text.ParsePosition): java.util.Date;
						public static getISO8601Format(param0: java.util.TimeZone): java.text.DateFormat;
						public clone(): com.fasterxml.jackson.databind.util.StdDateFormat;
						public getTimeZone(): java.util.TimeZone;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class TokenBuffer extends com.fasterxml.jackson.core.JsonGenerator {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.TokenBuffer>;
						public static DEFAULT_GENERATOR_FEATURES: number;
						public _objectCodec: com.fasterxml.jackson.core.ObjectCodec;
						public _generatorFeatures: number;
						public _closed: boolean;
						public _hasNativeTypeIds: boolean;
						public _hasNativeObjectIds: boolean;
						public _mayHaveNativeIds: boolean;
						public _forceBigDecimal: boolean;
						public _first: com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
						public _last: com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
						public _appendAt: number;
						public _typeId: any;
						public _objectId: any;
						public _hasNativeId: boolean;
						public _writeContext: com.fasterxml.jackson.core.json.JsonWriteContext;
						public writeEndObject(): void;
						public asParser(): com.fasterxml.jackson.core.JsonParser;
						public close(): void;
						public _append(param0: com.fasterxml.jackson.core.JsonToken, param1: any): void;
						public _appendRaw(param0: number, param1: any): void;
						public writeStartObject(): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: native.Array<number>, param2: number, param3: number): void;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.util.TokenBuffer;
						public isClosed(): boolean;
						public writeRawValue(param0: native.Array<string>, param1: number, param2: number): void;
						public append(param0: com.fasterxml.jackson.databind.util.TokenBuffer): com.fasterxml.jackson.databind.util.TokenBuffer;
						public writeBinary(param0: native.Array<number>): void;
						public writeBinary(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.InputStream, param2: number): number;
						public firstToken(): com.fasterxml.jackson.core.JsonToken;
						public _append(param0: com.fasterxml.jackson.core.JsonToken): void;
						public setFeatureMask(param0: number): com.fasterxml.jackson.core.JsonGenerator;
						public copyCurrentEvent(param0: com.fasterxml.jackson.core.JsonParser): void;
						public canWriteBinaryNatively(): boolean;
						public writeObject(param0: any): void;
						public writeRaw(param0: string, param1: number, param2: number): void;
						public constructor();
						public overrideStdFeatures(param0: number, param1: number): com.fasterxml.jackson.core.JsonGenerator;
						public writeBinary(param0: java.io.InputStream, param1: number): number;
						public getOutputContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public writeString(param0: com.fasterxml.jackson.core.SerializableString): void;
						public getOutputContext(): com.fasterxml.jackson.core.json.JsonWriteContext;
						public flush(): void;
						public writeRawValue(param0: com.fasterxml.jackson.core.SerializableString): void;
						public canWriteObjectId(): boolean;
						public toString(): string;
						public writeStartArray(param0: number): void;
						public getFeatureMask(): number;
						public writeRawUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public writeEndArray(): void;
						public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
						public canWriteTypeId(): boolean;
						public enable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						public forceUseOfBigDecimal(param0: boolean): com.fasterxml.jackson.databind.util.TokenBuffer;
						public writeRaw(param0: string): void;
						public constructor(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext);
						public useDefaultPrettyPrinter(): com.fasterxml.jackson.core.JsonGenerator;
						public writeStartArray(): void;
						public _appendValue(param0: com.fasterxml.jackson.core.JsonToken, param1: any): void;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeString(param0: native.Array<string>, param1: number, param2: number): void;
						public writeFieldName(param0: com.fasterxml.jackson.core.SerializableString): void;
						public writeNumber(param0: string): void;
						public writeBoolean(param0: boolean): void;
						public writeFieldName(param0: string): void;
						public asParser(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public asParser(param0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.JsonParser;
						public writeNumber(param0: java.math.BigInteger): void;
						public disable(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						public writeNull(): void;
						public _reportUnsupportedOperation(): void;
						public writeTree(param0: com.fasterxml.jackson.core.TreeNode): void;
						public writeRaw(param0: native.Array<string>, param1: number, param2: number): void;
						public writeNumber(param0: number): void;
						public constructor(param0: com.fasterxml.jackson.core.ObjectCodec, param1: boolean);
						public writeRawValue(param0: string): void;
						public writeTypeId(param0: any): void;
						public version(): com.fasterxml.jackson.core.Version;
						public writeUTF8String(param0: native.Array<number>, param1: number, param2: number): void;
						public constructor(param0: com.fasterxml.jackson.core.ObjectCodec);
						public constructor(param0: com.fasterxml.jackson.core.JsonParser);
						public writeObjectId(param0: any): void;
						public _appendValue(param0: com.fasterxml.jackson.core.JsonToken): void;
						public writeString(param0: string): void;
						public writeRaw(param0: com.fasterxml.jackson.core.SerializableString): void;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
						public writeBinary(param0: native.Array<number>, param1: number, param2: number): void;
						public copyCurrentStructure(param0: com.fasterxml.jackson.core.JsonParser): void;
						public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonGenerator;
						public writeRawValue(param0: string, param1: number, param2: number): void;
						public writeNumber(param0: java.math.BigDecimal): void;
					}
					export namespace TokenBuffer {
						export class Parser extends com.fasterxml.jackson.core.base.ParserMinimalBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.TokenBuffer.Parser>;
							public _codec: com.fasterxml.jackson.core.ObjectCodec;
							public _hasNativeTypeIds: boolean;
							public _hasNativeObjectIds: boolean;
							public _hasNativeIds: boolean;
							public _segment: com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public _segmentPtr: number;
							public _parsingContext: com.fasterxml.jackson.core.json.JsonReadContext;
							public _closed: boolean;
							public _byteBuilder: com.fasterxml.jackson.core.util.ByteArrayBuilder;
							public _location: com.fasterxml.jackson.core.JsonLocation;
							public getTextCharacters(): native.Array<string>;
							public close(): void;
							public getBinaryValue(): native.Array<number>;
							public overrideCurrentName(param0: string): void;
							public _handleEOF(): void;
							public constructor(param0: com.fasterxml.jackson.databind.util.TokenBuffer.Segment, param1: com.fasterxml.jackson.core.ObjectCodec, param2: boolean, param3: boolean);
							public hasTextCharacters(): boolean;
							public getObjectId(): any;
							public nextToken(): com.fasterxml.jackson.core.JsonToken;
							public getDecimalValue(): java.math.BigDecimal;
							public getLongValue(): number;
							public setLocation(param0: com.fasterxml.jackson.core.JsonLocation): void;
							public getBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant): native.Array<number>;
							public nextFieldName(param0: com.fasterxml.jackson.core.SerializableString): boolean;
							public _currentObject(): any;
							public getTypeId(): any;
							public getParsingContext(): com.fasterxml.jackson.core.JsonStreamContext;
							public canReadObjectId(): boolean;
							public peekNextToken(): com.fasterxml.jackson.core.JsonToken;
							public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
							public version(): com.fasterxml.jackson.core.Version;
							public constructor();
							public _checkIsNumber(): void;
							public getText(): string;
							public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
							public getTextOffset(): number;
							public nextFieldName(): string;
							public isClosed(): boolean;
							public getNumberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
							public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
							public getEmbeddedObject(): any;
							public constructor(param0: number);
							public getBigIntegerValue(): java.math.BigInteger;
							public getDoubleValue(): number;
							public getFloatValue(): number;
							public getNumberValue(): java.lang.Number;
							public getTextLength(): number;
							public readBinaryValue(param0: com.fasterxml.jackson.core.Base64Variant, param1: java.io.OutputStream): number;
							public getCurrentName(): string;
							public canReadTypeId(): boolean;
							public readBinaryValue(param0: java.io.OutputStream): number;
							public setCodec(param0: com.fasterxml.jackson.core.ObjectCodec): void;
							public getIntValue(): number;
						}
						export class Segment {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.TokenBuffer.Segment>;
							public static TOKENS_PER_SEGMENT: number;
							public _next: com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public _tokenTypes: number;
							public _tokens: native.Array<any>;
							public _nativeIds: java.util.TreeMap<java.lang.Integer,any>;
							public constructor();
							public append(param0: number, param1: com.fasterxml.jackson.core.JsonToken, param2: any, param3: any): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public appendRaw(param0: number, param1: number, param2: any): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public get(param0: number): any;
							public append(param0: number, param1: com.fasterxml.jackson.core.JsonToken): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public hasIds(): boolean;
							public findObjectId(param0: number): any;
							public append(param0: number, param1: com.fasterxml.jackson.core.JsonToken, param2: any, param3: any, param4: any): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public append(param0: number, param1: com.fasterxml.jackson.core.JsonToken, param2: any): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public rawType(param0: number): number;
							public findTypeId(param0: number): any;
							public appendRaw(param0: number, param1: number, param2: any, param3: any, param4: any): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public next(): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public type(param0: number): com.fasterxml.jackson.core.JsonToken;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class TypeKey {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.TypeKey>;
						public _hashCode: number;
						public _class: java.lang.Class<any>;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _isTyped: boolean;
						public static typedHash(param0: java.lang.Class<any>): number;
						public static typedHash(param0: com.fasterxml.jackson.databind.JavaType): number;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.JavaType, param1: boolean);
						public isTyped(): boolean;
						public constructor(param0: com.fasterxml.jackson.databind.util.TypeKey);
						public toString(): string;
						public resetTyped(param0: java.lang.Class<any>): void;
						public resetTyped(param0: com.fasterxml.jackson.databind.JavaType): void;
						public constructor(param0: java.lang.Class<any>, param1: boolean);
						public resetUntyped(param0: com.fasterxml.jackson.databind.JavaType): void;
						public resetUntyped(param0: java.lang.Class<any>): void;
						public static untypedHash(param0: java.lang.Class<any>): number;
						public static untypedHash(param0: com.fasterxml.jackson.databind.JavaType): number;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace fasterxml {
		export namespace jackson {
			export namespace databind {
				export namespace util {
					export class ViewMatcher {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ViewMatcher>;
						public static EMPTY: com.fasterxml.jackson.databind.util.ViewMatcher;
						public isVisibleForView(param0: java.lang.Class<any>): boolean;
						public constructor();
						public static construct(param0: native.Array<java.lang.Class<any>>): com.fasterxml.jackson.databind.util.ViewMatcher;
					}
					export namespace ViewMatcher {
						export class Multi extends com.fasterxml.jackson.databind.util.ViewMatcher {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ViewMatcher.Multi>;
							public constructor();
							public constructor(param0: native.Array<java.lang.Class<any>>);
							public isVisibleForView(param0: java.lang.Class<any>): boolean;
						}
						export class Single extends com.fasterxml.jackson.databind.util.ViewMatcher {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ViewMatcher.Single>;
							public constructor();
							public constructor(param0: java.lang.Class<any>);
							public isVisibleForView(param0: java.lang.Class<any>): boolean;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export class BuildConfig {
					public static class: java.lang.Class<com.yelp.fusion.client.BuildConfig>;
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace connection {
					export class YelpFusionApi {
						public static class: java.lang.Class<com.yelp.fusion.client.connection.YelpFusionApi>;
						/**
						 * Constructs a new instance of the com.yelp.fusion.client.connection.YelpFusionApi interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getBusinessSearch(param0: java.util.Map<string,string>): retrofit2.Call<com.yelp.fusion.client.models.SearchResponse>;
							getPhoneSearch(param0: string): retrofit2.Call<com.yelp.fusion.client.models.SearchResponse>;
							getTransactionSearch(param0: string, param1: java.util.Map<string,string>): retrofit2.Call<com.yelp.fusion.client.models.SearchResponse>;
							getBusiness(param0: string): retrofit2.Call<com.yelp.fusion.client.models.Business>;
							getBusinessReviews(param0: string, param1: string): retrofit2.Call<com.yelp.fusion.client.models.Reviews>;
							getAutocomplete(param0: java.util.Map<string,string>): retrofit2.Call<com.yelp.fusion.client.models.AutoComplete>;
						});
						public constructor();
						public getBusinessReviews(param0: string, param1: string): retrofit2.Call<com.yelp.fusion.client.models.Reviews>;
						public getTransactionSearch(param0: string, param1: java.util.Map<string,string>): retrofit2.Call<com.yelp.fusion.client.models.SearchResponse>;
						public getAutocomplete(param0: java.util.Map<string,string>): retrofit2.Call<com.yelp.fusion.client.models.AutoComplete>;
						public getBusiness(param0: string): retrofit2.Call<com.yelp.fusion.client.models.Business>;
						public getBusinessSearch(param0: java.util.Map<string,string>): retrofit2.Call<com.yelp.fusion.client.models.SearchResponse>;
						public getPhoneSearch(param0: string): retrofit2.Call<com.yelp.fusion.client.models.SearchResponse>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace connection {
					export class YelpFusionApiFactory {
						public static class: java.lang.Class<com.yelp.fusion.client.connection.YelpFusionApiFactory>;
						public constructor();
						public getAPIBaseUrl(): string;
						public createAPI(param0: string): com.yelp.fusion.client.connection.YelpFusionApi;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace connection {
					export namespace interceptors {
						export class ApiKeyInterceptor extends okhttp3.Interceptor {
							public static class: java.lang.Class<com.yelp.fusion.client.connection.interceptors.ApiKeyInterceptor>;
							public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
							public constructor(param0: com.yelp.fusion.client.models.ApiKey);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace exception {
					export class ErrorHandlingInterceptor extends okhttp3.Interceptor {
						public static class: java.lang.Class<com.yelp.fusion.client.exception.ErrorHandlingInterceptor>;
						public constructor();
						public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace exception {
					export namespace exceptions {
						export class UnexpectedAPIError extends com.yelp.fusion.client.exception.exceptions.YelpFusionError {
							public static class: java.lang.Class<com.yelp.fusion.client.exception.exceptions.UnexpectedAPIError>;
							public constructor(param0: number, param1: string, param2: string, param3: string);
							public constructor(param0: number, param1: string);
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace exception {
					export namespace exceptions {
						export abstract class YelpFusionError {
							public static class: java.lang.Class<com.yelp.fusion.client.exception.exceptions.YelpFusionError>;
							public getCode(): string;
							public getResponseCode(): number;
							public constructor(param0: number, param1: string, param2: string, param3: string);
							public getDescription(): string;
							public getMessage(): string;
						}
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class ApiKey {
						public static class: java.lang.Class<com.yelp.fusion.client.models.ApiKey>;
						public getApiKey(): string;
						public getTokenType(): string;
						public constructor(param0: string, param1: string);
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class AutoComplete {
						public static class: java.lang.Class<com.yelp.fusion.client.models.AutoComplete>;
						public setBusinesses(param0: java.util.ArrayList<com.yelp.fusion.client.models.Business>): void;
						public constructor();
						public setTerms(param0: java.util.ArrayList<com.yelp.fusion.client.models.Term>): void;
						public getBusinesses(): java.util.ArrayList<com.yelp.fusion.client.models.Business>;
						public getTerms(): java.util.ArrayList<com.yelp.fusion.client.models.Term>;
						public setCategories(param0: java.util.ArrayList<com.yelp.fusion.client.models.Category>): void;
						public getCategories(): java.util.ArrayList<com.yelp.fusion.client.models.Category>;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Business {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Business>;
						public setHours(param0: java.util.ArrayList<com.yelp.fusion.client.models.Hour>): void;
						public setDistance(param0: number): void;
						public setId(param0: string): void;
						public getPhone(): string;
						public getReviewCount(): number;
						public getPhotos(): java.util.ArrayList<string>;
						public getPrice(): string;
						public getHours(): java.util.ArrayList<com.yelp.fusion.client.models.Hour>;
						public getName(): string;
						public getText(): string;
						public setReviewCount(param0: number): void;
						public setCoordinates(param0: com.yelp.fusion.client.models.Coordinates): void;
						public setIsClosed(param0: boolean): void;
						public getId(): string;
						public getDistance(): number;
						public constructor();
						public setLocation(param0: com.yelp.fusion.client.models.Location): void;
						public setRating(param0: number): void;
						public setName(param0: string): void;
						public getIsClosed(): boolean;
						public getDisplayPhone(): string;
						public getUrl(): string;
						public setPhotos(param0: java.util.ArrayList<string>): void;
						public setImageUrl(param0: string): void;
						public setUrl(param0: string): void;
						public setPrice(param0: string): void;
						public getRating(): number;
						public getCoordinates(): com.yelp.fusion.client.models.Coordinates;
						public getLocation(): com.yelp.fusion.client.models.Location;
						public setText(param0: string): void;
						public setCategories(param0: java.util.ArrayList<com.yelp.fusion.client.models.Category>): void;
						public setPhone(param0: string): void;
						public getCategories(): java.util.ArrayList<com.yelp.fusion.client.models.Category>;
						public getIsClaimed(): boolean;
						public getImageUrl(): string;
						public setIsClaimed(param0: boolean): void;
						public setDisplayPhone(param0: string): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Category {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Category>;
						public getAlias(): string;
						public constructor();
						public setTitle(param0: string): void;
						public setAlias(param0: string): void;
						public getTitle(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Center {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Center>;
						public getLatitude(): number;
						public getLongitude(): number;
						public constructor();
						public setLatitude(param0: number): void;
						public setLongitude(param0: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Coordinates {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Coordinates>;
						public getLatitude(): number;
						public getLongitude(): number;
						public constructor();
						public setLatitude(param0: number): void;
						public setLongitude(param0: number): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Hour {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Hour>;
						public constructor();
						public setHoursType(param0: string): void;
						public setIsOpenNow(param0: boolean): void;
						public getHoursType(): string;
						public getIsOpenNow(): boolean;
						public getOpen(): java.util.ArrayList<com.yelp.fusion.client.models.Open>;
						public setOpen(param0: java.util.ArrayList<com.yelp.fusion.client.models.Open>): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Location {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Location>;
						public setAddress2(param0: string): void;
						public constructor();
						public setAddress3(param0: string): void;
						public setCity(param0: string): void;
						public setCrossStreets(param0: string): void;
						public getAddress3(): string;
						public getAddress1(): string;
						public setCountry(param0: string): void;
						public getCountry(): string;
						public getState(): string;
						public getCity(): string;
						public getDisplayAddress(): java.util.ArrayList<string>;
						public getCrossStreets(): string;
						public getAddress2(): string;
						public setZipCode(param0: string): void;
						public setDisplayAddress(param0: java.util.ArrayList<string>): void;
						public getZipCode(): string;
						public setAddress1(param0: string): void;
						public setState(param0: string): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Open {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Open>;
						public setStart(param0: string): void;
						public constructor();
						public getEnd(): string;
						public getDay(): number;
						public setIsOvernight(param0: boolean): void;
						public getStart(): string;
						public setDay(param0: number): void;
						public getIsOvernight(): boolean;
						public setEnd(param0: string): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Region {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Region>;
						public constructor();
						public setCenter(param0: com.yelp.fusion.client.models.Center): void;
						public getCenter(): com.yelp.fusion.client.models.Center;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Review {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Review>;
						public getRating(): number;
						public getUser(): com.yelp.fusion.client.models.User;
						public constructor();
						public setRating(param0: number): void;
						public setText(param0: string): void;
						public setUser(param0: com.yelp.fusion.client.models.User): void;
						public getTimeCreated(): string;
						public setTimeCreated(param0: string): void;
						public getUrl(): string;
						public getText(): string;
						public setUrl(param0: string): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Reviews {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Reviews>;
						public getReviews(): java.util.ArrayList<com.yelp.fusion.client.models.Review>;
						public constructor();
						public getTotal(): number;
						public setTotal(param0: number): void;
						public setReviews(param0: java.util.ArrayList<com.yelp.fusion.client.models.Review>): void;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class SearchResponse {
						public static class: java.lang.Class<com.yelp.fusion.client.models.SearchResponse>;
						public setBusinesses(param0: java.util.ArrayList<com.yelp.fusion.client.models.Business>): void;
						public constructor();
						public setRegion(param0: com.yelp.fusion.client.models.Region): void;
						public getBusinesses(): java.util.ArrayList<com.yelp.fusion.client.models.Business>;
						public getTotal(): number;
						public setTotal(param0: number): void;
						public getRegion(): com.yelp.fusion.client.models.Region;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class Term {
						public static class: java.lang.Class<com.yelp.fusion.client.models.Term>;
						public constructor();
						public setText(param0: string): void;
						public getText(): string;
					}
				}
			}
		}
	}
}

declare namespace com {
	export namespace yelp {
		export namespace fusion {
			export namespace client {
				export namespace models {
					export class User {
						public static class: java.lang.Class<com.yelp.fusion.client.models.User>;
						public constructor();
						public setName(param0: string): void;
						public setImageUrl(param0: string): void;
						public getName(): string;
						public getImageUrl(): string;
					}
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export class Address {
		public static class: java.lang.Class<okhttp3.Address>;
		public proxy(): java.net.Proxy;
		public equals(param0: any): boolean;
		public constructor(param0: string, param1: number, param2: okhttp3.Dns, param3: javax.net.SocketFactory, param4: javax.net.ssl.SSLSocketFactory, param5: javax.net.ssl.HostnameVerifier, param6: okhttp3.CertificatePinner, param7: okhttp3.Authenticator, param8: java.net.Proxy, param9: java.util.List<okhttp3.Protocol>, param10: java.util.List<okhttp3.ConnectionSpec>, param11: java.net.ProxySelector);
		public proxySelector(): java.net.ProxySelector;
		public sslSocketFactory(): javax.net.ssl.SSLSocketFactory;
		public url(): okhttp3.HttpUrl;
		public certificatePinner(): okhttp3.CertificatePinner;
		public toString(): string;
		public protocols(): java.util.List<okhttp3.Protocol>;
		public socketFactory(): javax.net.SocketFactory;
		public dns(): okhttp3.Dns;
		public proxyAuthenticator(): okhttp3.Authenticator;
		public hostnameVerifier(): javax.net.ssl.HostnameVerifier;
		public hashCode(): number;
		public connectionSpecs(): java.util.List<okhttp3.ConnectionSpec>;
	}
}

declare namespace okhttp3 {
	export class Authenticator {
		public static class: java.lang.Class<okhttp3.Authenticator>;
		/**
		 * Constructs a new instance of the okhttp3.Authenticator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			authenticate(param0: okhttp3.Route, param1: okhttp3.Response): okhttp3.Request;
			<clinit>(): void;
		});
		public constructor();
		public static NONE: okhttp3.Authenticator;
		public authenticate(param0: okhttp3.Route, param1: okhttp3.Response): okhttp3.Request;
	}
}

declare namespace okhttp3 {
	export class Cache {
		public static class: java.lang.Class<okhttp3.Cache>;
		public close(): void;
		public directory(): java.io.File;
		public constructor(param0: java.io.File, param1: number);
		public static key(param0: okhttp3.HttpUrl): string;
		public writeAbortCount(): number;
		public evictAll(): void;
		public delete(): void;
		public isClosed(): boolean;
		public networkCount(): number;
		public requestCount(): number;
		public flush(): void;
		public initialize(): void;
		public size(): number;
		public writeSuccessCount(): number;
		public hitCount(): number;
		public urls(): java.util.Iterator<string>;
		public maxSize(): number;
	}
	export namespace Cache {
		export class CacheRequestImpl extends okhttp3.internal.cache.CacheRequest {
			public static class: java.lang.Class<okhttp3.Cache.CacheRequestImpl>;
			public body(): okio.Sink;
			public abort(): void;
			public constructor(param0: okhttp3.Cache, param1: okhttp3.internal.cache.DiskLruCache.Editor);
		}
		export class CacheResponseBody extends okhttp3.ResponseBody {
			public static class: java.lang.Class<okhttp3.Cache.CacheResponseBody>;
			public contentLength(): number;
			public source(): okio.BufferedSource;
			public contentType(): okhttp3.MediaType;
			public constructor();
			public constructor(param0: okhttp3.internal.cache.DiskLruCache.Snapshot, param1: string, param2: string);
		}
		export class Entry {
			public static class: java.lang.Class<okhttp3.Cache.Entry>;
			public matches(param0: okhttp3.Request, param1: okhttp3.Response): boolean;
			public constructor(param0: okhttp3.Response);
			public constructor(param0: okio.Source);
			public response(param0: okhttp3.internal.cache.DiskLruCache.Snapshot): okhttp3.Response;
			public writeTo(param0: okhttp3.internal.cache.DiskLruCache.Editor): void;
		}
	}
}

declare namespace okhttp3 {
	export class CacheControl {
		public static class: java.lang.Class<okhttp3.CacheControl>;
		public static FORCE_NETWORK: okhttp3.CacheControl;
		public static FORCE_CACHE: okhttp3.CacheControl;
		public maxStaleSeconds(): number;
		public mustRevalidate(): boolean;
		public static parse(param0: okhttp3.Headers): okhttp3.CacheControl;
		public toString(): string;
		public minFreshSeconds(): number;
		public onlyIfCached(): boolean;
		public noCache(): boolean;
		public noTransform(): boolean;
		public isPrivate(): boolean;
		public sMaxAgeSeconds(): number;
		public noStore(): boolean;
		public maxAgeSeconds(): number;
		public isPublic(): boolean;
	}
	export namespace CacheControl {
		export class Builder {
			public static class: java.lang.Class<okhttp3.CacheControl.Builder>;
			public noCache(): okhttp3.CacheControl.Builder;
			public maxStale(param0: number, param1: java.util.concurrent.TimeUnit): okhttp3.CacheControl.Builder;
			public onlyIfCached(): okhttp3.CacheControl.Builder;
			public minFresh(param0: number, param1: java.util.concurrent.TimeUnit): okhttp3.CacheControl.Builder;
			public maxAge(param0: number, param1: java.util.concurrent.TimeUnit): okhttp3.CacheControl.Builder;
			public constructor();
			public build(): okhttp3.CacheControl;
			public noStore(): okhttp3.CacheControl.Builder;
			public noTransform(): okhttp3.CacheControl.Builder;
		}
	}
}

declare namespace okhttp3 {
	export class Call {
		public static class: java.lang.Class<okhttp3.Call>;
		/**
		 * Constructs a new instance of the okhttp3.Call interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			request(): okhttp3.Request;
			execute(): okhttp3.Response;
			enqueue(param0: okhttp3.Callback): void;
			cancel(): void;
			isExecuted(): boolean;
			isCanceled(): boolean;
			clone(): okhttp3.Call;
		});
		public constructor();
		public isExecuted(): boolean;
		public clone(): okhttp3.Call;
		public request(): okhttp3.Request;
		public execute(): okhttp3.Response;
		public isCanceled(): boolean;
		public enqueue(param0: okhttp3.Callback): void;
		public cancel(): void;
	}
	export namespace Call {
		export class Factory {
			public static class: java.lang.Class<okhttp3.Call.Factory>;
			/**
			 * Constructs a new instance of the okhttp3.Call$Factory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				newCall(param0: okhttp3.Request): okhttp3.Call;
			});
			public constructor();
			public newCall(param0: okhttp3.Request): okhttp3.Call;
		}
	}
}

declare namespace okhttp3 {
	export class Callback {
		public static class: java.lang.Class<okhttp3.Callback>;
		/**
		 * Constructs a new instance of the okhttp3.Callback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			onFailure(param0: okhttp3.Call, param1: java.io.IOException): void;
			onResponse(param0: okhttp3.Call, param1: okhttp3.Response): void;
		});
		public constructor();
		public onResponse(param0: okhttp3.Call, param1: okhttp3.Response): void;
		public onFailure(param0: okhttp3.Call, param1: java.io.IOException): void;
	}
}

declare namespace okhttp3 {
	export class CertificatePinner {
		public static class: java.lang.Class<okhttp3.CertificatePinner>;
		public static DEFAULT: okhttp3.CertificatePinner;
		public equals(param0: any): boolean;
		public static pin(param0: java.security.cert.Certificate): string;
		public check(param0: string, param1: native.Array<java.security.cert.Certificate>): void;
		public hashCode(): number;
		public check(param0: string, param1: java.util.List<java.security.cert.Certificate>): void;
	}
	export namespace CertificatePinner {
		export class Builder {
			public static class: java.lang.Class<okhttp3.CertificatePinner.Builder>;
			public build(): okhttp3.CertificatePinner;
			public add(param0: string, param1: native.Array<string>): okhttp3.CertificatePinner.Builder;
			public constructor();
		}
		export class Pin {
			public static class: java.lang.Class<okhttp3.CertificatePinner.Pin>;
			public equals(param0: any): boolean;
			public toString(): string;
			public hashCode(): number;
		}
	}
}

declare namespace okhttp3 {
	export class Challenge {
		public static class: java.lang.Class<okhttp3.Challenge>;
		public equals(param0: any): boolean;
		public scheme(): string;
		public hashCode(): number;
		public toString(): string;
		public constructor(param0: string, param1: string);
		public realm(): string;
	}
}

declare namespace okhttp3 {
	export class CipherSuite {
		public static class: java.lang.Class<okhttp3.CipherSuite>;
		public static TLS_RSA_WITH_NULL_MD5: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_NULL_SHA: okhttp3.CipherSuite;
		public static TLS_RSA_EXPORT_WITH_RC4_40_MD5: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_RC4_128_MD5: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_RC4_128_SHA: okhttp3.CipherSuite;
		public static TLS_RSA_EXPORT_WITH_DES40_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_DES_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_DES_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_DES_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DH_anon_EXPORT_WITH_RC4_40_MD5: okhttp3.CipherSuite;
		public static TLS_DH_anon_WITH_RC4_128_MD5: okhttp3.CipherSuite;
		public static TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DH_anon_WITH_DES_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_KRB5_WITH_DES_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_KRB5_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_KRB5_WITH_RC4_128_SHA: okhttp3.CipherSuite;
		public static TLS_KRB5_WITH_DES_CBC_MD5: okhttp3.CipherSuite;
		public static TLS_KRB5_WITH_3DES_EDE_CBC_MD5: okhttp3.CipherSuite;
		public static TLS_KRB5_WITH_RC4_128_MD5: okhttp3.CipherSuite;
		public static TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA: okhttp3.CipherSuite;
		public static TLS_KRB5_EXPORT_WITH_RC4_40_SHA: okhttp3.CipherSuite;
		public static TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5: okhttp3.CipherSuite;
		public static TLS_KRB5_EXPORT_WITH_RC4_40_MD5: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DH_anon_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DH_anon_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_NULL_SHA256: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_AES_128_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_AES_256_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_CAMELLIA_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_DH_anon_WITH_AES_128_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_DH_anon_WITH_AES_256_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_CAMELLIA_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_PSK_WITH_RC4_128_SHA: okhttp3.CipherSuite;
		public static TLS_PSK_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_PSK_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_PSK_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_SEED_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_AES_128_GCM_SHA256: okhttp3.CipherSuite;
		public static TLS_RSA_WITH_AES_256_GCM_SHA384: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: okhttp3.CipherSuite;
		public static TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: okhttp3.CipherSuite;
		public static TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: okhttp3.CipherSuite;
		public static TLS_DH_anon_WITH_AES_128_GCM_SHA256: okhttp3.CipherSuite;
		public static TLS_DH_anon_WITH_AES_256_GCM_SHA384: okhttp3.CipherSuite;
		public static TLS_EMPTY_RENEGOTIATION_INFO_SCSV: okhttp3.CipherSuite;
		public static TLS_FALLBACK_SCSV: okhttp3.CipherSuite;
		public static TLS_ECDH_ECDSA_WITH_NULL_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_ECDSA_WITH_RC4_128_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_NULL_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_RSA_WITH_NULL_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_RSA_WITH_RC4_128_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_NULL_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_RC4_128_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_anon_WITH_NULL_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_anon_WITH_RC4_128_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_anon_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDH_anon_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: okhttp3.CipherSuite;
		public static TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: okhttp3.CipherSuite;
		public static TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: okhttp3.CipherSuite;
		public static TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: okhttp3.CipherSuite;
		public static TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: okhttp3.CipherSuite;
		public static TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: okhttp3.CipherSuite;
		public static TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: okhttp3.CipherSuite;
		public static TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: okhttp3.CipherSuite;
		public static TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: okhttp3.CipherSuite;
		public static TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: okhttp3.CipherSuite;
		public static TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: okhttp3.CipherSuite;
		public javaName(): string;
		public static forJavaName(param0: string): okhttp3.CipherSuite;
		public toString(): string;
	}
}

declare namespace okhttp3 {
	export class Connection {
		public static class: java.lang.Class<okhttp3.Connection>;
		/**
		 * Constructs a new instance of the okhttp3.Connection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			route(): okhttp3.Route;
			socket(): java.net.Socket;
			handshake(): okhttp3.Handshake;
			protocol(): okhttp3.Protocol;
		});
		public constructor();
		public route(): okhttp3.Route;
		public protocol(): okhttp3.Protocol;
		public handshake(): okhttp3.Handshake;
		public socket(): java.net.Socket;
	}
}

declare namespace okhttp3 {
	export class ConnectionPool {
		public static class: java.lang.Class<okhttp3.ConnectionPool>;
		public constructor();
		public connectionCount(): number;
		public evictAll(): void;
		public idleConnectionCount(): number;
		public constructor(param0: number, param1: number, param2: java.util.concurrent.TimeUnit);
	}
}

declare namespace okhttp3 {
	export class ConnectionSpec {
		public static class: java.lang.Class<okhttp3.ConnectionSpec>;
		public static MODERN_TLS: okhttp3.ConnectionSpec;
		public static COMPATIBLE_TLS: okhttp3.ConnectionSpec;
		public static CLEARTEXT: okhttp3.ConnectionSpec;
		public cipherSuites(): java.util.List<okhttp3.CipherSuite>;
		public equals(param0: any): boolean;
		public tlsVersions(): java.util.List<okhttp3.TlsVersion>;
		public supportsTlsExtensions(): boolean;
		public hashCode(): number;
		public isCompatible(param0: javax.net.ssl.SSLSocket): boolean;
		public isTls(): boolean;
		public toString(): string;
	}
	export namespace ConnectionSpec {
		export class Builder {
			public static class: java.lang.Class<okhttp3.ConnectionSpec.Builder>;
			public tlsVersions(param0: native.Array<string>): okhttp3.ConnectionSpec.Builder;
			public cipherSuites(param0: native.Array<string>): okhttp3.ConnectionSpec.Builder;
			public build(): okhttp3.ConnectionSpec;
			public constructor(param0: okhttp3.ConnectionSpec);
			public cipherSuites(param0: native.Array<okhttp3.CipherSuite>): okhttp3.ConnectionSpec.Builder;
			public supportsTlsExtensions(param0: boolean): okhttp3.ConnectionSpec.Builder;
			public allEnabledCipherSuites(): okhttp3.ConnectionSpec.Builder;
			public tlsVersions(param0: native.Array<okhttp3.TlsVersion>): okhttp3.ConnectionSpec.Builder;
			public allEnabledTlsVersions(): okhttp3.ConnectionSpec.Builder;
		}
	}
}

declare namespace okhttp3 {
	export class Cookie {
		public static class: java.lang.Class<okhttp3.Cookie>;
		public domain(): string;
		public equals(param0: any): boolean;
		public matches(param0: okhttp3.HttpUrl): boolean;
		public static parseAll(param0: okhttp3.HttpUrl, param1: okhttp3.Headers): java.util.List<okhttp3.Cookie>;
		public toString(): string;
		public persistent(): boolean;
		public httpOnly(): boolean;
		public static parse(param0: okhttp3.HttpUrl, param1: string): okhttp3.Cookie;
		public hostOnly(): boolean;
		public expiresAt(): number;
		public hashCode(): number;
		public name(): string;
		public path(): string;
		public secure(): boolean;
		public value(): string;
	}
	export namespace Cookie {
		export class Builder {
			public static class: java.lang.Class<okhttp3.Cookie.Builder>;
			public domain(param0: string): okhttp3.Cookie.Builder;
			public hostOnlyDomain(param0: string): okhttp3.Cookie.Builder;
			public value(param0: string): okhttp3.Cookie.Builder;
			public httpOnly(): okhttp3.Cookie.Builder;
			public secure(): okhttp3.Cookie.Builder;
			public expiresAt(param0: number): okhttp3.Cookie.Builder;
			public build(): okhttp3.Cookie;
			public name(param0: string): okhttp3.Cookie.Builder;
			public constructor();
			public path(param0: string): okhttp3.Cookie.Builder;
		}
	}
}

declare namespace okhttp3 {
	export class CookieJar {
		public static class: java.lang.Class<okhttp3.CookieJar>;
		/**
		 * Constructs a new instance of the okhttp3.CookieJar interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			saveFromResponse(param0: okhttp3.HttpUrl, param1: java.util.List<okhttp3.Cookie>): void;
			loadForRequest(param0: okhttp3.HttpUrl): java.util.List<okhttp3.Cookie>;
			<clinit>(): void;
		});
		public constructor();
		public static NO_COOKIES: okhttp3.CookieJar;
		public loadForRequest(param0: okhttp3.HttpUrl): java.util.List<okhttp3.Cookie>;
		public saveFromResponse(param0: okhttp3.HttpUrl, param1: java.util.List<okhttp3.Cookie>): void;
	}
}

declare namespace okhttp3 {
	export class Credentials {
		public static class: java.lang.Class<okhttp3.Credentials>;
		public static basic(param0: string, param1: string, param2: java.nio.charset.Charset): string;
		public static basic(param0: string, param1: string): string;
	}
}

declare namespace okhttp3 {
	export class Dispatcher {
		public static class: java.lang.Class<okhttp3.Dispatcher>;
		public constructor();
		public setMaxRequestsPerHost(param0: number): void;
		public constructor(param0: java.util.concurrent.ExecutorService);
		public queuedCallsCount(): number;
		public runningCallsCount(): number;
		public runningCalls(): java.util.List<okhttp3.Call>;
		public cancelAll(): void;
		public queuedCalls(): java.util.List<okhttp3.Call>;
		public setMaxRequests(param0: number): void;
		public getMaxRequestsPerHost(): number;
		public executorService(): java.util.concurrent.ExecutorService;
		public setIdleCallback(param0: java.lang.Runnable): void;
		public getMaxRequests(): number;
	}
}

declare namespace okhttp3 {
	export class Dns {
		public static class: java.lang.Class<okhttp3.Dns>;
		/**
		 * Constructs a new instance of the okhttp3.Dns interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			lookup(param0: string): java.util.List<java.net.InetAddress>;
			<clinit>(): void;
		});
		public constructor();
		public static SYSTEM: okhttp3.Dns;
		public lookup(param0: string): java.util.List<java.net.InetAddress>;
	}
}

declare namespace okhttp3 {
	export class FormBody extends okhttp3.RequestBody {
		public static class: java.lang.Class<okhttp3.FormBody>;
		public value(param0: number): string;
		public encodedValue(param0: number): string;
		public name(param0: number): string;
		public size(): number;
		public encodedName(param0: number): string;
		public contentType(): okhttp3.MediaType;
		public writeTo(param0: okio.BufferedSink): void;
		public contentLength(): number;
	}
	export namespace FormBody {
		export class Builder {
			public static class: java.lang.Class<okhttp3.FormBody.Builder>;
			public addEncoded(param0: string, param1: string): okhttp3.FormBody.Builder;
			public constructor();
			public add(param0: string, param1: string): okhttp3.FormBody.Builder;
			public build(): okhttp3.FormBody;
		}
	}
}

declare namespace okhttp3 {
	export class Handshake {
		public static class: java.lang.Class<okhttp3.Handshake>;
		public equals(param0: any): boolean;
		public static get(param0: javax.net.ssl.SSLSession): okhttp3.Handshake;
		public static get(param0: okhttp3.TlsVersion, param1: okhttp3.CipherSuite, param2: java.util.List<java.security.cert.Certificate>, param3: java.util.List<java.security.cert.Certificate>): okhttp3.Handshake;
		public hashCode(): number;
		public localCertificates(): java.util.List<java.security.cert.Certificate>;
		public localPrincipal(): java.security.Principal;
		public tlsVersion(): okhttp3.TlsVersion;
		public peerCertificates(): java.util.List<java.security.cert.Certificate>;
		public peerPrincipal(): java.security.Principal;
		public cipherSuite(): okhttp3.CipherSuite;
	}
}

declare namespace okhttp3 {
	export class Headers {
		public static class: java.lang.Class<okhttp3.Headers>;
		public value(param0: number): string;
		public equals(param0: any): boolean;
		public newBuilder(): okhttp3.Headers.Builder;
		public toString(): string;
		public get(param0: string): string;
		public values(param0: string): java.util.List<string>;
		public names(): java.util.Set<string>;
		public static of(param0: java.util.Map<string,string>): okhttp3.Headers;
		public name(param0: number): string;
		public size(): number;
		public hashCode(): number;
		public toMultimap(): java.util.Map<string,java.util.List<string>>;
		public getDate(param0: string): java.util.Date;
		public static of(param0: native.Array<string>): okhttp3.Headers;
	}
	export namespace Headers {
		export class Builder {
			public static class: java.lang.Class<okhttp3.Headers.Builder>;
			public get(param0: string): string;
			public build(): okhttp3.Headers;
			public add(param0: string, param1: string): okhttp3.Headers.Builder;
			public removeAll(param0: string): okhttp3.Headers.Builder;
			public set(param0: string, param1: string): okhttp3.Headers.Builder;
			public constructor();
			public add(param0: string): okhttp3.Headers.Builder;
		}
	}
}

declare namespace okhttp3 {
	export class HttpUrl {
		public static class: java.lang.Class<okhttp3.HttpUrl>;
		public static get(param0: java.net.URI): okhttp3.HttpUrl;
		public equals(param0: any): boolean;
		public queryParameterName(param0: number): string;
		public static defaultPort(param0: string): number;
		public scheme(): string;
		public queryParameterNames(): java.util.Set<string>;
		public encodedPassword(): string;
		public queryParameter(param0: string): string;
		public query(): string;
		public password(): string;
		public hashCode(): number;
		public resolve(param0: string): okhttp3.HttpUrl;
		public pathSize(): number;
		public isHttps(): boolean;
		public encodedPathSegments(): java.util.List<string>;
		public newBuilder(): okhttp3.HttpUrl.Builder;
		public port(): number;
		public encodedQuery(): string;
		public encodedPath(): string;
		public encodedFragment(): string;
		public redact(): string;
		public fragment(): string;
		public toString(): string;
		public uri(): java.net.URI;
		public queryParameterValue(param0: number): string;
		public encodedUsername(): string;
		public queryParameterValues(param0: string): java.util.List<string>;
		public newBuilder(param0: string): okhttp3.HttpUrl.Builder;
		public host(): string;
		public static get(param0: java.net.URL): okhttp3.HttpUrl;
		public pathSegments(): java.util.List<string>;
		public static parse(param0: string): okhttp3.HttpUrl;
		public url(): java.net.URL;
		public querySize(): number;
		public username(): string;
	}
	export namespace HttpUrl {
		export class Builder {
			public static class: java.lang.Class<okhttp3.HttpUrl.Builder>;
			public addPathSegment(param0: string): okhttp3.HttpUrl.Builder;
			public addEncodedPathSegment(param0: string): okhttp3.HttpUrl.Builder;
			public setEncodedQueryParameter(param0: string, param1: string): okhttp3.HttpUrl.Builder;
			public setQueryParameter(param0: string, param1: string): okhttp3.HttpUrl.Builder;
			public encodedFragment(param0: string): okhttp3.HttpUrl.Builder;
			public username(param0: string): okhttp3.HttpUrl.Builder;
			public addPathSegments(param0: string): okhttp3.HttpUrl.Builder;
			public encodedPath(param0: string): okhttp3.HttpUrl.Builder;
			public encodedPassword(param0: string): okhttp3.HttpUrl.Builder;
			public addEncodedPathSegments(param0: string): okhttp3.HttpUrl.Builder;
			public encodedQuery(param0: string): okhttp3.HttpUrl.Builder;
			public host(param0: string): okhttp3.HttpUrl.Builder;
			public removeAllEncodedQueryParameters(param0: string): okhttp3.HttpUrl.Builder;
			public setEncodedPathSegment(param0: number, param1: string): okhttp3.HttpUrl.Builder;
			public constructor();
			public encodedUsername(param0: string): okhttp3.HttpUrl.Builder;
			public password(param0: string): okhttp3.HttpUrl.Builder;
			public port(param0: number): okhttp3.HttpUrl.Builder;
			public toString(): string;
			public addQueryParameter(param0: string, param1: string): okhttp3.HttpUrl.Builder;
			public addEncodedQueryParameter(param0: string, param1: string): okhttp3.HttpUrl.Builder;
			public query(param0: string): okhttp3.HttpUrl.Builder;
			public setPathSegment(param0: number, param1: string): okhttp3.HttpUrl.Builder;
			public removeAllQueryParameters(param0: string): okhttp3.HttpUrl.Builder;
			public scheme(param0: string): okhttp3.HttpUrl.Builder;
			public removePathSegment(param0: number): okhttp3.HttpUrl.Builder;
			public fragment(param0: string): okhttp3.HttpUrl.Builder;
			public build(): okhttp3.HttpUrl;
		}
		export namespace Builder {
			export class ParseResult {
				public static class: java.lang.Class<okhttp3.HttpUrl.Builder.ParseResult>;
				public static SUCCESS: okhttp3.HttpUrl.Builder.ParseResult;
				public static MISSING_SCHEME: okhttp3.HttpUrl.Builder.ParseResult;
				public static UNSUPPORTED_SCHEME: okhttp3.HttpUrl.Builder.ParseResult;
				public static INVALID_PORT: okhttp3.HttpUrl.Builder.ParseResult;
				public static INVALID_HOST: okhttp3.HttpUrl.Builder.ParseResult;
				public static values(): native.Array<okhttp3.HttpUrl.Builder.ParseResult>;
				public static valueOf(param0: string): okhttp3.HttpUrl.Builder.ParseResult;
			}
		}
	}
}

declare namespace okhttp3 {
	export class Interceptor {
		public static class: java.lang.Class<okhttp3.Interceptor>;
		/**
		 * Constructs a new instance of the okhttp3.Interceptor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
		});
		public constructor();
		public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
	}
	export namespace Interceptor {
		export class Chain {
			public static class: java.lang.Class<okhttp3.Interceptor.Chain>;
			/**
			 * Constructs a new instance of the okhttp3.Interceptor$Chain interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				request(): okhttp3.Request;
				proceed(param0: okhttp3.Request): okhttp3.Response;
				connection(): okhttp3.Connection;
			});
			public constructor();
			public request(): okhttp3.Request;
			public proceed(param0: okhttp3.Request): okhttp3.Response;
			public connection(): okhttp3.Connection;
		}
	}
}

declare namespace okhttp3 {
	export class MediaType {
		public static class: java.lang.Class<okhttp3.MediaType>;
		public type(): string;
		public charset(): java.nio.charset.Charset;
		public equals(param0: any): boolean;
		public subtype(): string;
		public charset(param0: java.nio.charset.Charset): java.nio.charset.Charset;
		public hashCode(): number;
		public static parse(param0: string): okhttp3.MediaType;
		public toString(): string;
	}
}

declare namespace okhttp3 {
	export class MultipartBody extends okhttp3.RequestBody {
		public static class: java.lang.Class<okhttp3.MultipartBody>;
		public static MIXED: okhttp3.MediaType;
		public static ALTERNATIVE: okhttp3.MediaType;
		public static DIGEST: okhttp3.MediaType;
		public static PARALLEL: okhttp3.MediaType;
		public static FORM: okhttp3.MediaType;
		public boundary(): string;
		public size(): number;
		public parts(): java.util.List<okhttp3.MultipartBody.Part>;
		public type(): okhttp3.MediaType;
		public contentType(): okhttp3.MediaType;
		public writeTo(param0: okio.BufferedSink): void;
		public part(param0: number): okhttp3.MultipartBody.Part;
		public contentLength(): number;
	}
	export namespace MultipartBody {
		export class Builder {
			public static class: java.lang.Class<okhttp3.MultipartBody.Builder>;
			public setType(param0: okhttp3.MediaType): okhttp3.MultipartBody.Builder;
			public addPart(param0: okhttp3.MultipartBody.Part): okhttp3.MultipartBody.Builder;
			public build(): okhttp3.MultipartBody;
			public addPart(param0: okhttp3.Headers, param1: okhttp3.RequestBody): okhttp3.MultipartBody.Builder;
			public addPart(param0: okhttp3.RequestBody): okhttp3.MultipartBody.Builder;
			public constructor();
			public addFormDataPart(param0: string, param1: string): okhttp3.MultipartBody.Builder;
			public addFormDataPart(param0: string, param1: string, param2: okhttp3.RequestBody): okhttp3.MultipartBody.Builder;
			public constructor(param0: string);
		}
		export class Part {
			public static class: java.lang.Class<okhttp3.MultipartBody.Part>;
			public headers(): okhttp3.Headers;
			public static create(param0: okhttp3.Headers, param1: okhttp3.RequestBody): okhttp3.MultipartBody.Part;
			public static createFormData(param0: string, param1: string, param2: okhttp3.RequestBody): okhttp3.MultipartBody.Part;
			public static create(param0: okhttp3.RequestBody): okhttp3.MultipartBody.Part;
			public static createFormData(param0: string, param1: string): okhttp3.MultipartBody.Part;
			public body(): okhttp3.RequestBody;
		}
	}
}

declare namespace okhttp3 {
	export class OkHttpClient implements okhttp3.Call.Factory, okhttp3.WebSocket.Factory {
		public static class: java.lang.Class<okhttp3.OkHttpClient>;
		public proxy(): java.net.Proxy;
		public sslSocketFactory(): javax.net.ssl.SSLSocketFactory;
		public connectionPool(): okhttp3.ConnectionPool;
		public cache(): okhttp3.Cache;
		public certificatePinner(): okhttp3.CertificatePinner;
		public dispatcher(): okhttp3.Dispatcher;
		public protocols(): java.util.List<okhttp3.Protocol>;
		public dns(): okhttp3.Dns;
		public proxyAuthenticator(): okhttp3.Authenticator;
		public hostnameVerifier(): javax.net.ssl.HostnameVerifier;
		public connectTimeoutMillis(): number;
		public pingIntervalMillis(): number;
		public cookieJar(): okhttp3.CookieJar;
		public connectionSpecs(): java.util.List<okhttp3.ConnectionSpec>;
		public newBuilder(): okhttp3.OkHttpClient.Builder;
		public constructor();
		public proxySelector(): java.net.ProxySelector;
		public readTimeoutMillis(): number;
		public authenticator(): okhttp3.Authenticator;
		public followRedirects(): boolean;
		public interceptors(): java.util.List<okhttp3.Interceptor>;
		public writeTimeoutMillis(): number;
		public newWebSocket(param0: okhttp3.Request, param1: okhttp3.WebSocketListener): okhttp3.WebSocket;
		public followSslRedirects(): boolean;
		public socketFactory(): javax.net.SocketFactory;
		public retryOnConnectionFailure(): boolean;
		public networkInterceptors(): java.util.List<okhttp3.Interceptor>;
		public newCall(param0: okhttp3.Request): okhttp3.Call;
	}
	export namespace OkHttpClient {
		export class Builder {
			public static class: java.lang.Class<okhttp3.OkHttpClient.Builder>;
			public protocols(param0: java.util.List<okhttp3.Protocol>): okhttp3.OkHttpClient.Builder;
			public addInterceptor(param0: okhttp3.Interceptor): okhttp3.OkHttpClient.Builder;
			public connectionPool(param0: okhttp3.ConnectionPool): okhttp3.OkHttpClient.Builder;
			public interceptors(): java.util.List<okhttp3.Interceptor>;
			public readTimeout(param0: number, param1: java.util.concurrent.TimeUnit): okhttp3.OkHttpClient.Builder;
			public dns(param0: okhttp3.Dns): okhttp3.OkHttpClient.Builder;
			public pingInterval(param0: number, param1: java.util.concurrent.TimeUnit): okhttp3.OkHttpClient.Builder;
			public connectionSpecs(param0: java.util.List<okhttp3.ConnectionSpec>): okhttp3.OkHttpClient.Builder;
			public build(): okhttp3.OkHttpClient;
			public sslSocketFactory(param0: javax.net.ssl.SSLSocketFactory): okhttp3.OkHttpClient.Builder;
			public proxyAuthenticator(param0: okhttp3.Authenticator): okhttp3.OkHttpClient.Builder;
			public followRedirects(param0: boolean): okhttp3.OkHttpClient.Builder;
			public networkInterceptors(): java.util.List<okhttp3.Interceptor>;
			public cache(param0: okhttp3.Cache): okhttp3.OkHttpClient.Builder;
			public sslSocketFactory(param0: javax.net.ssl.SSLSocketFactory, param1: javax.net.ssl.X509TrustManager): okhttp3.OkHttpClient.Builder;
			public cookieJar(param0: okhttp3.CookieJar): okhttp3.OkHttpClient.Builder;
			public connectTimeout(param0: number, param1: java.util.concurrent.TimeUnit): okhttp3.OkHttpClient.Builder;
			public followSslRedirects(param0: boolean): okhttp3.OkHttpClient.Builder;
			public constructor();
			public dispatcher(param0: okhttp3.Dispatcher): okhttp3.OkHttpClient.Builder;
			public proxySelector(param0: java.net.ProxySelector): okhttp3.OkHttpClient.Builder;
			public socketFactory(param0: javax.net.SocketFactory): okhttp3.OkHttpClient.Builder;
			public retryOnConnectionFailure(param0: boolean): okhttp3.OkHttpClient.Builder;
			public writeTimeout(param0: number, param1: java.util.concurrent.TimeUnit): okhttp3.OkHttpClient.Builder;
			public addNetworkInterceptor(param0: okhttp3.Interceptor): okhttp3.OkHttpClient.Builder;
			public hostnameVerifier(param0: javax.net.ssl.HostnameVerifier): okhttp3.OkHttpClient.Builder;
			public authenticator(param0: okhttp3.Authenticator): okhttp3.OkHttpClient.Builder;
			public proxy(param0: java.net.Proxy): okhttp3.OkHttpClient.Builder;
			public certificatePinner(param0: okhttp3.CertificatePinner): okhttp3.OkHttpClient.Builder;
		}
	}
}

declare namespace okhttp3 {
	export class Protocol {
		public static class: java.lang.Class<okhttp3.Protocol>;
		public static HTTP_1_0: okhttp3.Protocol;
		public static HTTP_1_1: okhttp3.Protocol;
		public static SPDY_3: okhttp3.Protocol;
		public static HTTP_2: okhttp3.Protocol;
		public static valueOf(param0: string): okhttp3.Protocol;
		public static get(param0: string): okhttp3.Protocol;
		public static values(): native.Array<okhttp3.Protocol>;
		public toString(): string;
	}
}

declare namespace okhttp3 {
	export class RealCall extends okhttp3.Call {
		public static class: java.lang.Class<okhttp3.RealCall>;
		public clone(): okhttp3.RealCall;
		public isExecuted(): boolean;
		public clone(): okhttp3.Call;
		public request(): okhttp3.Request;
		public execute(): okhttp3.Response;
		public isCanceled(): boolean;
		public enqueue(param0: okhttp3.Callback): void;
		public cancel(): void;
	}
	export namespace RealCall {
		export class AsyncCall extends okhttp3.internal.NamedRunnable {
			public static class: java.lang.Class<okhttp3.RealCall.AsyncCall>;
			public execute(): void;
		}
	}
}

declare namespace okhttp3 {
	export class Request {
		public static class: java.lang.Class<okhttp3.Request>;
		public header(param0: string): string;
		public headers(): okhttp3.Headers;
		public tag(): any;
		public newBuilder(): okhttp3.Request.Builder;
		public headers(param0: string): java.util.List<string>;
		public url(): okhttp3.HttpUrl;
		public cacheControl(): okhttp3.CacheControl;
		public method(): string;
		public toString(): string;
		public body(): okhttp3.RequestBody;
		public isHttps(): boolean;
	}
	export namespace Request {
		export class Builder {
			public static class: java.lang.Class<okhttp3.Request.Builder>;
			public url(param0: okhttp3.HttpUrl): okhttp3.Request.Builder;
			public tag(param0: any): okhttp3.Request.Builder;
			public url(param0: java.net.URL): okhttp3.Request.Builder;
			public header(param0: string, param1: string): okhttp3.Request.Builder;
			public headers(param0: okhttp3.Headers): okhttp3.Request.Builder;
			public put(param0: okhttp3.RequestBody): okhttp3.Request.Builder;
			public delete(): okhttp3.Request.Builder;
			public get(): okhttp3.Request.Builder;
			public constructor();
			public addHeader(param0: string, param1: string): okhttp3.Request.Builder;
			public post(param0: okhttp3.RequestBody): okhttp3.Request.Builder;
			public delete(param0: okhttp3.RequestBody): okhttp3.Request.Builder;
			public patch(param0: okhttp3.RequestBody): okhttp3.Request.Builder;
			public build(): okhttp3.Request;
			public method(param0: string, param1: okhttp3.RequestBody): okhttp3.Request.Builder;
			public url(param0: string): okhttp3.Request.Builder;
			public removeHeader(param0: string): okhttp3.Request.Builder;
			public cacheControl(param0: okhttp3.CacheControl): okhttp3.Request.Builder;
			public head(): okhttp3.Request.Builder;
		}
	}
}

declare namespace okhttp3 {
	export abstract class RequestBody {
		public static class: java.lang.Class<okhttp3.RequestBody>;
		public constructor();
		public static create(param0: okhttp3.MediaType, param1: okio.ByteString): okhttp3.RequestBody;
		public static create(param0: okhttp3.MediaType, param1: java.io.File): okhttp3.RequestBody;
		public static create(param0: okhttp3.MediaType, param1: string): okhttp3.RequestBody;
		public contentType(): okhttp3.MediaType;
		public writeTo(param0: okio.BufferedSink): void;
		public static create(param0: okhttp3.MediaType, param1: native.Array<number>): okhttp3.RequestBody;
		public contentLength(): number;
		public static create(param0: okhttp3.MediaType, param1: native.Array<number>, param2: number, param3: number): okhttp3.RequestBody;
	}
}

declare namespace okhttp3 {
	export class Response {
		public static class: java.lang.Class<okhttp3.Response>;
		public headers(): okhttp3.Headers;
		public priorResponse(): okhttp3.Response;
		public close(): void;
		public cacheResponse(): okhttp3.Response;
		public sentRequestAtMillis(): number;
		public cacheControl(): okhttp3.CacheControl;
		public toString(): string;
		public handshake(): okhttp3.Handshake;
		public peekBody(param0: number): okhttp3.ResponseBody;
		public isSuccessful(): boolean;
		public header(param0: string): string;
		public header(param0: string, param1: string): string;
		public body(): okhttp3.ResponseBody;
		public networkResponse(): okhttp3.Response;
		public headers(param0: string): java.util.List<string>;
		public newBuilder(): okhttp3.Response.Builder;
		public request(): okhttp3.Request;
		public code(): number;
		public protocol(): okhttp3.Protocol;
		public message(): string;
		public challenges(): java.util.List<okhttp3.Challenge>;
		public receivedResponseAtMillis(): number;
		public isRedirect(): boolean;
	}
	export namespace Response {
		export class Builder {
			public static class: java.lang.Class<okhttp3.Response.Builder>;
			public cacheResponse(param0: okhttp3.Response): okhttp3.Response.Builder;
			public body(param0: okhttp3.ResponseBody): okhttp3.Response.Builder;
			public message(param0: string): okhttp3.Response.Builder;
			public request(param0: okhttp3.Request): okhttp3.Response.Builder;
			public header(param0: string, param1: string): okhttp3.Response.Builder;
			public headers(param0: okhttp3.Headers): okhttp3.Response.Builder;
			public sentRequestAtMillis(param0: number): okhttp3.Response.Builder;
			public priorResponse(param0: okhttp3.Response): okhttp3.Response.Builder;
			public networkResponse(param0: okhttp3.Response): okhttp3.Response.Builder;
			public constructor();
			public removeHeader(param0: string): okhttp3.Response.Builder;
			public handshake(param0: okhttp3.Handshake): okhttp3.Response.Builder;
			public addHeader(param0: string, param1: string): okhttp3.Response.Builder;
			public code(param0: number): okhttp3.Response.Builder;
			public build(): okhttp3.Response;
			public protocol(param0: okhttp3.Protocol): okhttp3.Response.Builder;
			public receivedResponseAtMillis(param0: number): okhttp3.Response.Builder;
		}
	}
}

declare namespace okhttp3 {
	export abstract class ResponseBody {
		public static class: java.lang.Class<okhttp3.ResponseBody>;
		public constructor();
		public byteStream(): java.io.InputStream;
		public bytes(): native.Array<number>;
		public static create(param0: okhttp3.MediaType, param1: native.Array<number>): okhttp3.ResponseBody;
		public static create(param0: okhttp3.MediaType, param1: number, param2: okio.BufferedSource): okhttp3.ResponseBody;
		public close(): void;
		public charStream(): java.io.Reader;
		public contentType(): okhttp3.MediaType;
		public source(): okio.BufferedSource;
		public string(): string;
		public contentLength(): number;
		public static create(param0: okhttp3.MediaType, param1: string): okhttp3.ResponseBody;
	}
	export namespace ResponseBody {
		export class BomAwareReader {
			public static class: java.lang.Class<okhttp3.ResponseBody.BomAwareReader>;
			public read(param0: native.Array<string>, param1: number, param2: number): number;
			public close(): void;
		}
	}
}

declare namespace okhttp3 {
	export class Route {
		public static class: java.lang.Class<okhttp3.Route>;
		public proxy(): java.net.Proxy;
		public constructor(param0: okhttp3.Address, param1: java.net.Proxy, param2: java.net.InetSocketAddress);
		public equals(param0: any): boolean;
		public address(): okhttp3.Address;
		public hashCode(): number;
		public toString(): string;
		public requiresTunnel(): boolean;
		public socketAddress(): java.net.InetSocketAddress;
	}
}

declare namespace okhttp3 {
	export class TlsVersion {
		public static class: java.lang.Class<okhttp3.TlsVersion>;
		public static TLS_1_3: okhttp3.TlsVersion;
		public static TLS_1_2: okhttp3.TlsVersion;
		public static TLS_1_1: okhttp3.TlsVersion;
		public static TLS_1_0: okhttp3.TlsVersion;
		public static SSL_3_0: okhttp3.TlsVersion;
		public javaName(): string;
		public static values(): native.Array<okhttp3.TlsVersion>;
		public static valueOf(param0: string): okhttp3.TlsVersion;
		public static forJavaName(param0: string): okhttp3.TlsVersion;
	}
}

declare namespace okhttp3 {
	export class WebSocket {
		public static class: java.lang.Class<okhttp3.WebSocket>;
		/**
		 * Constructs a new instance of the okhttp3.WebSocket interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			request(): okhttp3.Request;
			queueSize(): number;
			send(param0: string): boolean;
			send(param0: okio.ByteString): boolean;
			close(param0: number, param1: string): boolean;
			cancel(): void;
		});
		public constructor();
		public send(param0: string): boolean;
		public send(param0: okio.ByteString): boolean;
		public close(param0: number, param1: string): boolean;
		public request(): okhttp3.Request;
		public queueSize(): number;
		public cancel(): void;
	}
	export namespace WebSocket {
		export class Factory {
			public static class: java.lang.Class<okhttp3.WebSocket.Factory>;
			/**
			 * Constructs a new instance of the okhttp3.WebSocket$Factory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				newWebSocket(param0: okhttp3.Request, param1: okhttp3.WebSocketListener): okhttp3.WebSocket;
			});
			public constructor();
			public newWebSocket(param0: okhttp3.Request, param1: okhttp3.WebSocketListener): okhttp3.WebSocket;
		}
	}
}

declare namespace okhttp3 {
	export abstract class WebSocketListener {
		public static class: java.lang.Class<okhttp3.WebSocketListener>;
		public constructor();
		public onClosed(param0: okhttp3.WebSocket, param1: number, param2: string): void;
		public onMessage(param0: okhttp3.WebSocket, param1: okio.ByteString): void;
		public onFailure(param0: okhttp3.WebSocket, param1: java.lang.Throwable, param2: okhttp3.Response): void;
		public onOpen(param0: okhttp3.WebSocket, param1: okhttp3.Response): void;
		public onClosing(param0: okhttp3.WebSocket, param1: number, param2: string): void;
		public onMessage(param0: okhttp3.WebSocket, param1: string): void;
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export abstract class Internal {
			public static class: java.lang.Class<okhttp3.internal.Internal>;
			public static instance: okhttp3.internal.Internal;
			public code(param0: okhttp3.Response.Builder): number;
			public addLenient(param0: okhttp3.Headers.Builder, param1: string): void;
			public connectionBecameIdle(param0: okhttp3.ConnectionPool, param1: okhttp3.internal.connection.RealConnection): boolean;
			public setCache(param0: okhttp3.OkHttpClient.Builder, param1: okhttp3.internal.cache.InternalCache): void;
			public newWebSocketCall(param0: okhttp3.OkHttpClient, param1: okhttp3.Request): okhttp3.Call;
			public constructor();
			public apply(param0: okhttp3.ConnectionSpec, param1: javax.net.ssl.SSLSocket, param2: boolean): void;
			public put(param0: okhttp3.ConnectionPool, param1: okhttp3.internal.connection.RealConnection): void;
			public getHttpUrlChecked(param0: string): okhttp3.HttpUrl;
			public routeDatabase(param0: okhttp3.ConnectionPool): okhttp3.internal.connection.RouteDatabase;
			public static initializeInstanceForTests(): void;
			public addLenient(param0: okhttp3.Headers.Builder, param1: string, param2: string): void;
			public deduplicate(param0: okhttp3.ConnectionPool, param1: okhttp3.Address, param2: okhttp3.internal.connection.StreamAllocation): java.net.Socket;
			public get(param0: okhttp3.ConnectionPool, param1: okhttp3.Address, param2: okhttp3.internal.connection.StreamAllocation): okhttp3.internal.connection.RealConnection;
			public streamAllocation(param0: okhttp3.Call): okhttp3.internal.connection.StreamAllocation;
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export abstract class NamedRunnable {
			public static class: java.lang.Class<okhttp3.internal.NamedRunnable>;
			public name: string;
			public execute(): void;
			public constructor(param0: string, param1: native.Array<any>);
			public run(): void;
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export class Util {
			public static class: java.lang.Class<okhttp3.internal.Util>;
			public static EMPTY_BYTE_ARRAY: native.Array<number>;
			public static EMPTY_STRING_ARRAY: native.Array<string>;
			public static EMPTY_RESPONSE: okhttp3.ResponseBody;
			public static EMPTY_REQUEST: okhttp3.RequestBody;
			public static UTF_8: java.nio.charset.Charset;
			public static UTC: java.util.TimeZone;
			public static checkOffsetAndCount(param0: number, param1: number, param2: number): void;
			public static verifyAsIpAddress(param0: string): boolean;
			public static equal(param0: any, param1: any): boolean;
			public static bomAwareCharset(param0: okio.BufferedSource, param1: java.nio.charset.Charset): java.nio.charset.Charset;
			public static format(param0: string, param1: native.Array<any>): string;
			public static toHumanReadableAscii(param0: string): string;
			public static indexOfControlOrNonAscii(param0: string): number;
			public static immutableList(param0: native.Array<any>): java.util.List;
			public static delimiterOffset(param0: string, param1: number, param2: number, param3: string): number;
			public static closeQuietly(param0: java.io.Closeable): void;
			public static hostHeader(param0: okhttp3.HttpUrl, param1: boolean): string;
			public static trimSubstring(param0: string, param1: number, param2: number): string;
			public static closeQuietly(param0: java.net.Socket): void;
			public static skipTrailingAsciiWhitespace(param0: string, param1: number, param2: number): number;
			public static concat(param0: native.Array<string>, param1: string): native.Array<string>;
			public static domainToAscii(param0: string): string;
			public static indexOf(param0: native.Array<any>, param1: any): number;
			public static closeQuietly(param0: java.net.ServerSocket): void;
			public static intersect(param0: java.lang.Class, param1: native.Array<any>, param2: native.Array<any>): native.Array<any>;
			public static discard(param0: okio.Source, param1: number, param2: java.util.concurrent.TimeUnit): boolean;
			public static threadFactory(param0: string, param1: boolean): java.util.concurrent.ThreadFactory;
			public static skipLeadingAsciiWhitespace(param0: string, param1: number, param2: number): number;
			public static isAndroidGetsocknameError(param0: java.lang.AssertionError): boolean;
			public static skipAll(param0: okio.Source, param1: number, param2: java.util.concurrent.TimeUnit): boolean;
			public static immutableList(param0: java.util.List): java.util.List;
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export class Version {
			public static class: java.lang.Class<okhttp3.internal.Version>;
			public static userAgent(): string;
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace cache {
			export class CacheInterceptor extends okhttp3.Interceptor {
				public static class: java.lang.Class<okhttp3.internal.cache.CacheInterceptor>;
				public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
				public constructor(param0: okhttp3.internal.cache.InternalCache);
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace cache {
			export class CacheRequest {
				public static class: java.lang.Class<okhttp3.internal.cache.CacheRequest>;
				/**
				 * Constructs a new instance of the okhttp3.internal.cache.CacheRequest interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					body(): okio.Sink;
					abort(): void;
				});
				public constructor();
				public abort(): void;
				public body(): okio.Sink;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace cache {
			export class CacheStrategy {
				public static class: java.lang.Class<okhttp3.internal.cache.CacheStrategy>;
				public networkRequest: okhttp3.Request;
				public cacheResponse: okhttp3.Response;
				public static isCacheable(param0: okhttp3.Response, param1: okhttp3.Request): boolean;
			}
			export namespace CacheStrategy {
				export class Factory {
					public static class: java.lang.Class<okhttp3.internal.cache.CacheStrategy.Factory>;
					public constructor(param0: number, param1: okhttp3.Request, param2: okhttp3.Response);
					public get(): okhttp3.internal.cache.CacheStrategy;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace cache {
			export class DiskLruCache {
				public static class: java.lang.Class<okhttp3.internal.cache.DiskLruCache>;
				public remove(param0: string): boolean;
				public close(): void;
				public snapshots(): java.util.Iterator<okhttp3.internal.cache.DiskLruCache.Snapshot>;
				public isClosed(): boolean;
				public getDirectory(): java.io.File;
				public static create(param0: okhttp3.internal.io.FileSystem, param1: java.io.File, param2: number, param3: number, param4: number): okhttp3.internal.cache.DiskLruCache;
				public get(param0: string): okhttp3.internal.cache.DiskLruCache.Snapshot;
				public size(): number;
				public flush(): void;
				public setMaxSize(param0: number): void;
				public edit(param0: string): okhttp3.internal.cache.DiskLruCache.Editor;
				public initialize(): void;
				public delete(): void;
				public getMaxSize(): number;
				public evictAll(): void;
			}
			export namespace DiskLruCache {
				export class Editor {
					public static class: java.lang.Class<okhttp3.internal.cache.DiskLruCache.Editor>;
					public newSource(param0: number): okio.Source;
					public commit(): void;
					public newSink(param0: number): okio.Sink;
					public abortUnlessCommitted(): void;
					public abort(): void;
				}
				export class Entry {
					public static class: java.lang.Class<okhttp3.internal.cache.DiskLruCache.Entry>;
				}
				export class Snapshot {
					public static class: java.lang.Class<okhttp3.internal.cache.DiskLruCache.Snapshot>;
					public close(): void;
					public key(): string;
					public getLength(param0: number): number;
					public edit(): okhttp3.internal.cache.DiskLruCache.Editor;
					public getSource(param0: number): okio.Source;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace cache {
			export class FaultHidingSink extends okio.ForwardingSink {
				public static class: java.lang.Class<okhttp3.internal.cache.FaultHidingSink>;
				public close(): void;
				public timeout(): okio.Timeout;
				public constructor(param0: okio.Sink);
				public write(param0: okio.Buffer, param1: number): void;
				public flush(): void;
				public onException(param0: java.io.IOException): void;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace cache {
			export class InternalCache {
				public static class: java.lang.Class<okhttp3.internal.cache.InternalCache>;
				/**
				 * Constructs a new instance of the okhttp3.internal.cache.InternalCache interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					get(param0: okhttp3.Request): okhttp3.Response;
					put(param0: okhttp3.Response): okhttp3.internal.cache.CacheRequest;
					remove(param0: okhttp3.Request): void;
					update(param0: okhttp3.Response, param1: okhttp3.Response): void;
					trackConditionalCacheHit(): void;
					trackResponse(param0: okhttp3.internal.cache.CacheStrategy): void;
				});
				public constructor();
				public put(param0: okhttp3.Response): okhttp3.internal.cache.CacheRequest;
				public get(param0: okhttp3.Request): okhttp3.Response;
				public remove(param0: okhttp3.Request): void;
				public update(param0: okhttp3.Response, param1: okhttp3.Response): void;
				public trackConditionalCacheHit(): void;
				public trackResponse(param0: okhttp3.internal.cache.CacheStrategy): void;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace cache2 {
			export class FileOperator {
				public static class: java.lang.Class<okhttp3.internal.cache2.FileOperator>;
				public write(param0: number, param1: okio.Buffer, param2: number): void;
				public constructor(param0: java.nio.channels.FileChannel);
				public read(param0: number, param1: okio.Buffer, param2: number): void;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace cache2 {
			export class Relay {
				public static class: java.lang.Class<okhttp3.internal.cache2.Relay>;
				public newSource(): okio.Source;
				public metadata(): okio.ByteString;
				public static edit(param0: java.io.File, param1: okio.Source, param2: okio.ByteString, param3: number): okhttp3.internal.cache2.Relay;
				public static read(param0: java.io.File): okhttp3.internal.cache2.Relay;
			}
			export namespace Relay {
				export class RelaySource extends okio.Source {
					public static class: java.lang.Class<okhttp3.internal.cache2.Relay.RelaySource>;
					public close(): void;
					public timeout(): okio.Timeout;
					public read(param0: okio.Buffer, param1: number): number;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace connection {
			export class ConnectInterceptor extends okhttp3.Interceptor {
				public static class: java.lang.Class<okhttp3.internal.connection.ConnectInterceptor>;
				public client: okhttp3.OkHttpClient;
				public constructor(param0: okhttp3.OkHttpClient);
				public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace connection {
			export class ConnectionSpecSelector {
				public static class: java.lang.Class<okhttp3.internal.connection.ConnectionSpecSelector>;
				public constructor(param0: java.util.List<okhttp3.ConnectionSpec>);
				public configureSecureSocket(param0: javax.net.ssl.SSLSocket): okhttp3.ConnectionSpec;
				public connectionFailed(param0: java.io.IOException): boolean;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace connection {
			export class RealConnection extends okhttp3.internal.http2.Http2Connection.Listener implements okhttp3.Connection {
				public static class: java.lang.Class<okhttp3.internal.connection.RealConnection>;
				public noNewStreams: boolean;
				public successCount: number;
				public allocationLimit: number;
				public allocations: java.util.List<java.lang.ref.Reference<okhttp3.internal.connection.StreamAllocation>>;
				public idleAtNanos: number;
				public onSettings(param0: okhttp3.internal.http2.Http2Connection): void;
				public protocol(): okhttp3.Protocol;
				public route(): okhttp3.Route;
				public toString(): string;
				public socket(): java.net.Socket;
				public onStream(param0: okhttp3.internal.http2.Http2Stream): void;
				public constructor();
				public constructor(param0: okhttp3.ConnectionPool, param1: okhttp3.Route);
				public isHealthy(param0: boolean): boolean;
				public newWebSocketStreams(param0: okhttp3.internal.connection.StreamAllocation): okhttp3.internal.ws.RealWebSocket.Streams;
				public cancel(): void;
				public isEligible(param0: okhttp3.Address): boolean;
				public isMultiplexed(): boolean;
				public static testConnection(param0: okhttp3.ConnectionPool, param1: okhttp3.Route, param2: java.net.Socket, param3: number): okhttp3.internal.connection.RealConnection;
				public handshake(): okhttp3.Handshake;
				public connect(param0: number, param1: number, param2: number, param3: boolean): void;
				public newCodec(param0: okhttp3.OkHttpClient, param1: okhttp3.internal.connection.StreamAllocation): okhttp3.internal.http.HttpCodec;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace connection {
			export class RouteDatabase {
				public static class: java.lang.Class<okhttp3.internal.connection.RouteDatabase>;
				public shouldPostpone(param0: okhttp3.Route): boolean;
				public connected(param0: okhttp3.Route): void;
				public failed(param0: okhttp3.Route): void;
				public constructor();
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace connection {
			export class RouteException {
				public static class: java.lang.Class<okhttp3.internal.connection.RouteException>;
				public getLastConnectException(): java.io.IOException;
				public constructor(param0: java.io.IOException);
				public addConnectException(param0: java.io.IOException): void;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace connection {
			export class RouteSelector {
				public static class: java.lang.Class<okhttp3.internal.connection.RouteSelector>;
				public next(): okhttp3.Route;
				public constructor(param0: okhttp3.Address, param1: okhttp3.internal.connection.RouteDatabase);
				public hasNext(): boolean;
				public connectFailed(param0: okhttp3.Route, param1: java.io.IOException): void;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace connection {
			export class StreamAllocation {
				public static class: java.lang.Class<okhttp3.internal.connection.StreamAllocation>;
				public address: okhttp3.Address;
				public release(): void;
				public streamFinished(param0: boolean, param1: okhttp3.internal.http.HttpCodec): void;
				public codec(): okhttp3.internal.http.HttpCodec;
				public toString(): string;
				public releaseAndAcquire(param0: okhttp3.internal.connection.RealConnection): java.net.Socket;
				public acquire(param0: okhttp3.internal.connection.RealConnection): void;
				public noNewStreams(): void;
				public newStream(param0: okhttp3.OkHttpClient, param1: boolean): okhttp3.internal.http.HttpCodec;
				public cancel(): void;
				public connection(): okhttp3.internal.connection.RealConnection;
				public hasMoreRoutes(): boolean;
				public constructor(param0: okhttp3.ConnectionPool, param1: okhttp3.Address, param2: any);
				public streamFailed(param0: java.io.IOException): void;
			}
			export namespace StreamAllocation {
				export class StreamAllocationReference extends java.lang.ref.WeakReference<okhttp3.internal.connection.StreamAllocation> {
					public static class: java.lang.Class<okhttp3.internal.connection.StreamAllocation.StreamAllocationReference>;
					public callStackTrace: any;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class BridgeInterceptor extends okhttp3.Interceptor {
				public static class: java.lang.Class<okhttp3.internal.http.BridgeInterceptor>;
				public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
				public constructor(param0: okhttp3.CookieJar);
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class CallServerInterceptor extends okhttp3.Interceptor {
				public static class: java.lang.Class<okhttp3.internal.http.CallServerInterceptor>;
				public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
				public constructor(param0: boolean);
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class HttpCodec {
				public static class: java.lang.Class<okhttp3.internal.http.HttpCodec>;
				/**
				 * Constructs a new instance of the okhttp3.internal.http.HttpCodec interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					createRequestBody(param0: okhttp3.Request, param1: number): okio.Sink;
					writeRequestHeaders(param0: okhttp3.Request): void;
					flushRequest(): void;
					finishRequest(): void;
					readResponseHeaders(param0: boolean): okhttp3.Response.Builder;
					openResponseBody(param0: okhttp3.Response): okhttp3.ResponseBody;
					cancel(): void;
				});
				public constructor();
				public static DISCARD_STREAM_TIMEOUT_MILLIS: number;
				public finishRequest(): void;
				public openResponseBody(param0: okhttp3.Response): okhttp3.ResponseBody;
				public readResponseHeaders(param0: boolean): okhttp3.Response.Builder;
				public cancel(): void;
				public flushRequest(): void;
				public createRequestBody(param0: okhttp3.Request, param1: number): okio.Sink;
				public writeRequestHeaders(param0: okhttp3.Request): void;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class HttpDate {
				public static class: java.lang.Class<okhttp3.internal.http.HttpDate>;
				public static MAX_DATE: number;
				public static parse(param0: string): java.util.Date;
				public static format(param0: java.util.Date): string;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class HttpHeaders {
				public static class: java.lang.Class<okhttp3.internal.http.HttpHeaders>;
				public static varyHeaders(param0: okhttp3.Headers, param1: okhttp3.Headers): okhttp3.Headers;
				public static hasBody(param0: okhttp3.Response): boolean;
				public static receiveHeaders(param0: okhttp3.CookieJar, param1: okhttp3.HttpUrl, param2: okhttp3.Headers): void;
				public static varyHeaders(param0: okhttp3.Response): okhttp3.Headers;
				public static varyMatches(param0: okhttp3.Response, param1: okhttp3.Headers, param2: okhttp3.Request): boolean;
				public static skipWhitespace(param0: string, param1: number): number;
				public static hasVaryAll(param0: okhttp3.Headers): boolean;
				public static contentLength(param0: okhttp3.Response): number;
				public static hasVaryAll(param0: okhttp3.Response): boolean;
				public static skipUntil(param0: string, param1: number, param2: string): number;
				public static varyFields(param0: okhttp3.Headers): java.util.Set<string>;
				public static contentLength(param0: okhttp3.Headers): number;
				public static parseChallenges(param0: okhttp3.Headers, param1: string): java.util.List<okhttp3.Challenge>;
				public static parseSeconds(param0: string, param1: number): number;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class HttpMethod {
				public static class: java.lang.Class<okhttp3.internal.http.HttpMethod>;
				public static invalidatesCache(param0: string): boolean;
				public static requiresRequestBody(param0: string): boolean;
				public static permitsRequestBody(param0: string): boolean;
				public static redirectsWithBody(param0: string): boolean;
				public static redirectsToGet(param0: string): boolean;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class RealInterceptorChain extends okhttp3.Interceptor.Chain {
				public static class: java.lang.Class<okhttp3.internal.http.RealInterceptorChain>;
				public request(): okhttp3.Request;
				public constructor(param0: java.util.List<okhttp3.Interceptor>, param1: okhttp3.internal.connection.StreamAllocation, param2: okhttp3.internal.http.HttpCodec, param3: okhttp3.Connection, param4: number, param5: okhttp3.Request);
				public proceed(param0: okhttp3.Request, param1: okhttp3.internal.connection.StreamAllocation, param2: okhttp3.internal.http.HttpCodec, param3: okhttp3.Connection): okhttp3.Response;
				public connection(): okhttp3.Connection;
				public httpStream(): okhttp3.internal.http.HttpCodec;
				public proceed(param0: okhttp3.Request): okhttp3.Response;
				public streamAllocation(): okhttp3.internal.connection.StreamAllocation;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class RealResponseBody extends okhttp3.ResponseBody {
				public static class: java.lang.Class<okhttp3.internal.http.RealResponseBody>;
				public contentLength(): number;
				public constructor(param0: okhttp3.Headers, param1: okio.BufferedSource);
				public source(): okio.BufferedSource;
				public contentType(): okhttp3.MediaType;
				public constructor();
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class RequestLine {
				public static class: java.lang.Class<okhttp3.internal.http.RequestLine>;
				public static requestPath(param0: okhttp3.HttpUrl): string;
				public static get(param0: okhttp3.Request, param1: java.net.Proxy.Type): string;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class RetryAndFollowUpInterceptor extends okhttp3.Interceptor {
				public static class: java.lang.Class<okhttp3.internal.http.RetryAndFollowUpInterceptor>;
				public isCanceled(): boolean;
				public setCallStackTrace(param0: any): void;
				public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
				public constructor(param0: okhttp3.OkHttpClient, param1: boolean);
				public cancel(): void;
				public streamAllocation(): okhttp3.internal.connection.StreamAllocation;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class StatusLine {
				public static class: java.lang.Class<okhttp3.internal.http.StatusLine>;
				public static HTTP_TEMP_REDIRECT: number;
				public static HTTP_PERM_REDIRECT: number;
				public static HTTP_CONTINUE: number;
				public protocol: okhttp3.Protocol;
				public code: number;
				public message: string;
				public constructor(param0: okhttp3.Protocol, param1: number, param2: string);
				public static parse(param0: string): okhttp3.internal.http.StatusLine;
				public toString(): string;
				public static get(param0: okhttp3.Response): okhttp3.internal.http.StatusLine;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http {
			export class UnrepeatableRequestBody {
				public static class: java.lang.Class<okhttp3.internal.http.UnrepeatableRequestBody>;
				/**
				 * Constructs a new instance of the okhttp3.internal.http.UnrepeatableRequestBody interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http1 {
			export class Http1Codec extends okhttp3.internal.http.HttpCodec {
				public static class: java.lang.Class<okhttp3.internal.http1.Http1Codec>;
				public finishRequest(): void;
				public newFixedLengthSink(param0: number): okio.Sink;
				public newChunkedSink(): okio.Sink;
				public constructor(param0: okhttp3.OkHttpClient, param1: okhttp3.internal.connection.StreamAllocation, param2: okio.BufferedSource, param3: okio.BufferedSink);
				public isClosed(): boolean;
				public readResponseHeaders(param0: boolean): okhttp3.Response.Builder;
				public writeRequestHeaders(param0: okhttp3.Request): void;
				public writeRequest(param0: okhttp3.Headers, param1: string): void;
				public openResponseBody(param0: okhttp3.Response): okhttp3.ResponseBody;
				public newUnknownLengthSource(): okio.Source;
				public readHeaders(): okhttp3.Headers;
				public newChunkedSource(param0: okhttp3.HttpUrl): okio.Source;
				public cancel(): void;
				public flushRequest(): void;
				public createRequestBody(param0: okhttp3.Request, param1: number): okio.Sink;
				public newFixedLengthSource(param0: number): okio.Source;
			}
			export namespace Http1Codec {
				export abstract class AbstractSource extends okio.Source {
					public static class: java.lang.Class<okhttp3.internal.http1.Http1Codec.AbstractSource>;
					public closed: boolean;
					public endOfInput(param0: boolean): void;
					public close(): void;
					public timeout(): okio.Timeout;
					public read(param0: okio.Buffer, param1: number): number;
				}
				export class ChunkedSink extends okio.Sink {
					public static class: java.lang.Class<okhttp3.internal.http1.Http1Codec.ChunkedSink>;
					public close(): void;
					public flush(): void;
					public write(param0: okio.Buffer, param1: number): void;
					public timeout(): okio.Timeout;
				}
				export class ChunkedSource extends okhttp3.internal.http1.Http1Codec.AbstractSource {
					public static class: java.lang.Class<okhttp3.internal.http1.Http1Codec.ChunkedSource>;
					public close(): void;
					public timeout(): okio.Timeout;
					public read(param0: okio.Buffer, param1: number): number;
				}
				export class FixedLengthSink extends okio.Sink {
					public static class: java.lang.Class<okhttp3.internal.http1.Http1Codec.FixedLengthSink>;
					public close(): void;
					public flush(): void;
					public write(param0: okio.Buffer, param1: number): void;
					public timeout(): okio.Timeout;
				}
				export class FixedLengthSource extends okhttp3.internal.http1.Http1Codec.AbstractSource {
					public static class: java.lang.Class<okhttp3.internal.http1.Http1Codec.FixedLengthSource>;
					public close(): void;
					public timeout(): okio.Timeout;
					public constructor(param0: okhttp3.internal.http1.Http1Codec, param1: number);
					public read(param0: okio.Buffer, param1: number): number;
				}
				export class UnknownLengthSource extends okhttp3.internal.http1.Http1Codec.AbstractSource {
					public static class: java.lang.Class<okhttp3.internal.http1.Http1Codec.UnknownLengthSource>;
					public close(): void;
					public timeout(): okio.Timeout;
					public read(param0: okio.Buffer, param1: number): number;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class ConnectionShutdownException {
				public static class: java.lang.Class<okhttp3.internal.http2.ConnectionShutdownException>;
				public constructor();
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class ErrorCode {
				public static class: java.lang.Class<okhttp3.internal.http2.ErrorCode>;
				public static NO_ERROR: okhttp3.internal.http2.ErrorCode;
				public static PROTOCOL_ERROR: okhttp3.internal.http2.ErrorCode;
				public static INTERNAL_ERROR: okhttp3.internal.http2.ErrorCode;
				public static FLOW_CONTROL_ERROR: okhttp3.internal.http2.ErrorCode;
				public static REFUSED_STREAM: okhttp3.internal.http2.ErrorCode;
				public static CANCEL: okhttp3.internal.http2.ErrorCode;
				public httpCode: number;
				public static valueOf(param0: string): okhttp3.internal.http2.ErrorCode;
				public static fromHttp2(param0: number): okhttp3.internal.http2.ErrorCode;
				public static values(): native.Array<okhttp3.internal.http2.ErrorCode>;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Header {
				public static class: java.lang.Class<okhttp3.internal.http2.Header>;
				public static PSEUDO_PREFIX: okio.ByteString;
				public static RESPONSE_STATUS: okio.ByteString;
				public static TARGET_METHOD: okio.ByteString;
				public static TARGET_PATH: okio.ByteString;
				public static TARGET_SCHEME: okio.ByteString;
				public static TARGET_AUTHORITY: okio.ByteString;
				public name: okio.ByteString;
				public value: okio.ByteString;
				public constructor(param0: okio.ByteString, param1: okio.ByteString);
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor(param0: okio.ByteString, param1: string);
				public toString(): string;
				public constructor(param0: string, param1: string);
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Hpack {
				public static class: java.lang.Class<okhttp3.internal.http2.Hpack>;
			}
			export namespace Hpack {
				export class Reader {
					public static class: java.lang.Class<okhttp3.internal.http2.Hpack.Reader>;
					public getAndResetHeaderList(): java.util.List<okhttp3.internal.http2.Header>;
				}
				export class Writer {
					public static class: java.lang.Class<okhttp3.internal.http2.Hpack.Writer>;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Http2 {
				public static class: java.lang.Class<okhttp3.internal.http2.Http2>;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Http2Codec extends okhttp3.internal.http.HttpCodec {
				public static class: java.lang.Class<okhttp3.internal.http2.Http2Codec>;
				public finishRequest(): void;
				public openResponseBody(param0: okhttp3.Response): okhttp3.ResponseBody;
				public static readHttp2HeadersList(param0: java.util.List<okhttp3.internal.http2.Header>): okhttp3.Response.Builder;
				public readResponseHeaders(param0: boolean): okhttp3.Response.Builder;
				public cancel(): void;
				public constructor(param0: okhttp3.OkHttpClient, param1: okhttp3.internal.connection.StreamAllocation, param2: okhttp3.internal.http2.Http2Connection);
				public flushRequest(): void;
				public createRequestBody(param0: okhttp3.Request, param1: number): okio.Sink;
				public writeRequestHeaders(param0: okhttp3.Request): void;
				public static http2HeadersList(param0: okhttp3.Request): java.util.List<okhttp3.internal.http2.Header>;
			}
			export namespace Http2Codec {
				export class StreamFinishingSource extends okio.ForwardingSource {
					public static class: java.lang.Class<okhttp3.internal.http2.Http2Codec.StreamFinishingSource>;
					public constructor(param0: okhttp3.internal.http2.Http2Codec, param1: okio.Source);
					public constructor(param0: okio.Source);
					public close(): void;
					public timeout(): okio.Timeout;
					public read(param0: okio.Buffer, param1: number): number;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Http2Connection {
				public static class: java.lang.Class<okhttp3.internal.http2.Http2Connection>;
				public pushStream(param0: number, param1: java.util.List<okhttp3.internal.http2.Header>, param2: boolean): okhttp3.internal.http2.Http2Stream;
				public writeData(param0: number, param1: boolean, param2: okio.Buffer, param3: number): void;
				public close(): void;
				public openStreamCount(): number;
				public shutdown(param0: okhttp3.internal.http2.ErrorCode): void;
				public setSettings(param0: okhttp3.internal.http2.Settings): void;
				public getProtocol(): okhttp3.Protocol;
				public flush(): void;
				public maxConcurrentStreams(): number;
				public start(): void;
				public newStream(param0: java.util.List<okhttp3.internal.http2.Header>, param1: boolean): okhttp3.internal.http2.Http2Stream;
				public isShutdown(): boolean;
				public ping(): okhttp3.internal.http2.Ping;
			}
			export namespace Http2Connection {
				export class Builder {
					public static class: java.lang.Class<okhttp3.internal.http2.Http2Connection.Builder>;
					public constructor(param0: boolean);
					public listener(param0: okhttp3.internal.http2.Http2Connection.Listener): okhttp3.internal.http2.Http2Connection.Builder;
					public build(): okhttp3.internal.http2.Http2Connection;
					public socket(param0: java.net.Socket, param1: string, param2: okio.BufferedSource, param3: okio.BufferedSink): okhttp3.internal.http2.Http2Connection.Builder;
					public socket(param0: java.net.Socket): okhttp3.internal.http2.Http2Connection.Builder;
					public pushObserver(param0: okhttp3.internal.http2.PushObserver): okhttp3.internal.http2.Http2Connection.Builder;
				}
				export abstract class Listener {
					public static class: java.lang.Class<okhttp3.internal.http2.Http2Connection.Listener>;
					public static REFUSE_INCOMING_STREAMS: okhttp3.internal.http2.Http2Connection.Listener;
					public onStream(param0: okhttp3.internal.http2.Http2Stream): void;
					public constructor();
					public onSettings(param0: okhttp3.internal.http2.Http2Connection): void;
				}
				export class ReaderRunnable extends okhttp3.internal.NamedRunnable implements okhttp3.internal.http2.Http2Reader.Handler {
					public static class: java.lang.Class<okhttp3.internal.http2.Http2Connection.ReaderRunnable>;
					public settings(param0: boolean, param1: okhttp3.internal.http2.Settings): void;
					public alternateService(param0: number, param1: string, param2: okio.ByteString, param3: string, param4: number, param5: number): void;
					public ackSettings(): void;
					public data(param0: boolean, param1: number, param2: okio.BufferedSource, param3: number): void;
					public headers(param0: boolean, param1: number, param2: number, param3: java.util.List<okhttp3.internal.http2.Header>): void;
					public priority(param0: number, param1: number, param2: number, param3: boolean): void;
					public execute(): void;
					public pushPromise(param0: number, param1: number, param2: java.util.List<okhttp3.internal.http2.Header>): void;
					public rstStream(param0: number, param1: okhttp3.internal.http2.ErrorCode): void;
					public goAway(param0: number, param1: okhttp3.internal.http2.ErrorCode, param2: okio.ByteString): void;
					public windowUpdate(param0: number, param1: number): void;
					public ping(param0: boolean, param1: number, param2: number): void;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Http2Reader {
				public static class: java.lang.Class<okhttp3.internal.http2.Http2Reader>;
				public close(): void;
				public nextFrame(param0: boolean, param1: okhttp3.internal.http2.Http2Reader.Handler): boolean;
				public constructor(param0: okio.BufferedSource, param1: boolean);
				public readConnectionPreface(param0: okhttp3.internal.http2.Http2Reader.Handler): void;
			}
			export namespace Http2Reader {
				export class ContinuationSource extends okio.Source {
					public static class: java.lang.Class<okhttp3.internal.http2.Http2Reader.ContinuationSource>;
					public close(): void;
					public timeout(): okio.Timeout;
					public read(param0: okio.Buffer, param1: number): number;
					public constructor(param0: okio.BufferedSource);
				}
				export class Handler {
					public static class: java.lang.Class<okhttp3.internal.http2.Http2Reader.Handler>;
					/**
					 * Constructs a new instance of the okhttp3.internal.http2.Http2Reader$Handler interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						data(param0: boolean, param1: number, param2: okio.BufferedSource, param3: number): void;
						headers(param0: boolean, param1: number, param2: number, param3: java.util.List<okhttp3.internal.http2.Header>): void;
						rstStream(param0: number, param1: okhttp3.internal.http2.ErrorCode): void;
						settings(param0: boolean, param1: okhttp3.internal.http2.Settings): void;
						ackSettings(): void;
						ping(param0: boolean, param1: number, param2: number): void;
						goAway(param0: number, param1: okhttp3.internal.http2.ErrorCode, param2: okio.ByteString): void;
						windowUpdate(param0: number, param1: number): void;
						priority(param0: number, param1: number, param2: number, param3: boolean): void;
						pushPromise(param0: number, param1: number, param2: java.util.List<okhttp3.internal.http2.Header>): void;
						alternateService(param0: number, param1: string, param2: okio.ByteString, param3: string, param4: number, param5: number): void;
					});
					public constructor();
					public settings(param0: boolean, param1: okhttp3.internal.http2.Settings): void;
					public alternateService(param0: number, param1: string, param2: okio.ByteString, param3: string, param4: number, param5: number): void;
					public ackSettings(): void;
					public data(param0: boolean, param1: number, param2: okio.BufferedSource, param3: number): void;
					public headers(param0: boolean, param1: number, param2: number, param3: java.util.List<okhttp3.internal.http2.Header>): void;
					public priority(param0: number, param1: number, param2: number, param3: boolean): void;
					public pushPromise(param0: number, param1: number, param2: java.util.List<okhttp3.internal.http2.Header>): void;
					public rstStream(param0: number, param1: okhttp3.internal.http2.ErrorCode): void;
					public goAway(param0: number, param1: okhttp3.internal.http2.ErrorCode, param2: okio.ByteString): void;
					public windowUpdate(param0: number, param1: number): void;
					public ping(param0: boolean, param1: number, param2: number): void;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Http2Stream {
				public static class: java.lang.Class<okhttp3.internal.http2.Http2Stream>;
				public getSource(): okio.Source;
				public close(param0: okhttp3.internal.http2.ErrorCode): void;
				public closeLater(param0: okhttp3.internal.http2.ErrorCode): void;
				public writeTimeout(): okio.Timeout;
				public sendResponseHeaders(param0: java.util.List<okhttp3.internal.http2.Header>, param1: boolean): void;
				public getId(): number;
				public getRequestHeaders(): java.util.List<okhttp3.internal.http2.Header>;
				public getErrorCode(): okhttp3.internal.http2.ErrorCode;
				public takeResponseHeaders(): java.util.List<okhttp3.internal.http2.Header>;
				public getConnection(): okhttp3.internal.http2.Http2Connection;
				public isOpen(): boolean;
				public readTimeout(): okio.Timeout;
				public getSink(): okio.Sink;
				public isLocallyInitiated(): boolean;
			}
			export namespace Http2Stream {
				export class FramingSink extends okio.Sink {
					public static class: java.lang.Class<okhttp3.internal.http2.Http2Stream.FramingSink>;
					public close(): void;
					public flush(): void;
					public write(param0: okio.Buffer, param1: number): void;
					public timeout(): okio.Timeout;
				}
				export class FramingSource extends okio.Source {
					public static class: java.lang.Class<okhttp3.internal.http2.Http2Stream.FramingSource>;
					public close(): void;
					public timeout(): okio.Timeout;
					public read(param0: okio.Buffer, param1: number): number;
				}
				export class StreamTimeout extends okio.AsyncTimeout {
					public static class: java.lang.Class<okhttp3.internal.http2.Http2Stream.StreamTimeout>;
					public timedOut(): void;
					public newTimeoutException(param0: java.io.IOException): java.io.IOException;
					public exitAndThrowIfTimedOut(): void;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Http2Writer {
				public static class: java.lang.Class<okhttp3.internal.http2.Http2Writer>;
				public headers(param0: number, param1: java.util.List<okhttp3.internal.http2.Header>): void;
				public close(): void;
				public synStream(param0: boolean, param1: number, param2: number, param3: java.util.List<okhttp3.internal.http2.Header>): void;
				public settings(param0: okhttp3.internal.http2.Settings): void;
				public ping(param0: boolean, param1: number, param2: number): void;
				public constructor(param0: okio.BufferedSink, param1: boolean);
				public windowUpdate(param0: number, param1: number): void;
				public frameHeader(param0: number, param1: number, param2: number, param3: number): void;
				public maxDataLength(): number;
				public goAway(param0: number, param1: okhttp3.internal.http2.ErrorCode, param2: native.Array<number>): void;
				public flush(): void;
				public connectionPreface(): void;
				public pushPromise(param0: number, param1: number, param2: java.util.List<okhttp3.internal.http2.Header>): void;
				public data(param0: boolean, param1: number, param2: okio.Buffer, param3: number): void;
				public rstStream(param0: number, param1: okhttp3.internal.http2.ErrorCode): void;
				public synReply(param0: boolean, param1: number, param2: java.util.List<okhttp3.internal.http2.Header>): void;
				public applyAndAckSettings(param0: okhttp3.internal.http2.Settings): void;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Huffman {
				public static class: java.lang.Class<okhttp3.internal.http2.Huffman>;
				public static get(): okhttp3.internal.http2.Huffman;
			}
			export namespace Huffman {
				export class Node {
					public static class: java.lang.Class<okhttp3.internal.http2.Huffman.Node>;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Ping {
				public static class: java.lang.Class<okhttp3.internal.http2.Ping>;
				public roundTripTime(param0: number, param1: java.util.concurrent.TimeUnit): number;
				public roundTripTime(): number;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class PushObserver {
				public static class: java.lang.Class<okhttp3.internal.http2.PushObserver>;
				/**
				 * Constructs a new instance of the okhttp3.internal.http2.PushObserver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					onRequest(param0: number, param1: java.util.List<okhttp3.internal.http2.Header>): boolean;
					onHeaders(param0: number, param1: java.util.List<okhttp3.internal.http2.Header>, param2: boolean): boolean;
					onData(param0: number, param1: okio.BufferedSource, param2: number, param3: boolean): boolean;
					onReset(param0: number, param1: okhttp3.internal.http2.ErrorCode): void;
					<clinit>(): void;
				});
				public constructor();
				public static CANCEL: okhttp3.internal.http2.PushObserver;
				public onRequest(param0: number, param1: java.util.List<okhttp3.internal.http2.Header>): boolean;
				public onHeaders(param0: number, param1: java.util.List<okhttp3.internal.http2.Header>, param2: boolean): boolean;
				public onData(param0: number, param1: okio.BufferedSource, param2: number, param3: boolean): boolean;
				public onReset(param0: number, param1: okhttp3.internal.http2.ErrorCode): void;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class Settings {
				public static class: java.lang.Class<okhttp3.internal.http2.Settings>;
				public constructor();
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace http2 {
			export class StreamResetException {
				public static class: java.lang.Class<okhttp3.internal.http2.StreamResetException>;
				public errorCode: okhttp3.internal.http2.ErrorCode;
				public constructor(param0: okhttp3.internal.http2.ErrorCode);
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace io {
			export class FileSystem {
				public static class: java.lang.Class<okhttp3.internal.io.FileSystem>;
				/**
				 * Constructs a new instance of the okhttp3.internal.io.FileSystem interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					source(param0: java.io.File): okio.Source;
					sink(param0: java.io.File): okio.Sink;
					appendingSink(param0: java.io.File): okio.Sink;
					delete(param0: java.io.File): void;
					exists(param0: java.io.File): boolean;
					size(param0: java.io.File): number;
					rename(param0: java.io.File, param1: java.io.File): void;
					deleteContents(param0: java.io.File): void;
					<clinit>(): void;
				});
				public constructor();
				public static SYSTEM: okhttp3.internal.io.FileSystem;
				public source(param0: java.io.File): okio.Source;
				public size(param0: java.io.File): number;
				public deleteContents(param0: java.io.File): void;
				public appendingSink(param0: java.io.File): okio.Sink;
				public sink(param0: java.io.File): okio.Sink;
				public exists(param0: java.io.File): boolean;
				public rename(param0: java.io.File, param1: java.io.File): void;
				public delete(param0: java.io.File): void;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace platform {
			export class AndroidPlatform extends okhttp3.internal.platform.Platform {
				public static class: java.lang.Class<okhttp3.internal.platform.AndroidPlatform>;
				public buildCertificateChainCleaner(param0: javax.net.ssl.X509TrustManager): okhttp3.internal.tls.CertificateChainCleaner;
				public connectSocket(param0: java.net.Socket, param1: java.net.InetSocketAddress, param2: number): void;
				public getSelectedProtocol(param0: javax.net.ssl.SSLSocket): string;
				public constructor(param0: java.lang.Class<any>, param1: okhttp3.internal.platform.OptionalMethod<java.net.Socket>, param2: okhttp3.internal.platform.OptionalMethod<java.net.Socket>, param3: okhttp3.internal.platform.OptionalMethod<java.net.Socket>, param4: okhttp3.internal.platform.OptionalMethod<java.net.Socket>);
				public trustManager(param0: javax.net.ssl.SSLSocketFactory): javax.net.ssl.X509TrustManager;
				public configureTlsExtensions(param0: javax.net.ssl.SSLSocket, param1: string, param2: java.util.List<okhttp3.Protocol>): void;
				public log(param0: number, param1: string, param2: java.lang.Throwable): void;
				public logCloseableLeak(param0: string, param1: any): void;
				public getStackTraceForCloseable(param0: string): any;
				public isCleartextTrafficPermitted(param0: string): boolean;
				public static buildIfSupported(): okhttp3.internal.platform.Platform;
				public constructor();
			}
			export namespace AndroidPlatform {
				export class AndroidCertificateChainCleaner extends okhttp3.internal.tls.CertificateChainCleaner {
					public static class: java.lang.Class<okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner>;
					public equals(param0: any): boolean;
					public clean(param0: java.util.List<java.security.cert.Certificate>, param1: string): java.util.List<java.security.cert.Certificate>;
					public hashCode(): number;
				}
				export class CloseGuard {
					public static class: java.lang.Class<okhttp3.internal.platform.AndroidPlatform.CloseGuard>;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace platform {
			export class Jdk9Platform extends okhttp3.internal.platform.Platform {
				public static class: java.lang.Class<okhttp3.internal.platform.Jdk9Platform>;
				public constructor(param0: java.lang.reflect.Method, param1: java.lang.reflect.Method);
				public getSelectedProtocol(param0: javax.net.ssl.SSLSocket): string;
				public trustManager(param0: javax.net.ssl.SSLSocketFactory): javax.net.ssl.X509TrustManager;
				public static buildIfSupported(): okhttp3.internal.platform.Jdk9Platform;
				public configureTlsExtensions(param0: javax.net.ssl.SSLSocket, param1: string, param2: java.util.List<okhttp3.Protocol>): void;
				public constructor();
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace platform {
			export class JdkWithJettyBootPlatform extends okhttp3.internal.platform.Platform {
				public static class: java.lang.Class<okhttp3.internal.platform.JdkWithJettyBootPlatform>;
				public getSelectedProtocol(param0: javax.net.ssl.SSLSocket): string;
				public afterHandshake(param0: javax.net.ssl.SSLSocket): void;
				public constructor(param0: java.lang.reflect.Method, param1: java.lang.reflect.Method, param2: java.lang.reflect.Method, param3: java.lang.Class<any>, param4: java.lang.Class<any>);
				public configureTlsExtensions(param0: javax.net.ssl.SSLSocket, param1: string, param2: java.util.List<okhttp3.Protocol>): void;
				public static buildIfSupported(): okhttp3.internal.platform.Platform;
				public constructor();
			}
			export namespace JdkWithJettyBootPlatform {
				export class JettyNegoProvider {
					public static class: java.lang.Class<okhttp3.internal.platform.JdkWithJettyBootPlatform.JettyNegoProvider>;
					public constructor(param0: java.util.List<string>);
					public invoke(param0: any, param1: java.lang.reflect.Method, param2: native.Array<any>): any;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace platform {
			export class OptionalMethod<T>  extends java.lang.Object {
				public static class: java.lang.Class<okhttp3.internal.platform.OptionalMethod<any>>;
				public invokeOptional(param0: T, param1: native.Array<any>): any;
				public invokeOptionalWithoutCheckedException(param0: T, param1: native.Array<any>): any;
				public isSupported(param0: T): boolean;
				public invoke(param0: T, param1: native.Array<any>): any;
				public constructor(param0: java.lang.Class<any>, param1: string, param2: native.Array<java.lang.Class>);
				public invokeWithoutCheckedException(param0: T, param1: native.Array<any>): any;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace platform {
			export class Platform {
				public static class: java.lang.Class<okhttp3.internal.platform.Platform>;
				public static INFO: number;
				public static WARN: number;
				public getPrefix(): string;
				public connectSocket(param0: java.net.Socket, param1: java.net.InetSocketAddress, param2: number): void;
				public configureTlsExtensions(param0: javax.net.ssl.SSLSocket, param1: string, param2: java.util.List<okhttp3.Protocol>): void;
				public log(param0: number, param1: string, param2: java.lang.Throwable): void;
				public logCloseableLeak(param0: string, param1: any): void;
				public isCleartextTrafficPermitted(param0: string): boolean;
				public constructor();
				public buildCertificateChainCleaner(param0: javax.net.ssl.X509TrustManager): okhttp3.internal.tls.CertificateChainCleaner;
				public getSelectedProtocol(param0: javax.net.ssl.SSLSocket): string;
				public trustManager(param0: javax.net.ssl.SSLSocketFactory): javax.net.ssl.X509TrustManager;
				public afterHandshake(param0: javax.net.ssl.SSLSocket): void;
				public static get(): okhttp3.internal.platform.Platform;
				public getStackTraceForCloseable(param0: string): any;
				public static alpnProtocolNames(param0: java.util.List<okhttp3.Protocol>): java.util.List<string>;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace tls {
			export class BasicCertificateChainCleaner extends okhttp3.internal.tls.CertificateChainCleaner {
				public static class: java.lang.Class<okhttp3.internal.tls.BasicCertificateChainCleaner>;
				public clean(param0: java.util.List<java.security.cert.Certificate>, param1: string): java.util.List<java.security.cert.Certificate>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor(param0: okhttp3.internal.tls.TrustRootIndex);
				public constructor();
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace tls {
			export abstract class CertificateChainCleaner {
				public static class: java.lang.Class<okhttp3.internal.tls.CertificateChainCleaner>;
				public static get(param0: javax.net.ssl.X509TrustManager): okhttp3.internal.tls.CertificateChainCleaner;
				public clean(param0: java.util.List<java.security.cert.Certificate>, param1: string): java.util.List<java.security.cert.Certificate>;
				public static get(param0: native.Array<java.security.cert.X509Certificate>): okhttp3.internal.tls.CertificateChainCleaner;
				public constructor();
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace tls {
			export class DistinguishedNameParser {
				public static class: java.lang.Class<okhttp3.internal.tls.DistinguishedNameParser>;
				public constructor(param0: javax.security.auth.x500.X500Principal);
				public findMostSpecific(param0: string): string;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace tls {
			export class OkHostnameVerifier {
				public static class: java.lang.Class<okhttp3.internal.tls.OkHostnameVerifier>;
				public static INSTANCE: okhttp3.internal.tls.OkHostnameVerifier;
				public verify(param0: string, param1: javax.net.ssl.SSLSession): boolean;
				public static allSubjectAltNames(param0: java.security.cert.X509Certificate): java.util.List<string>;
				public verify(param0: string, param1: java.security.cert.X509Certificate): boolean;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace tls {
			export abstract class TrustRootIndex {
				public static class: java.lang.Class<okhttp3.internal.tls.TrustRootIndex>;
				public static get(param0: native.Array<java.security.cert.X509Certificate>): okhttp3.internal.tls.TrustRootIndex;
				public findByIssuerAndSignature(param0: java.security.cert.X509Certificate): java.security.cert.X509Certificate;
				public static get(param0: javax.net.ssl.X509TrustManager): okhttp3.internal.tls.TrustRootIndex;
				public constructor();
			}
			export namespace TrustRootIndex {
				export class AndroidTrustRootIndex extends okhttp3.internal.tls.TrustRootIndex {
					public static class: java.lang.Class<okhttp3.internal.tls.TrustRootIndex.AndroidTrustRootIndex>;
					public equals(param0: any): boolean;
					public findByIssuerAndSignature(param0: java.security.cert.X509Certificate): java.security.cert.X509Certificate;
					public hashCode(): number;
				}
				export class BasicTrustRootIndex extends okhttp3.internal.tls.TrustRootIndex {
					public static class: java.lang.Class<okhttp3.internal.tls.TrustRootIndex.BasicTrustRootIndex>;
					public equals(param0: any): boolean;
					public findByIssuerAndSignature(param0: java.security.cert.X509Certificate): java.security.cert.X509Certificate;
					public constructor();
					public constructor(param0: native.Array<java.security.cert.X509Certificate>);
					public hashCode(): number;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace ws {
			export class RealWebSocket implements okhttp3.WebSocket, okhttp3.internal.ws.WebSocketReader.FrameCallback {
				public static class: java.lang.Class<okhttp3.internal.ws.RealWebSocket>;
				public request(): okhttp3.Request;
				public send(param0: string): boolean;
				public onReadPong(param0: okio.ByteString): void;
				public constructor(param0: okhttp3.Request, param1: okhttp3.WebSocketListener, param2: java.util.Random);
				public onReadPing(param0: okio.ByteString): void;
				public queueSize(): number;
				public close(param0: number, param1: string): boolean;
				public loopReader(): void;
				public send(param0: okio.ByteString): boolean;
				public onReadMessage(param0: okio.ByteString): void;
				public failWebSocket(param0: java.lang.Exception, param1: okhttp3.Response): void;
				public initReaderAndWriter(param0: string, param1: number, param2: okhttp3.internal.ws.RealWebSocket.Streams): void;
				public cancel(): void;
				public connect(param0: okhttp3.OkHttpClient): void;
				public onReadClose(param0: number, param1: string): void;
				public onReadMessage(param0: string): void;
			}
			export namespace RealWebSocket {
				export class CancelRunnable {
					public static class: java.lang.Class<okhttp3.internal.ws.RealWebSocket.CancelRunnable>;
					public run(): void;
				}
				export class Close {
					public static class: java.lang.Class<okhttp3.internal.ws.RealWebSocket.Close>;
				}
				export class Message {
					public static class: java.lang.Class<okhttp3.internal.ws.RealWebSocket.Message>;
				}
				export class PingRunnable {
					public static class: java.lang.Class<okhttp3.internal.ws.RealWebSocket.PingRunnable>;
					public run(): void;
				}
				export abstract class Streams {
					public static class: java.lang.Class<okhttp3.internal.ws.RealWebSocket.Streams>;
					public client: boolean;
					public source: okio.BufferedSource;
					public sink: okio.BufferedSink;
					public constructor(param0: boolean, param1: okio.BufferedSource, param2: okio.BufferedSink);
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace ws {
			export class WebSocketProtocol {
				public static class: java.lang.Class<okhttp3.internal.ws.WebSocketProtocol>;
				public static acceptHeader(param0: string): string;
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace ws {
			export class WebSocketReader {
				public static class: java.lang.Class<okhttp3.internal.ws.WebSocketReader>;
			}
			export namespace WebSocketReader {
				export class FrameCallback {
					public static class: java.lang.Class<okhttp3.internal.ws.WebSocketReader.FrameCallback>;
					/**
					 * Constructs a new instance of the okhttp3.internal.ws.WebSocketReader$FrameCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						onReadMessage(param0: string): void;
						onReadMessage(param0: okio.ByteString): void;
						onReadPing(param0: okio.ByteString): void;
						onReadPong(param0: okio.ByteString): void;
						onReadClose(param0: number, param1: string): void;
					});
					public constructor();
					public onReadClose(param0: number, param1: string): void;
					public onReadMessage(param0: string): void;
					public onReadMessage(param0: okio.ByteString): void;
					public onReadPing(param0: okio.ByteString): void;
					public onReadPong(param0: okio.ByteString): void;
				}
			}
		}
	}
}

declare namespace okhttp3 {
	export namespace internal {
		export namespace ws {
			export class WebSocketWriter {
				public static class: java.lang.Class<okhttp3.internal.ws.WebSocketWriter>;
			}
			export namespace WebSocketWriter {
				export class FrameSink extends okio.Sink {
					public static class: java.lang.Class<okhttp3.internal.ws.WebSocketWriter.FrameSink>;
					public close(): void;
					public flush(): void;
					public write(param0: okio.Buffer, param1: number): void;
					public timeout(): okio.Timeout;
				}
			}
		}
	}
}

declare namespace okio {
	export class AsyncTimeout extends okio.Timeout {
		public static class: java.lang.Class<okio.AsyncTimeout>;
		public constructor();
		public enter(): void;
		public sink(param0: okio.Sink): okio.Sink;
		public timedOut(): void;
		public newTimeoutException(param0: java.io.IOException): java.io.IOException;
		public source(param0: okio.Source): okio.Source;
		public exit(): boolean;
	}
	export namespace AsyncTimeout {
		export class Watchdog {
			public static class: java.lang.Class<okio.AsyncTimeout.Watchdog>;
			public run(): void;
			public constructor();
		}
	}
}

declare namespace okio {
	export class Base64 {
		public static class: java.lang.Class<okio.Base64>;
		public static encodeUrl(param0: native.Array<number>): string;
		public static decode(param0: string): native.Array<number>;
		public static encode(param0: native.Array<number>): string;
	}
}

declare namespace okio {
	export class Buffer implements okio.BufferedSource, okio.BufferedSink {
		public static class: java.lang.Class<okio.Buffer>;
		public readIntLe(): number;
		public writeUtf8(param0: string): okio.Buffer;
		public writeDecimalLong(param0: number): okio.Buffer;
		public readFrom(param0: java.io.InputStream, param1: number): okio.Buffer;
		public writeUtf8(param0: string, param1: number, param2: number): okio.Buffer;
		public readUtf8(param0: number): string;
		public copyTo(param0: java.io.OutputStream): okio.Buffer;
		public writeUtf8CodePoint(param0: number): okio.BufferedSink;
		public writeUtf8(param0: string, param1: number, param2: number): okio.BufferedSink;
		public indexOf(param0: number): number;
		public readByte(): number;
		public emitCompleteSegments(): okio.BufferedSink;
		public readLong(): number;
		public read(param0: okio.Buffer, param1: number): number;
		public writeIntLe(param0: number): okio.BufferedSink;
		public copyTo(param0: okio.Buffer, param1: number, param2: number): okio.Buffer;
		public indexOfElement(param0: okio.ByteString): number;
		public write(param0: native.Array<number>, param1: number, param2: number): okio.BufferedSink;
		public readAll(param0: okio.Sink): number;
		public readByteArray(param0: number): native.Array<number>;
		public sha1(): okio.ByteString;
		public write(param0: okio.ByteString): okio.BufferedSink;
		public select(param0: okio.Options): number;
		public readFrom(param0: java.io.InputStream): okio.Buffer;
		public writeTo(param0: java.io.OutputStream): okio.Buffer;
		public outputStream(): java.io.OutputStream;
		public clear(): void;
		public require(param0: number): void;
		public request(param0: number): boolean;
		public indexOf(param0: okio.ByteString, param1: number): number;
		public readString(param0: java.nio.charset.Charset): string;
		public writeLongLe(param0: number): okio.Buffer;
		public writeLong(param0: number): okio.BufferedSink;
		public writeString(param0: string, param1: java.nio.charset.Charset): okio.Buffer;
		public writeByte(param0: number): okio.BufferedSink;
		public readUtf8LineStrict(): string;
		public writeUtf8CodePoint(param0: number): okio.Buffer;
		public writeInt(param0: number): okio.BufferedSink;
		public write(param0: native.Array<number>): okio.BufferedSink;
		public writeShort(param0: number): okio.BufferedSink;
		public rangeEquals(param0: number, param1: okio.ByteString, param2: number, param3: number): boolean;
		public skip(param0: number): void;
		public getByte(param0: number): number;
		public readInt(): number;
		public read(param0: native.Array<number>, param1: number, param2: number): number;
		public writeString(param0: string, param1: number, param2: number, param3: java.nio.charset.Charset): okio.Buffer;
		public copyTo(param0: java.io.OutputStream, param1: number, param2: number): okio.Buffer;
		public writeTo(param0: java.io.OutputStream, param1: number): okio.Buffer;
		public writeAll(param0: okio.Source): number;
		public readFully(param0: native.Array<number>): void;
		public timeout(): okio.Timeout;
		public equals(param0: any): boolean;
		public close(): void;
		public writeDecimalLong(param0: number): okio.BufferedSink;
		public inputStream(): java.io.InputStream;
		public write(param0: okio.ByteString): okio.Buffer;
		public writeHexadecimalUnsignedLong(param0: number): okio.Buffer;
		public writeShortLe(param0: number): okio.BufferedSink;
		public writeUtf8(param0: string): okio.BufferedSink;
		public readUtf8CodePoint(): number;
		public writeShortLe(param0: number): okio.Buffer;
		public snapshot(param0: number): okio.ByteString;
		public writeHexadecimalUnsignedLong(param0: number): okio.BufferedSink;
		public readHexadecimalUnsignedLong(): number;
		public emit(): okio.BufferedSink;
		public writeInt(param0: number): okio.Buffer;
		public constructor();
		public readUtf8(): string;
		public write(param0: okio.Buffer, param1: number): void;
		public readByteString(param0: number): okio.ByteString;
		public writeShort(param0: number): okio.Buffer;
		public completeSegmentByteCount(): number;
		public toString(): string;
		public read(param0: native.Array<number>): number;
		public md5(): okio.ByteString;
		public flush(): void;
		public writeString(param0: string, param1: java.nio.charset.Charset): okio.BufferedSink;
		public writeLongLe(param0: number): okio.BufferedSink;
		public readShort(): number;
		public readShortLe(): number;
		public readUtf8Line(): string;
		public write(param0: native.Array<number>, param1: number, param2: number): okio.Buffer;
		public readByteString(): okio.ByteString;
		public writeString(param0: string, param1: number, param2: number, param3: java.nio.charset.Charset): okio.BufferedSink;
		public writeIntLe(param0: number): okio.Buffer;
		public hmacSha1(param0: okio.ByteString): okio.ByteString;
		public size(): number;
		public hashCode(): number;
		public readString(param0: number, param1: java.nio.charset.Charset): string;
		public readLongLe(): number;
		public readFully(param0: okio.Buffer, param1: number): void;
		public snapshot(): okio.ByteString;
		public write(param0: native.Array<number>): okio.Buffer;
		public clone(): okio.Buffer;
		public emitCompleteSegments(): okio.Buffer;
		public readDecimalLong(): number;
		public sha256(): okio.ByteString;
		public writeByte(param0: number): okio.Buffer;
		public rangeEquals(param0: number, param1: okio.ByteString): boolean;
		public readByteArray(): native.Array<number>;
		public writeLong(param0: number): okio.Buffer;
		public indexOfElement(param0: okio.ByteString, param1: number): number;
		public exhausted(): boolean;
		public write(param0: okio.Source, param1: number): okio.BufferedSink;
		public buffer(): okio.Buffer;
		public hmacSha256(param0: okio.ByteString): okio.ByteString;
		public indexOf(param0: number, param1: number): number;
		public indexOf(param0: okio.ByteString): number;
	}
}

declare namespace okio {
	export class BufferedSink extends okio.Sink {
		public static class: java.lang.Class<okio.BufferedSink>;
		/**
		 * Constructs a new instance of the okio.BufferedSink interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			buffer(): okio.Buffer;
			write(param0: okio.ByteString): okio.BufferedSink;
			write(param0: native.Array<number>): okio.BufferedSink;
			write(param0: native.Array<number>, param1: number, param2: number): okio.BufferedSink;
			writeAll(param0: okio.Source): number;
			write(param0: okio.Source, param1: number): okio.BufferedSink;
			writeUtf8(param0: string): okio.BufferedSink;
			writeUtf8(param0: string, param1: number, param2: number): okio.BufferedSink;
			writeUtf8CodePoint(param0: number): okio.BufferedSink;
			writeString(param0: string, param1: java.nio.charset.Charset): okio.BufferedSink;
			writeString(param0: string, param1: number, param2: number, param3: java.nio.charset.Charset): okio.BufferedSink;
			writeByte(param0: number): okio.BufferedSink;
			writeShort(param0: number): okio.BufferedSink;
			writeShortLe(param0: number): okio.BufferedSink;
			writeInt(param0: number): okio.BufferedSink;
			writeIntLe(param0: number): okio.BufferedSink;
			writeLong(param0: number): okio.BufferedSink;
			writeLongLe(param0: number): okio.BufferedSink;
			writeDecimalLong(param0: number): okio.BufferedSink;
			writeHexadecimalUnsignedLong(param0: number): okio.BufferedSink;
			flush(): void;
			emit(): okio.BufferedSink;
			emitCompleteSegments(): okio.BufferedSink;
			outputStream(): java.io.OutputStream;
			write(param0: okio.Buffer, param1: number): void;
			flush(): void;
			timeout(): okio.Timeout;
			close(): void;
		});
		public constructor();
		public writeDecimalLong(param0: number): okio.BufferedSink;
		public close(): void;
		public writeByte(param0: number): okio.BufferedSink;
		public writeString(param0: string, param1: number, param2: number, param3: java.nio.charset.Charset): okio.BufferedSink;
		public writeShortLe(param0: number): okio.BufferedSink;
		public writeInt(param0: number): okio.BufferedSink;
		public writeUtf8CodePoint(param0: number): okio.BufferedSink;
		public writeUtf8(param0: string): okio.BufferedSink;
		public write(param0: native.Array<number>): okio.BufferedSink;
		public writeUtf8(param0: string, param1: number, param2: number): okio.BufferedSink;
		public writeShort(param0: number): okio.BufferedSink;
		public writeHexadecimalUnsignedLong(param0: number): okio.BufferedSink;
		public emitCompleteSegments(): okio.BufferedSink;
		public emit(): okio.BufferedSink;
		public writeIntLe(param0: number): okio.BufferedSink;
		public write(param0: okio.Buffer, param1: number): void;
		public write(param0: native.Array<number>, param1: number, param2: number): okio.BufferedSink;
		public flush(): void;
		public write(param0: okio.ByteString): okio.BufferedSink;
		public writeString(param0: string, param1: java.nio.charset.Charset): okio.BufferedSink;
		public writeLongLe(param0: number): okio.BufferedSink;
		public write(param0: okio.Source, param1: number): okio.BufferedSink;
		public buffer(): okio.Buffer;
		public outputStream(): java.io.OutputStream;
		public writeAll(param0: okio.Source): number;
		public writeLong(param0: number): okio.BufferedSink;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class BufferedSource extends okio.Source {
		public static class: java.lang.Class<okio.BufferedSource>;
		/**
		 * Constructs a new instance of the okio.BufferedSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			buffer(): okio.Buffer;
			exhausted(): boolean;
			require(param0: number): void;
			request(param0: number): boolean;
			readByte(): number;
			readShort(): number;
			readShortLe(): number;
			readInt(): number;
			readIntLe(): number;
			readLong(): number;
			readLongLe(): number;
			readDecimalLong(): number;
			readHexadecimalUnsignedLong(): number;
			skip(param0: number): void;
			readByteString(): okio.ByteString;
			readByteString(param0: number): okio.ByteString;
			select(param0: okio.Options): number;
			readByteArray(): native.Array<number>;
			readByteArray(param0: number): native.Array<number>;
			read(param0: native.Array<number>): number;
			readFully(param0: native.Array<number>): void;
			read(param0: native.Array<number>, param1: number, param2: number): number;
			readFully(param0: okio.Buffer, param1: number): void;
			readAll(param0: okio.Sink): number;
			readUtf8(): string;
			readUtf8(param0: number): string;
			readUtf8Line(): string;
			readUtf8LineStrict(): string;
			readUtf8CodePoint(): number;
			readString(param0: java.nio.charset.Charset): string;
			readString(param0: number, param1: java.nio.charset.Charset): string;
			indexOf(param0: number): number;
			indexOf(param0: number, param1: number): number;
			indexOf(param0: okio.ByteString): number;
			indexOf(param0: okio.ByteString, param1: number): number;
			indexOfElement(param0: okio.ByteString): number;
			indexOfElement(param0: okio.ByteString, param1: number): number;
			rangeEquals(param0: number, param1: okio.ByteString): boolean;
			rangeEquals(param0: number, param1: okio.ByteString, param2: number, param3: number): boolean;
			inputStream(): java.io.InputStream;
			read(param0: okio.Buffer, param1: number): number;
			timeout(): okio.Timeout;
			close(): void;
		});
		public constructor();
		public close(): void;
		public inputStream(): java.io.InputStream;
		public readIntLe(): number;
		public readByteString(): okio.ByteString;
		public readUtf8LineStrict(): string;
		public readUtf8(param0: number): string;
		public readUtf8CodePoint(): number;
		public indexOf(param0: number): number;
		public readByte(): number;
		public readHexadecimalUnsignedLong(): number;
		public readString(param0: number, param1: java.nio.charset.Charset): string;
		public readLongLe(): number;
		public readFully(param0: okio.Buffer, param1: number): void;
		public readLong(): number;
		public read(param0: okio.Buffer, param1: number): number;
		public rangeEquals(param0: number, param1: okio.ByteString, param2: number, param3: number): boolean;
		public readUtf8(): string;
		public readByteString(param0: number): okio.ByteString;
		public indexOfElement(param0: okio.ByteString): number;
		public skip(param0: number): void;
		public readDecimalLong(): number;
		public read(param0: native.Array<number>): number;
		public readAll(param0: okio.Sink): number;
		public readInt(): number;
		public readByteArray(param0: number): native.Array<number>;
		public rangeEquals(param0: number, param1: okio.ByteString): boolean;
		public read(param0: native.Array<number>, param1: number, param2: number): number;
		public readByteArray(): native.Array<number>;
		public indexOfElement(param0: okio.ByteString, param1: number): number;
		public select(param0: okio.Options): number;
		public exhausted(): boolean;
		public readShort(): number;
		public buffer(): okio.Buffer;
		public require(param0: number): void;
		public request(param0: number): boolean;
		public indexOf(param0: okio.ByteString, param1: number): number;
		public readString(param0: java.nio.charset.Charset): string;
		public readShortLe(): number;
		public indexOf(param0: number, param1: number): number;
		public readFully(param0: native.Array<number>): void;
		public readUtf8Line(): string;
		public indexOf(param0: okio.ByteString): number;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class ByteString extends java.lang.Object {
		public static class: java.lang.Class<okio.ByteString>;
		public static EMPTY: okio.ByteString;
		public static of(param0: native.Array<number>): okio.ByteString;
		public base64(): string;
		public static encodeString(param0: string, param1: java.nio.charset.Charset): okio.ByteString;
		public substring(param0: number): okio.ByteString;
		public equals(param0: any): boolean;
		public base64Url(): string;
		public hmacSha1(param0: okio.ByteString): okio.ByteString;
		public static read(param0: java.io.InputStream, param1: number): okio.ByteString;
		public asByteBuffer(): java.nio.ByteBuffer;
		public size(): number;
		public lastIndexOf(param0: native.Array<number>): number;
		public hex(): string;
		public hashCode(): number;
		public toAsciiUppercase(): okio.ByteString;
		public indexOf(param0: native.Array<number>, param1: number): number;
		public static decodeBase64(param0: string): okio.ByteString;
		public lastIndexOf(param0: okio.ByteString, param1: number): number;
		public rangeEquals(param0: number, param1: okio.ByteString, param2: number, param3: number): boolean;
		public lastIndexOf(param0: okio.ByteString): number;
		public static decodeHex(param0: string): okio.ByteString;
		public compareTo(param0: okio.ByteString): number;
		public indexOf(param0: native.Array<number>): number;
		public startsWith(param0: native.Array<number>): boolean;
		public sha256(): okio.ByteString;
		public getByte(param0: number): number;
		public toString(): string;
		public static encodeUtf8(param0: string): okio.ByteString;
		public string(param0: java.nio.charset.Charset): string;
		public md5(): okio.ByteString;
		public startsWith(param0: okio.ByteString): boolean;
		public endsWith(param0: okio.ByteString): boolean;
		public endsWith(param0: native.Array<number>): boolean;
		public toAsciiLowercase(): okio.ByteString;
		public static of(param0: java.nio.ByteBuffer): okio.ByteString;
		public sha1(): okio.ByteString;
		public write(param0: java.io.OutputStream): void;
		public lastIndexOf(param0: native.Array<number>, param1: number): number;
		public static of(param0: native.Array<number>, param1: number, param2: number): okio.ByteString;
		public rangeEquals(param0: number, param1: native.Array<number>, param2: number, param3: number): boolean;
		public utf8(): string;
		public substring(param0: number, param1: number): okio.ByteString;
		public indexOf(param0: okio.ByteString, param1: number): number;
		public toByteArray(): native.Array<number>;
		public hmacSha256(param0: okio.ByteString): okio.ByteString;
		public indexOf(param0: okio.ByteString): number;
	}
}

declare namespace okio {
	export class DeflaterSink extends okio.Sink {
		public static class: java.lang.Class<okio.DeflaterSink>;
		public close(): void;
		public write(param0: okio.Buffer, param1: number): void;
		public constructor(param0: okio.Sink, param1: java.util.zip.Deflater);
		public toString(): string;
		public flush(): void;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export abstract class ForwardingSink extends okio.Sink {
		public static class: java.lang.Class<okio.ForwardingSink>;
		public delegate(): okio.Sink;
		public close(): void;
		public constructor(param0: okio.Sink);
		public write(param0: okio.Buffer, param1: number): void;
		public toString(): string;
		public flush(): void;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export abstract class ForwardingSource extends okio.Source {
		public static class: java.lang.Class<okio.ForwardingSource>;
		public close(): void;
		public constructor(param0: okio.Source);
		public delegate(): okio.Source;
		public toString(): string;
		public read(param0: okio.Buffer, param1: number): number;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class ForwardingTimeout extends okio.Timeout {
		public static class: java.lang.Class<okio.ForwardingTimeout>;
		public constructor();
		public throwIfReached(): void;
		public setDelegate(param0: okio.Timeout): okio.ForwardingTimeout;
		public clearDeadline(): okio.Timeout;
		public hasDeadline(): boolean;
		public delegate(): okio.Timeout;
		public timeout(param0: number, param1: java.util.concurrent.TimeUnit): okio.Timeout;
		public timeoutNanos(): number;
		public deadlineNanoTime(): number;
		public deadlineNanoTime(param0: number): okio.Timeout;
		public constructor(param0: okio.Timeout);
		public clearTimeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class GzipSink extends okio.Sink {
		public static class: java.lang.Class<okio.GzipSink>;
		public deflater(): java.util.zip.Deflater;
		public close(): void;
		public constructor(param0: okio.Sink);
		public write(param0: okio.Buffer, param1: number): void;
		public flush(): void;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class GzipSource extends okio.Source {
		public static class: java.lang.Class<okio.GzipSource>;
		public close(): void;
		public constructor(param0: okio.Source);
		public read(param0: okio.Buffer, param1: number): number;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class HashingSink extends okio.ForwardingSink {
		public static class: java.lang.Class<okio.HashingSink>;
		public close(): void;
		public static hmacSha256(param0: okio.Sink, param1: okio.ByteString): okio.HashingSink;
		public write(param0: okio.Buffer, param1: number): void;
		public static hmacSha1(param0: okio.Sink, param1: okio.ByteString): okio.HashingSink;
		public static md5(param0: okio.Sink): okio.HashingSink;
		public static sha1(param0: okio.Sink): okio.HashingSink;
		public hash(): okio.ByteString;
		public static sha256(param0: okio.Sink): okio.HashingSink;
		public flush(): void;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class HashingSource extends okio.ForwardingSource {
		public static class: java.lang.Class<okio.HashingSource>;
		public close(): void;
		public static hmacSha256(param0: okio.Source, param1: okio.ByteString): okio.HashingSource;
		public static sha1(param0: okio.Source): okio.HashingSource;
		public static md5(param0: okio.Source): okio.HashingSource;
		public static sha256(param0: okio.Source): okio.HashingSource;
		public static hmacSha1(param0: okio.Source, param1: okio.ByteString): okio.HashingSource;
		public hash(): okio.ByteString;
		public read(param0: okio.Buffer, param1: number): number;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class InflaterSource extends okio.Source {
		public static class: java.lang.Class<okio.InflaterSource>;
		public close(): void;
		public refill(): boolean;
		public constructor(param0: okio.Source, param1: java.util.zip.Inflater);
		public read(param0: okio.Buffer, param1: number): number;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class Okio {
		public static class: java.lang.Class<okio.Okio>;
		public static buffer(param0: okio.Source): okio.BufferedSource;
		public static source(param0: java.io.InputStream): okio.Source;
		public static appendingSink(param0: java.io.File): okio.Sink;
		public static sink(param0: java.io.OutputStream): okio.Sink;
		public static source(param0: java.io.File): okio.Source;
		public static sink(param0: java.io.File): okio.Sink;
		public static blackhole(): okio.Sink;
		public static source(param0: java.net.Socket): okio.Source;
		public static sink(param0: java.nio.file.Path, param1: native.Array<java.nio.file.OpenOption>): okio.Sink;
		public static buffer(param0: okio.Sink): okio.BufferedSink;
		public static sink(param0: java.net.Socket): okio.Sink;
		public static source(param0: java.nio.file.Path, param1: native.Array<java.nio.file.OpenOption>): okio.Source;
	}
}

declare namespace okio {
	export class Options extends java.util.AbstractList<okio.ByteString> implements java.util.RandomAccess  {
		public static class: java.lang.Class<okio.Options>;
		public size(): number;
		public static of(param0: native.Array<okio.ByteString>): okio.Options;
		public get(param0: number): okio.ByteString;
	}
}

declare namespace okio {
	export class Pipe {
		public static class: java.lang.Class<okio.Pipe>;
		public sink(): okio.Sink;
		public constructor(param0: number);
		public source(): okio.Source;
	}
	export namespace Pipe {
		export class PipeSink extends okio.Sink {
			public static class: java.lang.Class<okio.Pipe.PipeSink>;
			public write(param0: okio.Buffer, param1: number): void;
			public flush(): void;
			public timeout(): okio.Timeout;
			public close(): void;
		}
		export class PipeSource extends okio.Source {
			public static class: java.lang.Class<okio.Pipe.PipeSource>;
			public timeout(): okio.Timeout;
			public read(param0: okio.Buffer, param1: number): number;
			public close(): void;
		}
	}
}

declare namespace okio {
	export class RealBufferedSink extends okio.BufferedSink {
		public static class: java.lang.Class<okio.RealBufferedSink>;
		public sink: okio.Sink;
		public writeDecimalLong(param0: number): okio.BufferedSink;
		public close(): void;
		public writeByte(param0: number): okio.BufferedSink;
		public writeString(param0: string, param1: number, param2: number, param3: java.nio.charset.Charset): okio.BufferedSink;
		public writeShortLe(param0: number): okio.BufferedSink;
		public writeInt(param0: number): okio.BufferedSink;
		public writeUtf8CodePoint(param0: number): okio.BufferedSink;
		public writeUtf8(param0: string): okio.BufferedSink;
		public write(param0: native.Array<number>): okio.BufferedSink;
		public writeUtf8(param0: string, param1: number, param2: number): okio.BufferedSink;
		public writeShort(param0: number): okio.BufferedSink;
		public writeHexadecimalUnsignedLong(param0: number): okio.BufferedSink;
		public emitCompleteSegments(): okio.BufferedSink;
		public emit(): okio.BufferedSink;
		public writeIntLe(param0: number): okio.BufferedSink;
		public write(param0: okio.Buffer, param1: number): void;
		public write(param0: native.Array<number>, param1: number, param2: number): okio.BufferedSink;
		public toString(): string;
		public flush(): void;
		public write(param0: okio.ByteString): okio.BufferedSink;
		public writeString(param0: string, param1: java.nio.charset.Charset): okio.BufferedSink;
		public writeLongLe(param0: number): okio.BufferedSink;
		public write(param0: okio.Source, param1: number): okio.BufferedSink;
		public buffer(): okio.Buffer;
		public outputStream(): java.io.OutputStream;
		public writeAll(param0: okio.Source): number;
		public writeLong(param0: number): okio.BufferedSink;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class RealBufferedSource extends okio.BufferedSource {
		public static class: java.lang.Class<okio.RealBufferedSource>;
		public source: okio.Source;
		public close(): void;
		public inputStream(): java.io.InputStream;
		public readByteString(): okio.ByteString;
		public readIntLe(): number;
		public readUtf8LineStrict(): string;
		public readUtf8(param0: number): string;
		public readUtf8CodePoint(): number;
		public indexOf(param0: number): number;
		public readByte(): number;
		public readHexadecimalUnsignedLong(): number;
		public readString(param0: number, param1: java.nio.charset.Charset): string;
		public readLongLe(): number;
		public readFully(param0: okio.Buffer, param1: number): void;
		public read(param0: okio.Buffer, param1: number): number;
		public readLong(): number;
		public rangeEquals(param0: number, param1: okio.ByteString, param2: number, param3: number): boolean;
		public readUtf8(): string;
		public readByteString(param0: number): okio.ByteString;
		public indexOfElement(param0: okio.ByteString): number;
		public skip(param0: number): void;
		public readDecimalLong(): number;
		public toString(): string;
		public read(param0: native.Array<number>): number;
		public readAll(param0: okio.Sink): number;
		public readInt(): number;
		public readByteArray(param0: number): native.Array<number>;
		public rangeEquals(param0: number, param1: okio.ByteString): boolean;
		public read(param0: native.Array<number>, param1: number, param2: number): number;
		public readByteArray(): native.Array<number>;
		public indexOfElement(param0: okio.ByteString, param1: number): number;
		public select(param0: okio.Options): number;
		public exhausted(): boolean;
		public readShort(): number;
		public buffer(): okio.Buffer;
		public require(param0: number): void;
		public request(param0: number): boolean;
		public indexOf(param0: okio.ByteString, param1: number): number;
		public readString(param0: java.nio.charset.Charset): string;
		public readShortLe(): number;
		public indexOf(param0: number, param1: number): number;
		public readFully(param0: native.Array<number>): void;
		public readUtf8Line(): string;
		public indexOf(param0: okio.ByteString): number;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class Segment {
		public static class: java.lang.Class<okio.Segment>;
		public push(param0: okio.Segment): okio.Segment;
		public writeTo(param0: okio.Segment, param1: number): void;
		public compact(): void;
		public pop(): okio.Segment;
		public split(param0: number): okio.Segment;
	}
}

declare namespace okio {
	export class SegmentPool {
		public static class: java.lang.Class<okio.SegmentPool>;
	}
}

declare namespace okio {
	export class SegmentedByteString extends okio.ByteString {
		public static class: java.lang.Class<okio.SegmentedByteString>;
		public base64(): string;
		public substring(param0: number): okio.ByteString;
		public equals(param0: any): boolean;
		public base64Url(): string;
		public hmacSha1(param0: okio.ByteString): okio.ByteString;
		public asByteBuffer(): java.nio.ByteBuffer;
		public size(): number;
		public lastIndexOf(param0: native.Array<number>): number;
		public hex(): string;
		public hashCode(): number;
		public toAsciiUppercase(): okio.ByteString;
		public indexOf(param0: native.Array<number>, param1: number): number;
		public lastIndexOf(param0: okio.ByteString, param1: number): number;
		public rangeEquals(param0: number, param1: okio.ByteString, param2: number, param3: number): boolean;
		public lastIndexOf(param0: okio.ByteString): number;
		public indexOf(param0: native.Array<number>): number;
		public sha256(): okio.ByteString;
		public getByte(param0: number): number;
		public toString(): string;
		public string(param0: java.nio.charset.Charset): string;
		public md5(): okio.ByteString;
		public toAsciiLowercase(): okio.ByteString;
		public sha1(): okio.ByteString;
		public write(param0: java.io.OutputStream): void;
		public lastIndexOf(param0: native.Array<number>, param1: number): number;
		public rangeEquals(param0: number, param1: native.Array<number>, param2: number, param3: number): boolean;
		public utf8(): string;
		public substring(param0: number, param1: number): okio.ByteString;
		public indexOf(param0: okio.ByteString, param1: number): number;
		public toByteArray(): native.Array<number>;
		public hmacSha256(param0: okio.ByteString): okio.ByteString;
		public indexOf(param0: okio.ByteString): number;
	}
}

declare namespace okio {
	export class Sink {
		public static class: java.lang.Class<okio.Sink>;
		/**
		 * Constructs a new instance of the okio.Sink interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			write(param0: okio.Buffer, param1: number): void;
			flush(): void;
			timeout(): okio.Timeout;
			close(): void;
		});
		public constructor();
		public close(): void;
		public write(param0: okio.Buffer, param1: number): void;
		public flush(): void;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class Source {
		public static class: java.lang.Class<okio.Source>;
		/**
		 * Constructs a new instance of the okio.Source interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			read(param0: okio.Buffer, param1: number): number;
			timeout(): okio.Timeout;
			close(): void;
		});
		public constructor();
		public close(): void;
		public read(param0: okio.Buffer, param1: number): number;
		public timeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class Timeout {
		public static class: java.lang.Class<okio.Timeout>;
		public static NONE: okio.Timeout;
		public constructor();
		public throwIfReached(): void;
		public deadline(param0: number, param1: java.util.concurrent.TimeUnit): okio.Timeout;
		public clearDeadline(): okio.Timeout;
		public hasDeadline(): boolean;
		public timeout(param0: number, param1: java.util.concurrent.TimeUnit): okio.Timeout;
		public timeoutNanos(): number;
		public waitUntilNotified(param0: any): void;
		public deadlineNanoTime(): number;
		public deadlineNanoTime(param0: number): okio.Timeout;
		public clearTimeout(): okio.Timeout;
	}
}

declare namespace okio {
	export class Util {
		public static class: java.lang.Class<okio.Util>;
		public static UTF_8: java.nio.charset.Charset;
		public static reverseBytesShort(param0: number): number;
		public static reverseBytesLong(param0: number): number;
		public static checkOffsetAndCount(param0: number, param1: number, param2: number): void;
		public static reverseBytesInt(param0: number): number;
		public static sneakyRethrow(param0: java.lang.Throwable): void;
		public static arrayRangeEquals(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: number): boolean;
	}
}

declare namespace retrofit2 {
	export class BuiltInConverters extends retrofit2.Converter.Factory {
		public static class: java.lang.Class<retrofit2.BuiltInConverters>;
		public requestBodyConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: native.Array<java.lang.annotation.Annotation>, param3: retrofit2.Retrofit): retrofit2.Converter<any,okhttp3.RequestBody>;
		public responseBodyConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: retrofit2.Retrofit): retrofit2.Converter<okhttp3.ResponseBody,any>;
	}
	export namespace BuiltInConverters {
		export class BufferingResponseBodyConverter extends retrofit2.Converter<okhttp3.ResponseBody,okhttp3.ResponseBody> {
			public static class: java.lang.Class<retrofit2.BuiltInConverters.BufferingResponseBodyConverter>;
			public convert(param0: okhttp3.ResponseBody): okhttp3.ResponseBody;
			public convert(param0: any): any;
		}
		export class RequestBodyConverter extends retrofit2.Converter<okhttp3.RequestBody,okhttp3.RequestBody> {
			public static class: java.lang.Class<retrofit2.BuiltInConverters.RequestBodyConverter>;
			public convert(param0: okhttp3.RequestBody): okhttp3.RequestBody;
			public convert(param0: any): any;
		}
		export class StreamingResponseBodyConverter extends retrofit2.Converter<okhttp3.ResponseBody,okhttp3.ResponseBody> {
			public static class: java.lang.Class<retrofit2.BuiltInConverters.StreamingResponseBodyConverter>;
			public convert(param0: okhttp3.ResponseBody): okhttp3.ResponseBody;
			public convert(param0: any): any;
		}
		export class ToStringConverter extends retrofit2.Converter<any,string> {
			public static class: java.lang.Class<retrofit2.BuiltInConverters.ToStringConverter>;
			public convert(param0: any): string;
			public convert(param0: any): any;
		}
		export class VoidResponseBodyConverter extends retrofit2.Converter<okhttp3.ResponseBody,java.lang.Void> {
			public static class: java.lang.Class<retrofit2.BuiltInConverters.VoidResponseBodyConverter>;
			public convert(param0: okhttp3.ResponseBody): java.lang.Void;
			public convert(param0: any): any;
		}
	}
}

declare namespace retrofit2 {
	export class Call<T>  extends java.lang.Cloneable {
		public static class: java.lang.Class<retrofit2.Call<any>>;
		/**
		 * Constructs a new instance of the retrofit2.Call<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			execute(): retrofit2.Response<any>;
			enqueue(param0: retrofit2.Callback<any>): void;
			isExecuted(): boolean;
			cancel(): void;
			isCanceled(): boolean;
			clone(): retrofit2.Call<any>;
			request(): okhttp3.Request;
		});
		public constructor();
		public clone(): retrofit2.Call<any>;
		public isExecuted(): boolean;
		public execute(): retrofit2.Response<any>;
		public request(): okhttp3.Request;
		public isCanceled(): boolean;
		public enqueue(param0: retrofit2.Callback<any>): void;
		public cancel(): void;
	}
}

declare namespace retrofit2 {
	export class CallAdapter<R, T>  extends java.lang.Object {
		public static class: java.lang.Class<retrofit2.CallAdapter<any,any>>;
		/**
		 * Constructs a new instance of the retrofit2.CallAdapter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			responseType(): java.lang.reflect.Type;
			adapt(param0: retrofit2.Call<R>): T;
		});
		public constructor();
		public responseType(): java.lang.reflect.Type;
		public adapt(param0: retrofit2.Call<R>): T;
	}
	export namespace CallAdapter {
		export abstract class Factory {
			public static class: java.lang.Class<retrofit2.CallAdapter.Factory>;
			public static getRawType(param0: java.lang.reflect.Type): java.lang.Class<any>;
			public constructor();
			public get(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: retrofit2.Retrofit): retrofit2.CallAdapter<any,any>;
			public static getParameterUpperBound(param0: number, param1: java.lang.reflect.ParameterizedType): java.lang.reflect.Type;
		}
	}
}

declare namespace retrofit2 {
	export class Callback<T>  extends java.lang.Object {
		public static class: java.lang.Class<retrofit2.Callback<any>>;
		/**
		 * Constructs a new instance of the retrofit2.Callback<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			onResponse(param0: retrofit2.Call<T>, param1: retrofit2.Response<T>): void;
			onFailure(param0: retrofit2.Call<T>, param1: java.lang.Throwable): void;
		});
		public constructor();
		public onResponse(param0: retrofit2.Call<T>, param1: retrofit2.Response<T>): void;
		public onFailure(param0: retrofit2.Call<T>, param1: java.lang.Throwable): void;
	}
}

declare namespace retrofit2 {
	export class Converter<F, T>  extends java.lang.Object {
		public static class: java.lang.Class<retrofit2.Converter<any,any>>;
		/**
		 * Constructs a new instance of the retrofit2.Converter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
		 */
		public constructor(implementation: {
			convert(param0: F): T;
		});
		public constructor();
		public convert(param0: F): T;
	}
	export namespace Converter {
		export abstract class Factory {
			public static class: java.lang.Class<retrofit2.Converter.Factory>;
			public responseBodyConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: retrofit2.Retrofit): retrofit2.Converter<okhttp3.ResponseBody,any>;
			public requestBodyConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: native.Array<java.lang.annotation.Annotation>, param3: retrofit2.Retrofit): retrofit2.Converter<any,okhttp3.RequestBody>;
			public stringConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: retrofit2.Retrofit): retrofit2.Converter<any,string>;
			public constructor();
		}
	}
}

declare namespace retrofit2 {
	export class DefaultCallAdapterFactory extends retrofit2.CallAdapter.Factory {
		public static class: java.lang.Class<retrofit2.DefaultCallAdapterFactory>;
		public get(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: retrofit2.Retrofit): retrofit2.CallAdapter<any,any>;
	}
}

declare namespace retrofit2 {
	export class ExecutorCallAdapterFactory extends retrofit2.CallAdapter.Factory {
		public static class: java.lang.Class<retrofit2.ExecutorCallAdapterFactory>;
		public get(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: retrofit2.Retrofit): retrofit2.CallAdapter<any,any>;
	}
	export namespace ExecutorCallAdapterFactory {
		export class ExecutorCallbackCall<T>  extends retrofit2.Call<any> {
			public static class: java.lang.Class<retrofit2.ExecutorCallAdapterFactory.ExecutorCallbackCall<any>>;
			public clone(): retrofit2.Call<any>;
			public request(): okhttp3.Request;
			public execute(): retrofit2.Response<any>;
			public isExecuted(): boolean;
			public cancel(): void;
			public isCanceled(): boolean;
			public enqueue(param0: retrofit2.Callback<any>): void;
		}
	}
}

declare namespace retrofit2 {
	export class HttpException {
		public static class: java.lang.Class<retrofit2.HttpException>;
		public constructor(param0: retrofit2.Response<any>);
		public code(): number;
		public response(): retrofit2.Response<any>;
		public message(): string;
	}
}

declare namespace retrofit2 {
	export class OkHttpCall<T>  extends retrofit2.Call<any> {
		public static class: java.lang.Class<retrofit2.OkHttpCall<any>>;
		public clone(): retrofit2.Call<any>;
		public isExecuted(): boolean;
		public execute(): retrofit2.Response<any>;
		public request(): okhttp3.Request;
		public clone(): retrofit2.OkHttpCall<any>;
		public isCanceled(): boolean;
		public enqueue(param0: retrofit2.Callback<any>): void;
		public cancel(): void;
	}
	export namespace OkHttpCall {
		export class ExceptionCatchingRequestBody extends okhttp3.ResponseBody {
			public static class: java.lang.Class<retrofit2.OkHttpCall.ExceptionCatchingRequestBody>;
			public contentLength(): number;
			public source(): okio.BufferedSource;
			public contentType(): okhttp3.MediaType;
			public close(): void;
		}
		export class NoContentResponseBody extends okhttp3.ResponseBody {
			public static class: java.lang.Class<retrofit2.OkHttpCall.NoContentResponseBody>;
			public contentLength(): number;
			public source(): okio.BufferedSource;
			public contentType(): okhttp3.MediaType;
		}
	}
}

declare namespace retrofit2 {
	export abstract class ParameterHandler<T>  extends java.lang.Object {
		public static class: java.lang.Class<retrofit2.ParameterHandler<any>>;
	}
	export namespace ParameterHandler {
		export class Body<T>  extends retrofit2.ParameterHandler<any> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.Body<any>>;
		}
		export class Field<T>  extends retrofit2.ParameterHandler<any> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.Field<any>>;
		}
		export class FieldMap<T>  extends retrofit2.ParameterHandler<java.util.Map<string,any>> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.FieldMap<any>>;
		}
		export class Header<T>  extends retrofit2.ParameterHandler<any> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.Header<any>>;
		}
		export class HeaderMap<T>  extends retrofit2.ParameterHandler<java.util.Map<string,any>> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.HeaderMap<any>>;
		}
		export class Part<T>  extends retrofit2.ParameterHandler<any> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.Part<any>>;
		}
		export class PartMap<T>  extends retrofit2.ParameterHandler<java.util.Map<string,any>> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.PartMap<any>>;
		}
		export class Path<T>  extends retrofit2.ParameterHandler<any> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.Path<any>>;
		}
		export class Query<T>  extends retrofit2.ParameterHandler<any> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.Query<any>>;
		}
		export class QueryMap<T>  extends retrofit2.ParameterHandler<java.util.Map<string,any>> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.QueryMap<any>>;
		}
		export class QueryName<T>  extends retrofit2.ParameterHandler<any> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.QueryName<any>>;
		}
		export class RawPart extends retrofit2.ParameterHandler<okhttp3.MultipartBody.Part> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.RawPart>;
		}
		export class RelativeUrl extends retrofit2.ParameterHandler<any> {
			public static class: java.lang.Class<retrofit2.ParameterHandler.RelativeUrl>;
		}
	}
}

declare namespace retrofit2 {
	export class Platform {
		public static class: java.lang.Class<retrofit2.Platform>;
	}
	export namespace Platform {
		export class Android extends retrofit2.Platform {
			public static class: java.lang.Class<retrofit2.Platform.Android>;
			public defaultCallbackExecutor(): java.util.concurrent.Executor;
		}
		export namespace Android {
			export class MainThreadExecutor {
				public static class: java.lang.Class<retrofit2.Platform.Android.MainThreadExecutor>;
				public execute(param0: java.lang.Runnable): void;
			}
		}
		export class Java8 extends retrofit2.Platform {
			public static class: java.lang.Class<retrofit2.Platform.Java8>;
		}
	}
}

declare namespace retrofit2 {
	export class RequestBuilder {
		public static class: java.lang.Class<retrofit2.RequestBuilder>;
	}
	export namespace RequestBuilder {
		export class ContentTypeOverridingRequestBody extends okhttp3.RequestBody {
			public static class: java.lang.Class<retrofit2.RequestBuilder.ContentTypeOverridingRequestBody>;
			public contentLength(): number;
			public writeTo(param0: okio.BufferedSink): void;
			public contentType(): okhttp3.MediaType;
		}
	}
}

declare namespace retrofit2 {
	export class Response<T>  extends java.lang.Object {
		public static class: java.lang.Class<retrofit2.Response<any>>;
		public static error(param0: number, param1: okhttp3.ResponseBody): retrofit2.Response<any>;
		public headers(): okhttp3.Headers;
		public body(): T;
		public static success(param0: any, param1: okhttp3.Response): retrofit2.Response<any>;
		public errorBody(): okhttp3.ResponseBody;
		public raw(): okhttp3.Response;
		public toString(): string;
		public static error(param0: okhttp3.ResponseBody, param1: okhttp3.Response): retrofit2.Response<any>;
		public isSuccessful(): boolean;
		public static success(param0: any): retrofit2.Response<any>;
		public static success(param0: any, param1: okhttp3.Headers): retrofit2.Response<any>;
		public code(): number;
		public message(): string;
	}
}

declare namespace retrofit2 {
	export class Retrofit {
		public static class: java.lang.Class<retrofit2.Retrofit>;
		public requestBodyConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: native.Array<java.lang.annotation.Annotation>): retrofit2.Converter<any,any>;
		public callFactory(): okhttp3.Call.Factory;
		public stringConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>): retrofit2.Converter<any,any>;
		public baseUrl(): okhttp3.HttpUrl;
		public newBuilder(): retrofit2.Retrofit.Builder;
		public nextRequestBodyConverter(param0: retrofit2.Converter.Factory, param1: java.lang.reflect.Type, param2: native.Array<java.lang.annotation.Annotation>, param3: native.Array<java.lang.annotation.Annotation>): retrofit2.Converter<any,any>;
		public callAdapter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>): retrofit2.CallAdapter<any,any>;
		public create(param0: java.lang.Class): any;
		public callbackExecutor(): java.util.concurrent.Executor;
		public callAdapterFactories(): java.util.List<retrofit2.CallAdapter.Factory>;
		public nextCallAdapter(param0: retrofit2.CallAdapter.Factory, param1: java.lang.reflect.Type, param2: native.Array<java.lang.annotation.Annotation>): retrofit2.CallAdapter<any,any>;
		public converterFactories(): java.util.List<retrofit2.Converter.Factory>;
		public responseBodyConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>): retrofit2.Converter<any,any>;
		public nextResponseBodyConverter(param0: retrofit2.Converter.Factory, param1: java.lang.reflect.Type, param2: native.Array<java.lang.annotation.Annotation>): retrofit2.Converter<any,any>;
	}
	export namespace Retrofit {
		export class Builder {
			public static class: java.lang.Class<retrofit2.Retrofit.Builder>;
			public addConverterFactory(param0: retrofit2.Converter.Factory): retrofit2.Retrofit.Builder;
			public validateEagerly(param0: boolean): retrofit2.Retrofit.Builder;
			public callFactory(param0: okhttp3.Call.Factory): retrofit2.Retrofit.Builder;
			public build(): retrofit2.Retrofit;
			public constructor();
			public baseUrl(param0: string): retrofit2.Retrofit.Builder;
			public client(param0: okhttp3.OkHttpClient): retrofit2.Retrofit.Builder;
			public baseUrl(param0: okhttp3.HttpUrl): retrofit2.Retrofit.Builder;
			public callbackExecutor(param0: java.util.concurrent.Executor): retrofit2.Retrofit.Builder;
			public addCallAdapterFactory(param0: retrofit2.CallAdapter.Factory): retrofit2.Retrofit.Builder;
		}
	}
}

declare namespace retrofit2 {
	export class ServiceMethod<R, T>  extends java.lang.Object {
		public static class: java.lang.Class<retrofit2.ServiceMethod<any,any>>;
	}
	export namespace ServiceMethod {
		export class Builder<T, R>  extends java.lang.Object {
			public static class: java.lang.Class<retrofit2.ServiceMethod.Builder<any,any>>;
			public build(): retrofit2.ServiceMethod<any,any>;
		}
	}
}

declare namespace retrofit2 {
	export class Utils {
		public static class: java.lang.Class<retrofit2.Utils>;
	}
	export namespace Utils {
		export class GenericArrayTypeImpl {
			public static class: java.lang.Class<retrofit2.Utils.GenericArrayTypeImpl>;
			public equals(param0: any): boolean;
			public toString(): string;
			public getGenericComponentType(): java.lang.reflect.Type;
			public hashCode(): number;
		}
		export class ParameterizedTypeImpl {
			public static class: java.lang.Class<retrofit2.Utils.ParameterizedTypeImpl>;
			public getRawType(): java.lang.reflect.Type;
			public equals(param0: any): boolean;
			public toString(): string;
			public getOwnerType(): java.lang.reflect.Type;
			public getActualTypeArguments(): native.Array<java.lang.reflect.Type>;
			public hashCode(): number;
		}
		export class WildcardTypeImpl {
			public static class: java.lang.Class<retrofit2.Utils.WildcardTypeImpl>;
			public equals(param0: any): boolean;
			public getUpperBounds(): native.Array<java.lang.reflect.Type>;
			public toString(): string;
			public getLowerBounds(): native.Array<java.lang.reflect.Type>;
			public hashCode(): number;
		}
	}
}

declare namespace retrofit2 {
	export namespace converter {
		export namespace jackson {
			export class JacksonConverterFactory extends retrofit2.Converter.Factory {
				public static class: java.lang.Class<retrofit2.converter.jackson.JacksonConverterFactory>;
				public static create(param0: com.fasterxml.jackson.databind.ObjectMapper): retrofit2.converter.jackson.JacksonConverterFactory;
				public responseBodyConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: retrofit2.Retrofit): retrofit2.Converter<okhttp3.ResponseBody,any>;
				public static create(): retrofit2.converter.jackson.JacksonConverterFactory;
				public requestBodyConverter(param0: java.lang.reflect.Type, param1: native.Array<java.lang.annotation.Annotation>, param2: native.Array<java.lang.annotation.Annotation>, param3: retrofit2.Retrofit): retrofit2.Converter<any,okhttp3.RequestBody>;
			}
		}
	}
}

declare namespace retrofit2 {
	export namespace converter {
		export namespace jackson {
			export class JacksonRequestBodyConverter<T>  extends retrofit2.Converter<any,okhttp3.RequestBody> {
				public static class: java.lang.Class<retrofit2.converter.jackson.JacksonRequestBodyConverter<any>>;
				public convert(param0: any): any;
				public convert(param0: any): okhttp3.RequestBody;
			}
		}
	}
}

declare namespace retrofit2 {
	export namespace converter {
		export namespace jackson {
			export class JacksonResponseBodyConverter<T>  extends retrofit2.Converter<okhttp3.ResponseBody,any> {
				public static class: java.lang.Class<retrofit2.converter.jackson.JacksonResponseBodyConverter<any>>;
				public convert(param0: any): any;
				public convert(param0: okhttp3.ResponseBody): any;
			}
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Body {
			public static class: java.lang.Class<retrofit2.http.Body>;
			/**
			 * Constructs a new instance of the retrofit2.http.Body interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
			});
			public constructor();
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class DELETE {
			public static class: java.lang.Class<retrofit2.http.DELETE>;
			/**
			 * Constructs a new instance of the retrofit2.http.DELETE interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
			});
			public constructor();
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Field {
			public static class: java.lang.Class<retrofit2.http.Field>;
			/**
			 * Constructs a new instance of the retrofit2.http.Field interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
				encoded(): boolean;
			});
			public constructor();
			public encoded(): boolean;
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class FieldMap {
			public static class: java.lang.Class<retrofit2.http.FieldMap>;
			/**
			 * Constructs a new instance of the retrofit2.http.FieldMap interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				encoded(): boolean;
			});
			public constructor();
			public encoded(): boolean;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class FormUrlEncoded {
			public static class: java.lang.Class<retrofit2.http.FormUrlEncoded>;
			/**
			 * Constructs a new instance of the retrofit2.http.FormUrlEncoded interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
			});
			public constructor();
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class GET {
			public static class: java.lang.Class<retrofit2.http.GET>;
			/**
			 * Constructs a new instance of the retrofit2.http.GET interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
			});
			public constructor();
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class HEAD {
			public static class: java.lang.Class<retrofit2.http.HEAD>;
			/**
			 * Constructs a new instance of the retrofit2.http.HEAD interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
			});
			public constructor();
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class HTTP {
			public static class: java.lang.Class<retrofit2.http.HTTP>;
			/**
			 * Constructs a new instance of the retrofit2.http.HTTP interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				method(): string;
				path(): string;
				hasBody(): boolean;
			});
			public constructor();
			public hasBody(): boolean;
			public method(): string;
			public path(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Header {
			public static class: java.lang.Class<retrofit2.http.Header>;
			/**
			 * Constructs a new instance of the retrofit2.http.Header interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
			});
			public constructor();
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class HeaderMap {
			public static class: java.lang.Class<retrofit2.http.HeaderMap>;
			/**
			 * Constructs a new instance of the retrofit2.http.HeaderMap interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
			});
			public constructor();
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Headers {
			public static class: java.lang.Class<retrofit2.http.Headers>;
			/**
			 * Constructs a new instance of the retrofit2.http.Headers interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): native.Array<string>;
			});
			public constructor();
			public value(): native.Array<string>;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Multipart {
			public static class: java.lang.Class<retrofit2.http.Multipart>;
			/**
			 * Constructs a new instance of the retrofit2.http.Multipart interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
			});
			public constructor();
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class OPTIONS {
			public static class: java.lang.Class<retrofit2.http.OPTIONS>;
			/**
			 * Constructs a new instance of the retrofit2.http.OPTIONS interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
			});
			public constructor();
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class PATCH {
			public static class: java.lang.Class<retrofit2.http.PATCH>;
			/**
			 * Constructs a new instance of the retrofit2.http.PATCH interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
			});
			public constructor();
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class POST {
			public static class: java.lang.Class<retrofit2.http.POST>;
			/**
			 * Constructs a new instance of the retrofit2.http.POST interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
			});
			public constructor();
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class PUT {
			public static class: java.lang.Class<retrofit2.http.PUT>;
			/**
			 * Constructs a new instance of the retrofit2.http.PUT interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
			});
			public constructor();
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Part {
			public static class: java.lang.Class<retrofit2.http.Part>;
			/**
			 * Constructs a new instance of the retrofit2.http.Part interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
				encoding(): string;
			});
			public constructor();
			public encoding(): string;
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class PartMap {
			public static class: java.lang.Class<retrofit2.http.PartMap>;
			/**
			 * Constructs a new instance of the retrofit2.http.PartMap interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				encoding(): string;
			});
			public constructor();
			public encoding(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Path {
			public static class: java.lang.Class<retrofit2.http.Path>;
			/**
			 * Constructs a new instance of the retrofit2.http.Path interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
				encoded(): boolean;
			});
			public constructor();
			public encoded(): boolean;
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Query {
			public static class: java.lang.Class<retrofit2.http.Query>;
			/**
			 * Constructs a new instance of the retrofit2.http.Query interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				value(): string;
				encoded(): boolean;
			});
			public constructor();
			public encoded(): boolean;
			public value(): string;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class QueryMap {
			public static class: java.lang.Class<retrofit2.http.QueryMap>;
			/**
			 * Constructs a new instance of the retrofit2.http.QueryMap interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				encoded(): boolean;
			});
			public constructor();
			public encoded(): boolean;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class QueryName {
			public static class: java.lang.Class<retrofit2.http.QueryName>;
			/**
			 * Constructs a new instance of the retrofit2.http.QueryName interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				encoded(): boolean;
			});
			public constructor();
			public encoded(): boolean;
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Streaming {
			public static class: java.lang.Class<retrofit2.http.Streaming>;
			/**
			 * Constructs a new instance of the retrofit2.http.Streaming interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
			});
			public constructor();
		}
	}
}

declare namespace retrofit2 {
	export namespace http {
		export class Url {
			public static class: java.lang.Class<retrofit2.http.Url>;
			/**
			 * Constructs a new instance of the retrofit2.http.Url interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
			});
			public constructor();
		}
	}
}